Building DAG of jobs...
Your conda installation is not configured to use strict channel priorities. This is however crucial for having robust and correct environments (for details, see https://conda-forge.org/docs/user/tipsandtricks.html). Please consider to configure strict priorities by executing 'conda config --set channel_priority strict'.
Using shell: /usr/bin/bash
Provided cores: 50
Rules claiming more threads will be scaled down.
Job stats:
job                                         count    min threads    max threads
----------------------------------------  -------  -------------  -------------
align_haplotypes_to_hg38                        1             50             50
all                                             1              1              1
create_haplotyped_personalised_reference        1              1              1
filter_bam                                      1             50             50
filter_vcf_for_region                           1             50             50
longshot                                        1             50             50
phase_vcf                                       1             50             50
run_deepvariant                                 1              1              1
sort_and_index                                  1             50             50
total                                           9              1             50

Resources before job selection: {'_cores': 50, '_nodes': 9223372036854775807}
Ready jobs (2):
	run_deepvariant
	filter_bam
Select jobs to execute...
Welcome to the CBC MILP Solver 
Version: 2.10.5 
Build Date: Dec  8 2020 

command line - cbc /tmp/b19fa56afc59478bbf8cf9f7de4bf5c3-pulp.mps max timeMode elapsed branch printingOptions all solution /tmp/b19fa56afc59478bbf8cf9f7de4bf5c3-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 7 COLUMNS
At line 18 RHS
At line 21 BOUNDS
At line 24 ENDATA
Problem MODEL has 2 rows, 2 columns and 4 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 100 - 0.00 seconds
Cgl0003I 0 fixed, 0 tightened bounds, 0 strengthened rows, 1 substitutions
Cgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements
Cbc3007W No integer variables - nothing to do
Cuts at root node changed objective from -100 to -1.79769e+308
Probing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Gomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Knapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Clique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
FlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
TwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
ZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                100.00000000
Enumerated nodes:               0
Total iterations:               0
Time (CPU seconds):             0.03
Time (Wallclock seconds):       0.00

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.04   (Wallclock seconds):       0.00

Selected jobs (1):
	filter_bam
Resources after job selection: {'_cores': 0, '_nodes': 9223372036854775806}

[Thu Jan  9 16:07:50 2025]
rule filter_bam:
    input: mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam, mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam.bai
    output: mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_region.bam
    jobid: 3
    reason: Missing output files: mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_region.bam
    threads: 50
    resources: tmpdir=/tmp

Activating conda environment: .snakemake/conda/821afc5f42557a83b898d84d915f5d43_
[Thu Jan  9 16:09:16 2025]
Finished job 3.
1 of 9 steps (11%) done
Resources before job selection: {'_cores': 50, '_nodes': 9223372036854775807}
Ready jobs (2):
	run_deepvariant
	sort_and_index
Select jobs to execute...
Welcome to the CBC MILP Solver 
Version: 2.10.5 
Build Date: Dec  8 2020 

command line - cbc /tmp/d06a9be72e654164ad264ac16a317123-pulp.mps max timeMode elapsed branch printingOptions all solution /tmp/d06a9be72e654164ad264ac16a317123-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 7 COLUMNS
At line 18 RHS
At line 21 BOUNDS
At line 24 ENDATA
Problem MODEL has 2 rows, 2 columns and 4 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 100 - 0.00 seconds
Cgl0003I 0 fixed, 0 tightened bounds, 0 strengthened rows, 1 substitutions
Cgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements
Cbc3007W No integer variables - nothing to do
Cuts at root node changed objective from -100 to -1.79769e+308
Probing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Gomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Knapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Clique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
FlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
TwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
ZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                100.00000000
Enumerated nodes:               0
Total iterations:               0
Time (CPU seconds):             0.01
Time (Wallclock seconds):       0.00

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.50   (Wallclock seconds):       0.00

Selected jobs (1):
	sort_and_index
Resources after job selection: {'_cores': 0, '_nodes': 9223372036854775806}

[Thu Jan  9 16:09:16 2025]
rule sort_and_index:
    input: mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_region.bam
    output: mapping/A53T_828_21.12_SW_Barcode02_laser_DNA.bam, mapping/A53T_828_21.12_SW_Barcode02_laser_DNA.bam.bai
    jobid: 2
    reason: Missing output files: mapping/A53T_828_21.12_SW_Barcode02_laser_DNA.bam; Input files updated by another job: mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_region.bam
    threads: 50
    resources: tmpdir=/tmp

Activating conda environment: .snakemake/conda/821afc5f42557a83b898d84d915f5d43_
[bam_sort_core] merging from 0 files and 50 in-memory blocks...
[Thu Jan  9 16:09:33 2025]
Finished job 2.
2 of 9 steps (22%) done
Resources before job selection: {'_cores': 50, '_nodes': 9223372036854775807}
Ready jobs (2):
	run_deepvariant
	longshot
Select jobs to execute...
Welcome to the CBC MILP Solver 
Version: 2.10.5 
Build Date: Dec  8 2020 

command line - cbc /tmp/6652c85285b84b8b949240af8ff86a74-pulp.mps max timeMode elapsed branch printingOptions all solution /tmp/6652c85285b84b8b949240af8ff86a74-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 7 COLUMNS
At line 18 RHS
At line 21 BOUNDS
At line 24 ENDATA
Problem MODEL has 2 rows, 2 columns and 4 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 100 - 0.00 seconds
Cgl0003I 0 fixed, 0 tightened bounds, 0 strengthened rows, 1 substitutions
Cgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements
Cbc3007W No integer variables - nothing to do
Cuts at root node changed objective from -100 to -1.79769e+308
Probing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Gomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Knapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Clique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
FlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
TwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
ZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                100.00000000
Enumerated nodes:               0
Total iterations:               0
Time (CPU seconds):             0.03
Time (Wallclock seconds):       0.00

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.03   (Wallclock seconds):       0.00

Selected jobs (1):
	longshot
Resources after job selection: {'_cores': 0, '_nodes': 9223372036854775806}

[Thu Jan  9 16:09:33 2025]
rule longshot:
    input: mapping/A53T_828_21.12_SW_Barcode02_laser_DNA.bam
    output: longshot/A53T_828_21.12_SW_Barcode02_laser_DNA.vcf.gz
    jobid: 1
    reason: Missing output files: longshot/A53T_828_21.12_SW_Barcode02_laser_DNA.vcf.gz; Input files updated by another job: mapping/A53T_828_21.12_SW_Barcode02_laser_DNA.bam
    threads: 50
    resources: tmpdir=/tmp

Activating conda environment: .snakemake/conda/821afc5f42557a83b898d84d915f5d43_

2025-01-09 16:09:34 Min read coverage set to 6.
2025-01-09 16:09:34 Max read coverage set to 8000.
2025-01-09 16:09:34 Estimating alignment parameters...
2025-01-09 16:10:16 Done estimating alignment parameters.

                    Transition Probabilities:
                    match -> match:          0.989
                    match -> insertion:      0.004
                    match -> deletion:       0.007
                    deletion -> match:       0.632
                    deletion -> deletion:    0.368
                    insertion -> match:      0.684
                    insertion -> insertion:  0.316

                    Emission Probabilities:
                    match (equal):           0.989
                    match (not equal):       0.004
                    insertion:               1.000
                    deletion:                1.000

                    GENOTYPE PRIORS:
                    REF G1/G2 PROB
                    C D/I 0.0000000000015624993116907664
                    G A/A 0.00016666692910805806
                    G D/I 0.0000000000015624993116907664
                    T T/T 0.9984401606149776
                    A C/D 0.0000000004166671407128834
                    A A/T 0.0003333338549006453
                    C A/A 0.00016666692910805806
                    G T/T 0.00016666692910805806
                    C C/T 0.0003333338549006453
                    T A/T 0.0003333338549006453
                    G G/I 0.000001250002950856874
                    T D/I 0.0000000000015624993116907664
                    C D/D 0.000006249988919003825
                    T G/D 0.0000000004166671407128834
                    C A/T 0.00000011111137065235802
                    C G/D 0.0000000004166671407128834
                    G T/I 0.0000000004166671407128834
                    C C/C 0.9984401606149776
                    A G/G 0.00016666692910805806
                    A A/I 0.000001250002950856874
                    A A/C 0.0003333338549006453
                    T T/I 0.000001250002950856874
                    G G/D 0.000001250002950856874
                    T C/G 0.00000011111137065235802
                    G C/G 0.0003333338549006453
                    G A/I 0.0000000004166671407128834
                    G C/I 0.0000000004166671407128834
                    C T/D 0.0000000004166671407128834
                    G A/C 0.00000011111137065235802
                    A I/I 0.000006249988919003825
                    A G/T 0.00000011111137065235802
                    C G/I 0.0000000004166671407128834
                    T A/C 0.00000011111137065235802
                    T A/I 0.0000000004166671407128834
                    C A/G 0.00000011111137065235802
                    T T/D 0.000001250002950856874
                    A C/T 0.00000011111137065235802
                    A A/D 0.000001250002950856874
                    A T/T 0.00016666692910805806
                    A D/I 0.0000000000015624993116907664
                    G A/T 0.00000011111137065235802
                    G G/G 0.9984401606149776
                    G C/T 0.00000011111137065235802
                    G I/I 0.000006249988919003825
                    T A/D 0.0000000004166671407128834
                    T C/D 0.0000000004166671407128834
                    T I/I 0.000006249988919003825
                    A C/G 0.00000011111137065235802
                    C C/G 0.0003333338549006453
                    C A/D 0.0000000004166671407128834
                    C G/T 0.00000011111137065235802
                    T D/D 0.000006249988919003825
                    A A/G 0.0003333338549006453
                    T C/I 0.0000000004166671407128834
                    A D/D 0.000006249988919003825
                    T A/A 0.00016666692910805806
                    T G/I 0.0000000004166671407128834
                    G G/T 0.0003333338549006453
                    C G/G 0.00016666692910805806
                    G T/D 0.0000000004166671407128834
                    C C/D 0.000001250002950856874
                    A G/D 0.0000000004166671407128834
                    C A/C 0.0003333338549006453
                    C A/I 0.0000000004166671407128834
                    T G/T 0.0003333338549006453
                    A T/D 0.0000000004166671407128834
                    G C/D 0.0000000004166671407128834
                    G A/D 0.0000000004166671407128834
                    C T/I 0.0000000004166671407128834
                    C C/I 0.000001250002950856874
                    T C/T 0.0003333338549006453
                    A C/I 0.0000000004166671407128834
                    A C/C 0.00016666692910805806
                    C I/I 0.000006249988919003825
                    G D/D 0.000006249988919003825
                    A A/A 0.9984401606149776
                    A G/I 0.0000000004166671407128834
                    C T/T 0.00016666692910805806
                    T C/C 0.00016666692910805806
                    G C/C 0.00016666692910805806
                    T A/G 0.00000011111137065235802
                    T G/G 0.00016666692910805806
                    A T/I 0.0000000004166671407128834
                    G A/G 0.0003333338549006453
2025-01-09 16:10:16 Calling potential SNVs using pileup...
2025-01-09 16:11:56 139620 potential variants identified.
2025-01-09 16:11:56 Generating haplotype fragments from reads...
2025-01-09 16:12:01    10% of variants processed...
2025-01-09 16:12:04    20% of variants processed...
2025-01-09 16:12:08    30% of variants processed...
2025-01-09 16:12:12    40% of variants processed...
2025-01-09 16:12:26    50% of variants processed...
2025-01-09 16:12:41    60% of variants processed...
2025-01-09 16:12:54    70% of variants processed...
2025-01-09 16:13:01    80% of variants processed...
2025-01-09 16:13:06    90% of variants processed...
2025-01-09 16:13:12    100% of variants processed.
2025-01-09 16:13:12 Calling initial genotypes using pair-HMM realignment...
2025-01-09 16:13:12 Iteratively assembling haplotypes and refining genotypes...
2025-01-09 16:13:13    Round 1 of haplotype assembly...
2025-01-09 16:13:13    (Before HapCUT2) Total phased heterozygous SNVs: 75615  Total likelihood (phred): 30531799.69
2025-01-09 16:13:48    (After HapCUT2)  Total phased heterozygous SNVs: 75615  Total likelihood (phred): 8056637.29
2025-01-09 16:13:53    (After Greedy)   Total phased heterozygous SNVs: 75615  Total likelihood (phred): 7672048.16
2025-01-09 16:13:53    Round 2 of haplotype assembly...
2025-01-09 16:13:53    (Before HapCUT2) Total phased heterozygous SNVs: 71471  Total likelihood (phred): 7672048.16
2025-01-09 16:14:19    (After HapCUT2)  Total phased heterozygous SNVs: 71471  Total likelihood (phred): 7670622.87
2025-01-09 16:14:22    (After Greedy)   Total phased heterozygous SNVs: 71471  Total likelihood (phred): 7663314.36
2025-01-09 16:14:22 Printing VCF file...
[Thu Jan  9 16:14:46 2025]
Finished job 1.
3 of 9 steps (33%) done
Resources before job selection: {'_cores': 50, '_nodes': 9223372036854775807}
Ready jobs (2):
	run_deepvariant
	filter_vcf_for_region
Select jobs to execute...
Welcome to the CBC MILP Solver 
Version: 2.10.5 
Build Date: Dec  8 2020 

command line - cbc /tmp/629900b6aa014f24bfa33fae18131f08-pulp.mps max timeMode elapsed branch printingOptions all solution /tmp/629900b6aa014f24bfa33fae18131f08-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 7 COLUMNS
At line 18 RHS
At line 21 BOUNDS
At line 24 ENDATA
Problem MODEL has 2 rows, 2 columns and 4 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 100 - 0.00 seconds
Cgl0003I 0 fixed, 0 tightened bounds, 0 strengthened rows, 1 substitutions
Cgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements
Cbc3007W No integer variables - nothing to do
Cuts at root node changed objective from -100 to -1.79769e+308
Probing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Gomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Knapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Clique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
FlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
TwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
ZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                100.00000000
Enumerated nodes:               0
Total iterations:               0
Time (CPU seconds):             0.00
Time (Wallclock seconds):       0.00

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.44   (Wallclock seconds):       0.04

Selected jobs (1):
	filter_vcf_for_region
Resources after job selection: {'_cores': 0, '_nodes': 9223372036854775806}

[Thu Jan  9 16:14:46 2025]
rule filter_vcf_for_region:
    input: longshot/A53T_828_21.12_SW_Barcode02_laser_DNA.vcf.gz
    output: longshot/A53T_828_21.12_SW_Barcode02_laser_DNA_region.vcf.gz
    jobid: 10
    reason: Missing output files: longshot/A53T_828_21.12_SW_Barcode02_laser_DNA_region.vcf.gz; Input files updated by another job: longshot/A53T_828_21.12_SW_Barcode02_laser_DNA.vcf.gz
    threads: 50
    resources: tmpdir=/tmp

Activating conda environment: .snakemake/conda/b629aed5d77d25755445827ea0c1d4f7_
[Thu Jan  9 16:14:50 2025]
Finished job 10.
4 of 9 steps (44%) done
Resources before job selection: {'_cores': 50, '_nodes': 9223372036854775807}
Ready jobs (1):
	run_deepvariant
Select jobs to execute...
Using greedy selector because only single job has to be scheduled.
Selected jobs (1):
	run_deepvariant
Resources after job selection: {'_cores': 49, '_nodes': 9223372036854775806}

[Thu Jan  9 16:14:50 2025]
rule run_deepvariant:
    input: mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam
    output: deepvariant/A53T_828_21.12_SW_Barcode02_laser_DNA.vcf, deepvariant/A53T_828_21.12_SW_Barcode02_laser_DNA.gvcf
    log: deepvariant/run_deepvariant.log
    jobid: 6
    reason: Missing output files: deepvariant/A53T_828_21.12_SW_Barcode02_laser_DNA.vcf, deepvariant/A53T_828_21.12_SW_Barcode02_laser_DNA.gvcf
    resources: tmpdir=/tmp


***** Intermediate results will be written to /tmp/tmp797co85g in docker. ****


***** Running the command:*****
time seq 0 29 | parallel -q --halt 2 --line-buffer /opt/deepvariant/bin/make_examples --mode calling --ref "/home/MRHannahMacpherson/MinaRyten/Emil/references/GRCh38.primary_assembly.genome.fa" --reads "mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam" --examples "/tmp/tmp797co85g/make_examples.tfrecord@30.gz" --add_hp_channel --alt_aligned_pileup "diff_channels" --gvcf "/tmp/tmp797co85g/gvcf.tfrecord@30.gz" --max_reads_per_partition "600" --min_mapping_quality "5" --parse_sam_aux_fields --partition_size "25000" --phase_reads --pileup_image_width "199" --norealign_reads --regions "chr4:50078847-140078843" --sort_by_haplotypes --track_ref_reads --vsc_min_fraction_indels "0.12" --vsc_min_fraction_snps "0.08" --task {}

2025-01-09 16:15:14.364337: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2025-01-09 16:15:14.531609: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2025-01-09 16:15:14.542042: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2025-01-09 16:15:14.600923: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2025-01-09 16:15:14.579445: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2025-01-09 16:15:14.728171: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2025-01-09 16:15:14.806270: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2025-01-09 16:15:14.872875: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2025-01-09 16:15:14.951483: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2025-01-09 16:15:14.951515: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2025-01-09 16:15:15.116990: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2025-01-09 16:15:15.194162: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2025-01-09 16:15:15.053225: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2025-01-09 16:15:15.030764: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2025-01-09 16:15:15.072341: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2025-01-09 16:15:14.987000: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2025-01-09 16:15:15.155879: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2025-01-09 16:15:15.062021: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2025-01-09 16:15:15.154660: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2025-01-09 16:15:15.162231: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2025-01-09 16:15:15.146081: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2025-01-09 16:15:15.163117: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2025-01-09 16:15:15.358189: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2025-01-09 16:15:15.462058: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2025-01-09 16:15:15.361767: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2025-01-09 16:15:15.489442: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2025-01-09 16:15:15.523464: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2025-01-09 16:15:15.645101: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2025-01-09 16:15:15.646970: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2025-01-09 16:15:15.523365: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
I0109 16:15:17.606269 140484979402560 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
W0109 16:15:17.606872 140484979402560 make_examples_core.py:298] No non-empty sample name found in the input reads. DeepVariant will use default as the sample name. You can also provide a sample name with the --sample_name argument.
I0109 16:15:17.603356 140075713414976 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
W0109 16:15:17.603682 140075713414976 make_examples_core.py:298] No non-empty sample name found in the input reads. DeepVariant will use default as the sample name. You can also provide a sample name with the --sample_name argument.
I0109 16:15:17.452036 139711390340928 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
W0109 16:15:17.452347 139711390340928 make_examples_core.py:298] No non-empty sample name found in the input reads. DeepVariant will use default as the sample name. You can also provide a sample name with the --sample_name argument.
I0109 16:15:17.510549 139711390340928 make_examples_core.py:257] Task 15/30: Preparing inputs
I0109 16:15:17.541061 139711390340928 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:17.621281 139711390340928 make_examples_core.py:257] Task 15/30: Common contigs are ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY', 'chrM', 'GL000008.2', 'GL000009.2', 'GL000205.2', 'GL000216.2', 'KI270302.1', 'KI270303.1', 'KI270304.1', 'KI270305.1', 'KI270310.1', 'KI270311.1', 'KI270312.1', 'KI270315.1', 'KI270316.1', 'KI270317.1', 'KI270320.1', 'KI270322.1', 'KI270329.1', 'KI270330.1', 'KI270333.1', 'KI270334.1', 'KI270335.1', 'KI270336.1', 'KI270337.1', 'KI270338.1', 'KI270340.1', 'KI270362.1', 'KI270363.1', 'KI270364.1', 'KI270366.1', 'KI270371.1', 'KI270372.1', 'KI270373.1', 'KI270374.1', 'KI270375.1', 'KI270376.1', 'KI270378.1', 'KI270379.1', 'KI270381.1', 'KI270382.1', 'KI270383.1', 'KI270384.1', 'KI270385.1', 'KI270386.1', 'KI270387.1', 'KI270388.1', 'KI270389.1', 'KI270390.1', 'KI270391.1', 'KI270392.1', 'KI270393.1', 'KI270394.1', 'KI270395.1', 'KI270396.1', 'KI270411.1', 'KI270412.1', 'KI270414.1', 'KI270417.1', 'KI270418.1', 'KI270419.1', 'KI270420.1', 'KI270422.1', 'KI270423.1', 'KI270424.1', 'KI270425.1', 'KI270429.1', 'KI270435.1', 'KI270438.1', 'KI270442.1', 'KI270448.1', 'KI270465.1', 'KI270466.1', 'KI270467.1', 'KI270468.1', 'KI270507.1', 'KI270508.1', 'KI270509.1', 'KI270510.1', 'KI270511.1', 'KI270512.1', 'KI270515.1', 'KI270516.1', 'KI270517.1', 'KI270518.1', 'KI270519.1', 'KI270521.1', 'KI270522.1', 'KI270528.1', 'KI270529.1', 'KI270530.1', 'KI270538.1', 'KI270539.1', 'KI270544.1', 'KI270548.1', 'KI270579.1', 'KI270580.1', 'KI270581.1', 'KI270582.1', 'KI270583.1', 'KI270584.1', 'KI270587.1', 'KI270588.1', 'KI270589.1', 'KI270590.1', 'KI270591.1', 'KI270593.1', 'KI270706.1', 'KI270707.1', 'KI270708.1', 'KI270709.1', 'KI270710.1', 'KI270711.1', 'KI270712.1', 'KI270713.1', 'KI270714.1', 'KI270715.1', 'KI270716.1', 'KI270717.1', 'KI270718.1', 'KI270719.1', 'KI270720.1', 'KI270721.1', 'KI270722.1', 'KI270723.1', 'KI270724.1', 'KI270725.1', 'KI270726.1', 'KI270727.1', 'KI270728.1', 'KI270729.1', 'KI270730.1', 'KI270731.1', 'KI270732.1', 'KI270733.1', 'KI270734.1', 'KI270735.1', 'KI270736.1', 'KI270737.1', 'KI270738.1', 'KI270739.1', 'KI270740.1', 'KI270741.1', 'KI270742.1', 'KI270743.1', 'KI270744.1', 'KI270745.1', 'KI270746.1', 'KI270747.1', 'KI270748.1', 'KI270749.1', 'KI270750.1', 'KI270751.1', 'KI270752.1', 'KI270753.1', 'KI270754.1', 'KI270755.1', 'KI270756.1', 'KI270757.1']
I0109 16:15:17.604137 140144794814272 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
W0109 16:15:17.604470 140144794814272 make_examples_core.py:298] No non-empty sample name found in the input reads. DeepVariant will use default as the sample name. You can also provide a sample name with the --sample_name argument.
I0109 16:15:17.583566 140669765121856 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
W0109 16:15:17.583895 140669765121856 make_examples_core.py:298] No non-empty sample name found in the input reads. DeepVariant will use default as the sample name. You can also provide a sample name with the --sample_name argument.
I0109 16:15:17.609812 140404518430528 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
W0109 16:15:17.610202 140404518430528 make_examples_core.py:298] No non-empty sample name found in the input reads. DeepVariant will use default as the sample name. You can also provide a sample name with the --sample_name argument.
I0109 16:15:17.561694 140367169652544 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
W0109 16:15:17.562028 140367169652544 make_examples_core.py:298] No non-empty sample name found in the input reads. DeepVariant will use default as the sample name. You can also provide a sample name with the --sample_name argument.
I0109 16:15:17.625706 140367169652544 make_examples_core.py:257] Task 13/30: Preparing inputs
I0109 16:15:17.596661 140187777787712 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
W0109 16:15:17.597056 140187777787712 make_examples_core.py:298] No non-empty sample name found in the input reads. DeepVariant will use default as the sample name. You can also provide a sample name with the --sample_name argument.
I0109 16:15:17.405714 139834169136960 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
W0109 16:15:17.405956 139834169136960 make_examples_core.py:298] No non-empty sample name found in the input reads. DeepVariant will use default as the sample name. You can also provide a sample name with the --sample_name argument.
I0109 16:15:17.476861 139834169136960 make_examples_core.py:257] Task 18/30: Preparing inputs
I0109 16:15:17.518931 139834169136960 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:17.617733 139834169136960 make_examples_core.py:257] Task 18/30: Common contigs are ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY', 'chrM', 'GL000008.2', 'GL000009.2', 'GL000205.2', 'GL000216.2', 'KI270302.1', 'KI270303.1', 'KI270304.1', 'KI270305.1', 'KI270310.1', 'KI270311.1', 'KI270312.1', 'KI270315.1', 'KI270316.1', 'KI270317.1', 'KI270320.1', 'KI270322.1', 'KI270329.1', 'KI270330.1', 'KI270333.1', 'KI270334.1', 'KI270335.1', 'KI270336.1', 'KI270337.1', 'KI270338.1', 'KI270340.1', 'KI270362.1', 'KI270363.1', 'KI270364.1', 'KI270366.1', 'KI270371.1', 'KI270372.1', 'KI270373.1', 'KI270374.1', 'KI270375.1', 'KI270376.1', 'KI270378.1', 'KI270379.1', 'KI270381.1', 'KI270382.1', 'KI270383.1', 'KI270384.1', 'KI270385.1', 'KI270386.1', 'KI270387.1', 'KI270388.1', 'KI270389.1', 'KI270390.1', 'KI270391.1', 'KI270392.1', 'KI270393.1', 'KI270394.1', 'KI270395.1', 'KI270396.1', 'KI270411.1', 'KI270412.1', 'KI270414.1', 'KI270417.1', 'KI270418.1', 'KI270419.1', 'KI270420.1', 'KI270422.1', 'KI270423.1', 'KI270424.1', 'KI270425.1', 'KI270429.1', 'KI270435.1', 'KI270438.1', 'KI270442.1', 'KI270448.1', 'KI270465.1', 'KI270466.1', 'KI270467.1', 'KI270468.1', 'KI270507.1', 'KI270508.1', 'KI270509.1', 'KI270510.1', 'KI270511.1', 'KI270512.1', 'KI270515.1', 'KI270516.1', 'KI270517.1', 'KI270518.1', 'KI270519.1', 'KI270521.1', 'KI270522.1', 'KI270528.1', 'KI270529.1', 'KI270530.1', 'KI270538.1', 'KI270539.1', 'KI270544.1', 'KI270548.1', 'KI270579.1', 'KI270580.1', 'KI270581.1', 'KI270582.1', 'KI270583.1', 'KI270584.1', 'KI270587.1', 'KI270588.1', 'KI270589.1', 'KI270590.1', 'KI270591.1', 'KI270593.1', 'KI270706.1', 'KI270707.1', 'KI270708.1', 'KI270709.1', 'KI270710.1', 'KI270711.1', 'KI270712.1', 'KI270713.1', 'KI270714.1', 'KI270715.1', 'KI270716.1', 'KI270717.1', 'KI270718.1', 'KI270719.1', 'KI270720.1', 'KI270721.1', 'KI270722.1', 'KI270723.1', 'KI270724.1', 'KI270725.1', 'KI270726.1', 'KI270727.1', 'KI270728.1', 'KI270729.1', 'KI270730.1', 'KI270731.1', 'KI270732.1', 'KI270733.1', 'KI270734.1', 'KI270735.1', 'KI270736.1', 'KI270737.1', 'KI270738.1', 'KI270739.1', 'KI270740.1', 'KI270741.1', 'KI270742.1', 'KI270743.1', 'KI270744.1', 'KI270745.1', 'KI270746.1', 'KI270747.1', 'KI270748.1', 'KI270749.1', 'KI270750.1', 'KI270751.1', 'KI270752.1', 'KI270753.1', 'KI270754.1', 'KI270755.1', 'KI270756.1', 'KI270757.1']
I0109 16:15:17.678905 140666116208448 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
W0109 16:15:17.679252 140666116208448 make_examples_core.py:298] No non-empty sample name found in the input reads. DeepVariant will use default as the sample name. You can also provide a sample name with the --sample_name argument.
I0109 16:15:17.719437 140666116208448 make_examples_core.py:257] Task 26/30: Preparing inputs
I0109 16:15:17.749215 140666116208448 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:17.832677 140666116208448 make_examples_core.py:257] Task 26/30: Common contigs are ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY', 'chrM', 'GL000008.2', 'GL000009.2', 'GL000205.2', 'GL000216.2', 'KI270302.1', 'KI270303.1', 'KI270304.1', 'KI270305.1', 'KI270310.1', 'KI270311.1', 'KI270312.1', 'KI270315.1', 'KI270316.1', 'KI270317.1', 'KI270320.1', 'KI270322.1', 'KI270329.1', 'KI270330.1', 'KI270333.1', 'KI270334.1', 'KI270335.1', 'KI270336.1', 'KI270337.1', 'KI270338.1', 'KI270340.1', 'KI270362.1', 'KI270363.1', 'KI270364.1', 'KI270366.1', 'KI270371.1', 'KI270372.1', 'KI270373.1', 'KI270374.1', 'KI270375.1', 'KI270376.1', 'KI270378.1', 'KI270379.1', 'KI270381.1', 'KI270382.1', 'KI270383.1', 'KI270384.1', 'KI270385.1', 'KI270386.1', 'KI270387.1', 'KI270388.1', 'KI270389.1', 'KI270390.1', 'KI270391.1', 'KI270392.1', 'KI270393.1', 'KI270394.1', 'KI270395.1', 'KI270396.1', 'KI270411.1', 'KI270412.1', 'KI270414.1', 'KI270417.1', 'KI270418.1', 'KI270419.1', 'KI270420.1', 'KI270422.1', 'KI270423.1', 'KI270424.1', 'KI270425.1', 'KI270429.1', 'KI270435.1', 'KI270438.1', 'KI270442.1', 'KI270448.1', 'KI270465.1', 'KI270466.1', 'KI270467.1', 'KI270468.1', 'KI270507.1', 'KI270508.1', 'KI270509.1', 'KI270510.1', 'KI270511.1', 'KI270512.1', 'KI270515.1', 'KI270516.1', 'KI270517.1', 'KI270518.1', 'KI270519.1', 'KI270521.1', 'KI270522.1', 'KI270528.1', 'KI270529.1', 'KI270530.1', 'KI270538.1', 'KI270539.1', 'KI270544.1', 'KI270548.1', 'KI270579.1', 'KI270580.1', 'KI270581.1', 'KI270582.1', 'KI270583.1', 'KI270584.1', 'KI270587.1', 'KI270588.1', 'KI270589.1', 'KI270590.1', 'KI270591.1', 'KI270593.1', 'KI270706.1', 'KI270707.1', 'KI270708.1', 'KI270709.1', 'KI270710.1', 'KI270711.1', 'KI270712.1', 'KI270713.1', 'KI270714.1', 'KI270715.1', 'KI270716.1', 'KI270717.1', 'KI270718.1', 'KI270719.1', 'KI270720.1', 'KI270721.1', 'KI270722.1', 'KI270723.1', 'KI270724.1', 'KI270725.1', 'KI270726.1', 'KI270727.1', 'KI270728.1', 'KI270729.1', 'KI270730.1', 'KI270731.1', 'KI270732.1', 'KI270733.1', 'KI270734.1', 'KI270735.1', 'KI270736.1', 'KI270737.1', 'KI270738.1', 'KI270739.1', 'KI270740.1', 'KI270741.1', 'KI270742.1', 'KI270743.1', 'KI270744.1', 'KI270745.1', 'KI270746.1', 'KI270747.1', 'KI270748.1', 'KI270749.1', 'KI270750.1', 'KI270751.1', 'KI270752.1', 'KI270753.1', 'KI270754.1', 'KI270755.1', 'KI270756.1', 'KI270757.1']
I0109 16:15:17.860568 140666116208448 make_examples_core.py:257] Task 26/30: Starting from v0.9.0, --use_ref_for_cram is default to true. If you are using CRAM input, note that we will decode CRAM using the reference you passed in with --ref
2025-01-09 16:15:17.861060: I third_party/nucleus/io/sam_reader.cc:736] Setting HTS_OPT_BLOCK_SIZE to 134217728
I0109 16:15:17.995247 140666116208448 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:17.672057 140484979402560 make_examples_core.py:257] Task 17/30: Preparing inputs
I0109 16:15:17.703994 140484979402560 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:17.783945 140484979402560 make_examples_core.py:257] Task 17/30: Common contigs are ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY', 'chrM', 'GL000008.2', 'GL000009.2', 'GL000205.2', 'GL000216.2', 'KI270302.1', 'KI270303.1', 'KI270304.1', 'KI270305.1', 'KI270310.1', 'KI270311.1', 'KI270312.1', 'KI270315.1', 'KI270316.1', 'KI270317.1', 'KI270320.1', 'KI270322.1', 'KI270329.1', 'KI270330.1', 'KI270333.1', 'KI270334.1', 'KI270335.1', 'KI270336.1', 'KI270337.1', 'KI270338.1', 'KI270340.1', 'KI270362.1', 'KI270363.1', 'KI270364.1', 'KI270366.1', 'KI270371.1', 'KI270372.1', 'KI270373.1', 'KI270374.1', 'KI270375.1', 'KI270376.1', 'KI270378.1', 'KI270379.1', 'KI270381.1', 'KI270382.1', 'KI270383.1', 'KI270384.1', 'KI270385.1', 'KI270386.1', 'KI270387.1', 'KI270388.1', 'KI270389.1', 'KI270390.1', 'KI270391.1', 'KI270392.1', 'KI270393.1', 'KI270394.1', 'KI270395.1', 'KI270396.1', 'KI270411.1', 'KI270412.1', 'KI270414.1', 'KI270417.1', 'KI270418.1', 'KI270419.1', 'KI270420.1', 'KI270422.1', 'KI270423.1', 'KI270424.1', 'KI270425.1', 'KI270429.1', 'KI270435.1', 'KI270438.1', 'KI270442.1', 'KI270448.1', 'KI270465.1', 'KI270466.1', 'KI270467.1', 'KI270468.1', 'KI270507.1', 'KI270508.1', 'KI270509.1', 'KI270510.1', 'KI270511.1', 'KI270512.1', 'KI270515.1', 'KI270516.1', 'KI270517.1', 'KI270518.1', 'KI270519.1', 'KI270521.1', 'KI270522.1', 'KI270528.1', 'KI270529.1', 'KI270530.1', 'KI270538.1', 'KI270539.1', 'KI270544.1', 'KI270548.1', 'KI270579.1', 'KI270580.1', 'KI270581.1', 'KI270582.1', 'KI270583.1', 'KI270584.1', 'KI270587.1', 'KI270588.1', 'KI270589.1', 'KI270590.1', 'KI270591.1', 'KI270593.1', 'KI270706.1', 'KI270707.1', 'KI270708.1', 'KI270709.1', 'KI270710.1', 'KI270711.1', 'KI270712.1', 'KI270713.1', 'KI270714.1', 'KI270715.1', 'KI270716.1', 'KI270717.1', 'KI270718.1', 'KI270719.1', 'KI270720.1', 'KI270721.1', 'KI270722.1', 'KI270723.1', 'KI270724.1', 'KI270725.1', 'KI270726.1', 'KI270727.1', 'KI270728.1', 'KI270729.1', 'KI270730.1', 'KI270731.1', 'KI270732.1', 'KI270733.1', 'KI270734.1', 'KI270735.1', 'KI270736.1', 'KI270737.1', 'KI270738.1', 'KI270739.1', 'KI270740.1', 'KI270741.1', 'KI270742.1', 'KI270743.1', 'KI270744.1', 'KI270745.1', 'KI270746.1', 'KI270747.1', 'KI270748.1', 'KI270749.1', 'KI270750.1', 'KI270751.1', 'KI270752.1', 'KI270753.1', 'KI270754.1', 'KI270755.1', 'KI270756.1', 'KI270757.1']
I0109 16:15:17.813820 140484979402560 make_examples_core.py:257] Task 17/30: Starting from v0.9.0, --use_ref_for_cram is default to true. If you are using CRAM input, note that we will decode CRAM using the reference you passed in with --ref
2025-01-09 16:15:17.814797: I third_party/nucleus/io/sam_reader.cc:736] Setting HTS_OPT_BLOCK_SIZE to 134217728
I0109 16:15:17.993961 140484979402560 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:17.706113 139770797205312 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
W0109 16:15:17.706435 139770797205312 make_examples_core.py:298] No non-empty sample name found in the input reads. DeepVariant will use default as the sample name. You can also provide a sample name with the --sample_name argument.
I0109 16:15:17.743760 139770797205312 make_examples_core.py:257] Task 23/30: Preparing inputs
I0109 16:15:17.773587 139770797205312 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:17.860400 139770797205312 make_examples_core.py:257] Task 23/30: Common contigs are ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY', 'chrM', 'GL000008.2', 'GL000009.2', 'GL000205.2', 'GL000216.2', 'KI270302.1', 'KI270303.1', 'KI270304.1', 'KI270305.1', 'KI270310.1', 'KI270311.1', 'KI270312.1', 'KI270315.1', 'KI270316.1', 'KI270317.1', 'KI270320.1', 'KI270322.1', 'KI270329.1', 'KI270330.1', 'KI270333.1', 'KI270334.1', 'KI270335.1', 'KI270336.1', 'KI270337.1', 'KI270338.1', 'KI270340.1', 'KI270362.1', 'KI270363.1', 'KI270364.1', 'KI270366.1', 'KI270371.1', 'KI270372.1', 'KI270373.1', 'KI270374.1', 'KI270375.1', 'KI270376.1', 'KI270378.1', 'KI270379.1', 'KI270381.1', 'KI270382.1', 'KI270383.1', 'KI270384.1', 'KI270385.1', 'KI270386.1', 'KI270387.1', 'KI270388.1', 'KI270389.1', 'KI270390.1', 'KI270391.1', 'KI270392.1', 'KI270393.1', 'KI270394.1', 'KI270395.1', 'KI270396.1', 'KI270411.1', 'KI270412.1', 'KI270414.1', 'KI270417.1', 'KI270418.1', 'KI270419.1', 'KI270420.1', 'KI270422.1', 'KI270423.1', 'KI270424.1', 'KI270425.1', 'KI270429.1', 'KI270435.1', 'KI270438.1', 'KI270442.1', 'KI270448.1', 'KI270465.1', 'KI270466.1', 'KI270467.1', 'KI270468.1', 'KI270507.1', 'KI270508.1', 'KI270509.1', 'KI270510.1', 'KI270511.1', 'KI270512.1', 'KI270515.1', 'KI270516.1', 'KI270517.1', 'KI270518.1', 'KI270519.1', 'KI270521.1', 'KI270522.1', 'KI270528.1', 'KI270529.1', 'KI270530.1', 'KI270538.1', 'KI270539.1', 'KI270544.1', 'KI270548.1', 'KI270579.1', 'KI270580.1', 'KI270581.1', 'KI270582.1', 'KI270583.1', 'KI270584.1', 'KI270587.1', 'KI270588.1', 'KI270589.1', 'KI270590.1', 'KI270591.1', 'KI270593.1', 'KI270706.1', 'KI270707.1', 'KI270708.1', 'KI270709.1', 'KI270710.1', 'KI270711.1', 'KI270712.1', 'KI270713.1', 'KI270714.1', 'KI270715.1', 'KI270716.1', 'KI270717.1', 'KI270718.1', 'KI270719.1', 'KI270720.1', 'KI270721.1', 'KI270722.1', 'KI270723.1', 'KI270724.1', 'KI270725.1', 'KI270726.1', 'KI270727.1', 'KI270728.1', 'KI270729.1', 'KI270730.1', 'KI270731.1', 'KI270732.1', 'KI270733.1', 'KI270734.1', 'KI270735.1', 'KI270736.1', 'KI270737.1', 'KI270738.1', 'KI270739.1', 'KI270740.1', 'KI270741.1', 'KI270742.1', 'KI270743.1', 'KI270744.1', 'KI270745.1', 'KI270746.1', 'KI270747.1', 'KI270748.1', 'KI270749.1', 'KI270750.1', 'KI270751.1', 'KI270752.1', 'KI270753.1', 'KI270754.1', 'KI270755.1', 'KI270756.1', 'KI270757.1']
I0109 16:15:17.888888 139770797205312 make_examples_core.py:257] Task 23/30: Starting from v0.9.0, --use_ref_for_cram is default to true. If you are using CRAM input, note that we will decode CRAM using the reference you passed in with --ref
2025-01-09 16:15:17.889349: I third_party/nucleus/io/sam_reader.cc:736] Setting HTS_OPT_BLOCK_SIZE to 134217728
I0109 16:15:18.017626 139770797205312 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:17.848160 140267877631808 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
W0109 16:15:17.848535 140267877631808 make_examples_core.py:298] No non-empty sample name found in the input reads. DeepVariant will use default as the sample name. You can also provide a sample name with the --sample_name argument.
I0109 16:15:17.915987 140267877631808 make_examples_core.py:257] Task 19/30: Preparing inputs
I0109 16:15:17.957375 140267877631808 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.069022 140267877631808 make_examples_core.py:257] Task 19/30: Common contigs are ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY', 'chrM', 'GL000008.2', 'GL000009.2', 'GL000205.2', 'GL000216.2', 'KI270302.1', 'KI270303.1', 'KI270304.1', 'KI270305.1', 'KI270310.1', 'KI270311.1', 'KI270312.1', 'KI270315.1', 'KI270316.1', 'KI270317.1', 'KI270320.1', 'KI270322.1', 'KI270329.1', 'KI270330.1', 'KI270333.1', 'KI270334.1', 'KI270335.1', 'KI270336.1', 'KI270337.1', 'KI270338.1', 'KI270340.1', 'KI270362.1', 'KI270363.1', 'KI270364.1', 'KI270366.1', 'KI270371.1', 'KI270372.1', 'KI270373.1', 'KI270374.1', 'KI270375.1', 'KI270376.1', 'KI270378.1', 'KI270379.1', 'KI270381.1', 'KI270382.1', 'KI270383.1', 'KI270384.1', 'KI270385.1', 'KI270386.1', 'KI270387.1', 'KI270388.1', 'KI270389.1', 'KI270390.1', 'KI270391.1', 'KI270392.1', 'KI270393.1', 'KI270394.1', 'KI270395.1', 'KI270396.1', 'KI270411.1', 'KI270412.1', 'KI270414.1', 'KI270417.1', 'KI270418.1', 'KI270419.1', 'KI270420.1', 'KI270422.1', 'KI270423.1', 'KI270424.1', 'KI270425.1', 'KI270429.1', 'KI270435.1', 'KI270438.1', 'KI270442.1', 'KI270448.1', 'KI270465.1', 'KI270466.1', 'KI270467.1', 'KI270468.1', 'KI270507.1', 'KI270508.1', 'KI270509.1', 'KI270510.1', 'KI270511.1', 'KI270512.1', 'KI270515.1', 'KI270516.1', 'KI270517.1', 'KI270518.1', 'KI270519.1', 'KI270521.1', 'KI270522.1', 'KI270528.1', 'KI270529.1', 'KI270530.1', 'KI270538.1', 'KI270539.1', 'KI270544.1', 'KI270548.1', 'KI270579.1', 'KI270580.1', 'KI270581.1', 'KI270582.1', 'KI270583.1', 'KI270584.1', 'KI270587.1', 'KI270588.1', 'KI270589.1', 'KI270590.1', 'KI270591.1', 'KI270593.1', 'KI270706.1', 'KI270707.1', 'KI270708.1', 'KI270709.1', 'KI270710.1', 'KI270711.1', 'KI270712.1', 'KI270713.1', 'KI270714.1', 'KI270715.1', 'KI270716.1', 'KI270717.1', 'KI270718.1', 'KI270719.1', 'KI270720.1', 'KI270721.1', 'KI270722.1', 'KI270723.1', 'KI270724.1', 'KI270725.1', 'KI270726.1', 'KI270727.1', 'KI270728.1', 'KI270729.1', 'KI270730.1', 'KI270731.1', 'KI270732.1', 'KI270733.1', 'KI270734.1', 'KI270735.1', 'KI270736.1', 'KI270737.1', 'KI270738.1', 'KI270739.1', 'KI270740.1', 'KI270741.1', 'KI270742.1', 'KI270743.1', 'KI270744.1', 'KI270745.1', 'KI270746.1', 'KI270747.1', 'KI270748.1', 'KI270749.1', 'KI270750.1', 'KI270751.1', 'KI270752.1', 'KI270753.1', 'KI270754.1', 'KI270755.1', 'KI270756.1', 'KI270757.1']
I0109 16:15:18.104751 140267877631808 make_examples_core.py:257] Task 19/30: Starting from v0.9.0, --use_ref_for_cram is default to true. If you are using CRAM input, note that we will decode CRAM using the reference you passed in with --ref
2025-01-09 16:15:18.105297: I third_party/nucleus/io/sam_reader.cc:736] Setting HTS_OPT_BLOCK_SIZE to 134217728
I0109 16:15:17.673228 140075713414976 make_examples_core.py:257] Task 0/30: Preparing inputs
I0109 16:15:17.705018 140075713414976 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:17.795756 140075713414976 make_examples_core.py:257] Task 0/30: Common contigs are ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY', 'chrM', 'GL000008.2', 'GL000009.2', 'GL000205.2', 'GL000216.2', 'KI270302.1', 'KI270303.1', 'KI270304.1', 'KI270305.1', 'KI270310.1', 'KI270311.1', 'KI270312.1', 'KI270315.1', 'KI270316.1', 'KI270317.1', 'KI270320.1', 'KI270322.1', 'KI270329.1', 'KI270330.1', 'KI270333.1', 'KI270334.1', 'KI270335.1', 'KI270336.1', 'KI270337.1', 'KI270338.1', 'KI270340.1', 'KI270362.1', 'KI270363.1', 'KI270364.1', 'KI270366.1', 'KI270371.1', 'KI270372.1', 'KI270373.1', 'KI270374.1', 'KI270375.1', 'KI270376.1', 'KI270378.1', 'KI270379.1', 'KI270381.1', 'KI270382.1', 'KI270383.1', 'KI270384.1', 'KI270385.1', 'KI270386.1', 'KI270387.1', 'KI270388.1', 'KI270389.1', 'KI270390.1', 'KI270391.1', 'KI270392.1', 'KI270393.1', 'KI270394.1', 'KI270395.1', 'KI270396.1', 'KI270411.1', 'KI270412.1', 'KI270414.1', 'KI270417.1', 'KI270418.1', 'KI270419.1', 'KI270420.1', 'KI270422.1', 'KI270423.1', 'KI270424.1', 'KI270425.1', 'KI270429.1', 'KI270435.1', 'KI270438.1', 'KI270442.1', 'KI270448.1', 'KI270465.1', 'KI270466.1', 'KI270467.1', 'KI270468.1', 'KI270507.1', 'KI270508.1', 'KI270509.1', 'KI270510.1', 'KI270511.1', 'KI270512.1', 'KI270515.1', 'KI270516.1', 'KI270517.1', 'KI270518.1', 'KI270519.1', 'KI270521.1', 'KI270522.1', 'KI270528.1', 'KI270529.1', 'KI270530.1', 'KI270538.1', 'KI270539.1', 'KI270544.1', 'KI270548.1', 'KI270579.1', 'KI270580.1', 'KI270581.1', 'KI270582.1', 'KI270583.1', 'KI270584.1', 'KI270587.1', 'KI270588.1', 'KI270589.1', 'KI270590.1', 'KI270591.1', 'KI270593.1', 'KI270706.1', 'KI270707.1', 'KI270708.1', 'KI270709.1', 'KI270710.1', 'KI270711.1', 'KI270712.1', 'KI270713.1', 'KI270714.1', 'KI270715.1', 'KI270716.1', 'KI270717.1', 'KI270718.1', 'KI270719.1', 'KI270720.1', 'KI270721.1', 'KI270722.1', 'KI270723.1', 'KI270724.1', 'KI270725.1', 'KI270726.1', 'KI270727.1', 'KI270728.1', 'KI270729.1', 'KI270730.1', 'KI270731.1', 'KI270732.1', 'KI270733.1', 'KI270734.1', 'KI270735.1', 'KI270736.1', 'KI270737.1', 'KI270738.1', 'KI270739.1', 'KI270740.1', 'KI270741.1', 'KI270742.1', 'KI270743.1', 'KI270744.1', 'KI270745.1', 'KI270746.1', 'KI270747.1', 'KI270748.1', 'KI270749.1', 'KI270750.1', 'KI270751.1', 'KI270752.1', 'KI270753.1', 'KI270754.1', 'KI270755.1', 'KI270756.1', 'KI270757.1']
I0109 16:15:17.823649 140075713414976 make_examples_core.py:257] Task 0/30: Starting from v0.9.0, --use_ref_for_cram is default to true. If you are using CRAM input, note that we will decode CRAM using the reference you passed in with --ref
2025-01-09 16:15:17.824232: I third_party/nucleus/io/sam_reader.cc:736] Setting HTS_OPT_BLOCK_SIZE to 134217728
I0109 16:15:18.003370 140075713414976 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:17.652915 139711390340928 make_examples_core.py:257] Task 15/30: Starting from v0.9.0, --use_ref_for_cram is default to true. If you are using CRAM input, note that we will decode CRAM using the reference you passed in with --ref
2025-01-09 16:15:17.653451: I third_party/nucleus/io/sam_reader.cc:736] Setting HTS_OPT_BLOCK_SIZE to 134217728
I0109 16:15:18.014485 139711390340928 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:17.677453 140144794814272 make_examples_core.py:257] Task 5/30: Preparing inputs
I0109 16:15:17.719976 140144794814272 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:17.853559 140144794814272 make_examples_core.py:257] Task 5/30: Common contigs are ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY', 'chrM', 'GL000008.2', 'GL000009.2', 'GL000205.2', 'GL000216.2', 'KI270302.1', 'KI270303.1', 'KI270304.1', 'KI270305.1', 'KI270310.1', 'KI270311.1', 'KI270312.1', 'KI270315.1', 'KI270316.1', 'KI270317.1', 'KI270320.1', 'KI270322.1', 'KI270329.1', 'KI270330.1', 'KI270333.1', 'KI270334.1', 'KI270335.1', 'KI270336.1', 'KI270337.1', 'KI270338.1', 'KI270340.1', 'KI270362.1', 'KI270363.1', 'KI270364.1', 'KI270366.1', 'KI270371.1', 'KI270372.1', 'KI270373.1', 'KI270374.1', 'KI270375.1', 'KI270376.1', 'KI270378.1', 'KI270379.1', 'KI270381.1', 'KI270382.1', 'KI270383.1', 'KI270384.1', 'KI270385.1', 'KI270386.1', 'KI270387.1', 'KI270388.1', 'KI270389.1', 'KI270390.1', 'KI270391.1', 'KI270392.1', 'KI270393.1', 'KI270394.1', 'KI270395.1', 'KI270396.1', 'KI270411.1', 'KI270412.1', 'KI270414.1', 'KI270417.1', 'KI270418.1', 'KI270419.1', 'KI270420.1', 'KI270422.1', 'KI270423.1', 'KI270424.1', 'KI270425.1', 'KI270429.1', 'KI270435.1', 'KI270438.1', 'KI270442.1', 'KI270448.1', 'KI270465.1', 'KI270466.1', 'KI270467.1', 'KI270468.1', 'KI270507.1', 'KI270508.1', 'KI270509.1', 'KI270510.1', 'KI270511.1', 'KI270512.1', 'KI270515.1', 'KI270516.1', 'KI270517.1', 'KI270518.1', 'KI270519.1', 'KI270521.1', 'KI270522.1', 'KI270528.1', 'KI270529.1', 'KI270530.1', 'KI270538.1', 'KI270539.1', 'KI270544.1', 'KI270548.1', 'KI270579.1', 'KI270580.1', 'KI270581.1', 'KI270582.1', 'KI270583.1', 'KI270584.1', 'KI270587.1', 'KI270588.1', 'KI270589.1', 'KI270590.1', 'KI270591.1', 'KI270593.1', 'KI270706.1', 'KI270707.1', 'KI270708.1', 'KI270709.1', 'KI270710.1', 'KI270711.1', 'KI270712.1', 'KI270713.1', 'KI270714.1', 'KI270715.1', 'KI270716.1', 'KI270717.1', 'KI270718.1', 'KI270719.1', 'KI270720.1', 'KI270721.1', 'KI270722.1', 'KI270723.1', 'KI270724.1', 'KI270725.1', 'KI270726.1', 'KI270727.1', 'KI270728.1', 'KI270729.1', 'KI270730.1', 'KI270731.1', 'KI270732.1', 'KI270733.1', 'KI270734.1', 'KI270735.1', 'KI270736.1', 'KI270737.1', 'KI270738.1', 'KI270739.1', 'KI270740.1', 'KI270741.1', 'KI270742.1', 'KI270743.1', 'KI270744.1', 'KI270745.1', 'KI270746.1', 'KI270747.1', 'KI270748.1', 'KI270749.1', 'KI270750.1', 'KI270751.1', 'KI270752.1', 'KI270753.1', 'KI270754.1', 'KI270755.1', 'KI270756.1', 'KI270757.1']
I0109 16:15:17.897346 140144794814272 make_examples_core.py:257] Task 5/30: Starting from v0.9.0, --use_ref_for_cram is default to true. If you are using CRAM input, note that we will decode CRAM using the reference you passed in with --ref
2025-01-09 16:15:17.897946: I third_party/nucleus/io/sam_reader.cc:736] Setting HTS_OPT_BLOCK_SIZE to 134217728
I0109 16:15:18.051925 140144794814272 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:17.658380 140669765121856 make_examples_core.py:257] Task 6/30: Preparing inputs
I0109 16:15:17.699704 140669765121856 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:17.823873 140669765121856 make_examples_core.py:257] Task 6/30: Common contigs are ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY', 'chrM', 'GL000008.2', 'GL000009.2', 'GL000205.2', 'GL000216.2', 'KI270302.1', 'KI270303.1', 'KI270304.1', 'KI270305.1', 'KI270310.1', 'KI270311.1', 'KI270312.1', 'KI270315.1', 'KI270316.1', 'KI270317.1', 'KI270320.1', 'KI270322.1', 'KI270329.1', 'KI270330.1', 'KI270333.1', 'KI270334.1', 'KI270335.1', 'KI270336.1', 'KI270337.1', 'KI270338.1', 'KI270340.1', 'KI270362.1', 'KI270363.1', 'KI270364.1', 'KI270366.1', 'KI270371.1', 'KI270372.1', 'KI270373.1', 'KI270374.1', 'KI270375.1', 'KI270376.1', 'KI270378.1', 'KI270379.1', 'KI270381.1', 'KI270382.1', 'KI270383.1', 'KI270384.1', 'KI270385.1', 'KI270386.1', 'KI270387.1', 'KI270388.1', 'KI270389.1', 'KI270390.1', 'KI270391.1', 'KI270392.1', 'KI270393.1', 'KI270394.1', 'KI270395.1', 'KI270396.1', 'KI270411.1', 'KI270412.1', 'KI270414.1', 'KI270417.1', 'KI270418.1', 'KI270419.1', 'KI270420.1', 'KI270422.1', 'KI270423.1', 'KI270424.1', 'KI270425.1', 'KI270429.1', 'KI270435.1', 'KI270438.1', 'KI270442.1', 'KI270448.1', 'KI270465.1', 'KI270466.1', 'KI270467.1', 'KI270468.1', 'KI270507.1', 'KI270508.1', 'KI270509.1', 'KI270510.1', 'KI270511.1', 'KI270512.1', 'KI270515.1', 'KI270516.1', 'KI270517.1', 'KI270518.1', 'KI270519.1', 'KI270521.1', 'KI270522.1', 'KI270528.1', 'KI270529.1', 'KI270530.1', 'KI270538.1', 'KI270539.1', 'KI270544.1', 'KI270548.1', 'KI270579.1', 'KI270580.1', 'KI270581.1', 'KI270582.1', 'KI270583.1', 'KI270584.1', 'KI270587.1', 'KI270588.1', 'KI270589.1', 'KI270590.1', 'KI270591.1', 'KI270593.1', 'KI270706.1', 'KI270707.1', 'KI270708.1', 'KI270709.1', 'KI270710.1', 'KI270711.1', 'KI270712.1', 'KI270713.1', 'KI270714.1', 'KI270715.1', 'KI270716.1', 'KI270717.1', 'KI270718.1', 'KI270719.1', 'KI270720.1', 'KI270721.1', 'KI270722.1', 'KI270723.1', 'KI270724.1', 'KI270725.1', 'KI270726.1', 'KI270727.1', 'KI270728.1', 'KI270729.1', 'KI270730.1', 'KI270731.1', 'KI270732.1', 'KI270733.1', 'KI270734.1', 'KI270735.1', 'KI270736.1', 'KI270737.1', 'KI270738.1', 'KI270739.1', 'KI270740.1', 'KI270741.1', 'KI270742.1', 'KI270743.1', 'KI270744.1', 'KI270745.1', 'KI270746.1', 'KI270747.1', 'KI270748.1', 'KI270749.1', 'KI270750.1', 'KI270751.1', 'KI270752.1', 'KI270753.1', 'KI270754.1', 'KI270755.1', 'KI270756.1', 'KI270757.1']
I0109 16:15:17.865438 140669765121856 make_examples_core.py:257] Task 6/30: Starting from v0.9.0, --use_ref_for_cram is default to true. If you are using CRAM input, note that we will decode CRAM using the reference you passed in with --ref
2025-01-09 16:15:17.866074: I third_party/nucleus/io/sam_reader.cc:736] Setting HTS_OPT_BLOCK_SIZE to 134217728
I0109 16:15:18.004412 140669765121856 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:17.779884 140188848478016 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
W0109 16:15:17.780194 140188848478016 make_examples_core.py:298] No non-empty sample name found in the input reads. DeepVariant will use default as the sample name. You can also provide a sample name with the --sample_name argument.
I0109 16:15:17.866112 140188848478016 make_examples_core.py:257] Task 8/30: Preparing inputs
I0109 16:15:17.908638 140188848478016 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.029201 140188848478016 make_examples_core.py:257] Task 8/30: Common contigs are ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY', 'chrM', 'GL000008.2', 'GL000009.2', 'GL000205.2', 'GL000216.2', 'KI270302.1', 'KI270303.1', 'KI270304.1', 'KI270305.1', 'KI270310.1', 'KI270311.1', 'KI270312.1', 'KI270315.1', 'KI270316.1', 'KI270317.1', 'KI270320.1', 'KI270322.1', 'KI270329.1', 'KI270330.1', 'KI270333.1', 'KI270334.1', 'KI270335.1', 'KI270336.1', 'KI270337.1', 'KI270338.1', 'KI270340.1', 'KI270362.1', 'KI270363.1', 'KI270364.1', 'KI270366.1', 'KI270371.1', 'KI270372.1', 'KI270373.1', 'KI270374.1', 'KI270375.1', 'KI270376.1', 'KI270378.1', 'KI270379.1', 'KI270381.1', 'KI270382.1', 'KI270383.1', 'KI270384.1', 'KI270385.1', 'KI270386.1', 'KI270387.1', 'KI270388.1', 'KI270389.1', 'KI270390.1', 'KI270391.1', 'KI270392.1', 'KI270393.1', 'KI270394.1', 'KI270395.1', 'KI270396.1', 'KI270411.1', 'KI270412.1', 'KI270414.1', 'KI270417.1', 'KI270418.1', 'KI270419.1', 'KI270420.1', 'KI270422.1', 'KI270423.1', 'KI270424.1', 'KI270425.1', 'KI270429.1', 'KI270435.1', 'KI270438.1', 'KI270442.1', 'KI270448.1', 'KI270465.1', 'KI270466.1', 'KI270467.1', 'KI270468.1', 'KI270507.1', 'KI270508.1', 'KI270509.1', 'KI270510.1', 'KI270511.1', 'KI270512.1', 'KI270515.1', 'KI270516.1', 'KI270517.1', 'KI270518.1', 'KI270519.1', 'KI270521.1', 'KI270522.1', 'KI270528.1', 'KI270529.1', 'KI270530.1', 'KI270538.1', 'KI270539.1', 'KI270544.1', 'KI270548.1', 'KI270579.1', 'KI270580.1', 'KI270581.1', 'KI270582.1', 'KI270583.1', 'KI270584.1', 'KI270587.1', 'KI270588.1', 'KI270589.1', 'KI270590.1', 'KI270591.1', 'KI270593.1', 'KI270706.1', 'KI270707.1', 'KI270708.1', 'KI270709.1', 'KI270710.1', 'KI270711.1', 'KI270712.1', 'KI270713.1', 'KI270714.1', 'KI270715.1', 'KI270716.1', 'KI270717.1', 'KI270718.1', 'KI270719.1', 'KI270720.1', 'KI270721.1', 'KI270722.1', 'KI270723.1', 'KI270724.1', 'KI270725.1', 'KI270726.1', 'KI270727.1', 'KI270728.1', 'KI270729.1', 'KI270730.1', 'KI270731.1', 'KI270732.1', 'KI270733.1', 'KI270734.1', 'KI270735.1', 'KI270736.1', 'KI270737.1', 'KI270738.1', 'KI270739.1', 'KI270740.1', 'KI270741.1', 'KI270742.1', 'KI270743.1', 'KI270744.1', 'KI270745.1', 'KI270746.1', 'KI270747.1', 'KI270748.1', 'KI270749.1', 'KI270750.1', 'KI270751.1', 'KI270752.1', 'KI270753.1', 'KI270754.1', 'KI270755.1', 'KI270756.1', 'KI270757.1']
I0109 16:15:18.066037 140188848478016 make_examples_core.py:257] Task 8/30: Starting from v0.9.0, --use_ref_for_cram is default to true. If you are using CRAM input, note that we will decode CRAM using the reference you passed in with --ref
2025-01-09 16:15:18.066578: I third_party/nucleus/io/sam_reader.cc:736] Setting HTS_OPT_BLOCK_SIZE to 134217728
I0109 16:15:18.097104 140186146633536 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
W0109 16:15:18.097479 140186146633536 make_examples_core.py:298] No non-empty sample name found in the input reads. DeepVariant will use default as the sample name. You can also provide a sample name with the --sample_name argument.
I0109 16:15:17.972310 140260784252736 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
W0109 16:15:17.972658 140260784252736 make_examples_core.py:298] No non-empty sample name found in the input reads. DeepVariant will use default as the sample name. You can also provide a sample name with the --sample_name argument.
I0109 16:15:18.033982 140260784252736 make_examples_core.py:257] Task 9/30: Preparing inputs
I0109 16:15:18.062146 140260784252736 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.137982 140260784252736 make_examples_core.py:257] Task 9/30: Common contigs are ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY', 'chrM', 'GL000008.2', 'GL000009.2', 'GL000205.2', 'GL000216.2', 'KI270302.1', 'KI270303.1', 'KI270304.1', 'KI270305.1', 'KI270310.1', 'KI270311.1', 'KI270312.1', 'KI270315.1', 'KI270316.1', 'KI270317.1', 'KI270320.1', 'KI270322.1', 'KI270329.1', 'KI270330.1', 'KI270333.1', 'KI270334.1', 'KI270335.1', 'KI270336.1', 'KI270337.1', 'KI270338.1', 'KI270340.1', 'KI270362.1', 'KI270363.1', 'KI270364.1', 'KI270366.1', 'KI270371.1', 'KI270372.1', 'KI270373.1', 'KI270374.1', 'KI270375.1', 'KI270376.1', 'KI270378.1', 'KI270379.1', 'KI270381.1', 'KI270382.1', 'KI270383.1', 'KI270384.1', 'KI270385.1', 'KI270386.1', 'KI270387.1', 'KI270388.1', 'KI270389.1', 'KI270390.1', 'KI270391.1', 'KI270392.1', 'KI270393.1', 'KI270394.1', 'KI270395.1', 'KI270396.1', 'KI270411.1', 'KI270412.1', 'KI270414.1', 'KI270417.1', 'KI270418.1', 'KI270419.1', 'KI270420.1', 'KI270422.1', 'KI270423.1', 'KI270424.1', 'KI270425.1', 'KI270429.1', 'KI270435.1', 'KI270438.1', 'KI270442.1', 'KI270448.1', 'KI270465.1', 'KI270466.1', 'KI270467.1', 'KI270468.1', 'KI270507.1', 'KI270508.1', 'KI270509.1', 'KI270510.1', 'KI270511.1', 'KI270512.1', 'KI270515.1', 'KI270516.1', 'KI270517.1', 'KI270518.1', 'KI270519.1', 'KI270521.1', 'KI270522.1', 'KI270528.1', 'KI270529.1', 'KI270530.1', 'KI270538.1', 'KI270539.1', 'KI270544.1', 'KI270548.1', 'KI270579.1', 'KI270580.1', 'KI270581.1', 'KI270582.1', 'KI270583.1', 'KI270584.1', 'KI270587.1', 'KI270588.1', 'KI270589.1', 'KI270590.1', 'KI270591.1', 'KI270593.1', 'KI270706.1', 'KI270707.1', 'KI270708.1', 'KI270709.1', 'KI270710.1', 'KI270711.1', 'KI270712.1', 'KI270713.1', 'KI270714.1', 'KI270715.1', 'KI270716.1', 'KI270717.1', 'KI270718.1', 'KI270719.1', 'KI270720.1', 'KI270721.1', 'KI270722.1', 'KI270723.1', 'KI270724.1', 'KI270725.1', 'KI270726.1', 'KI270727.1', 'KI270728.1', 'KI270729.1', 'KI270730.1', 'KI270731.1', 'KI270732.1', 'KI270733.1', 'KI270734.1', 'KI270735.1', 'KI270736.1', 'KI270737.1', 'KI270738.1', 'KI270739.1', 'KI270740.1', 'KI270741.1', 'KI270742.1', 'KI270743.1', 'KI270744.1', 'KI270745.1', 'KI270746.1', 'KI270747.1', 'KI270748.1', 'KI270749.1', 'KI270750.1', 'KI270751.1', 'KI270752.1', 'KI270753.1', 'KI270754.1', 'KI270755.1', 'KI270756.1', 'KI270757.1']
I0109 16:15:17.906408 139938488489792 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
W0109 16:15:17.906757 139938488489792 make_examples_core.py:298] No non-empty sample name found in the input reads. DeepVariant will use default as the sample name. You can also provide a sample name with the --sample_name argument.
I0109 16:15:17.964553 139938488489792 make_examples_core.py:257] Task 2/30: Preparing inputs
I0109 16:15:17.993659 139938488489792 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.074268 139938488489792 make_examples_core.py:257] Task 2/30: Common contigs are ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY', 'chrM', 'GL000008.2', 'GL000009.2', 'GL000205.2', 'GL000216.2', 'KI270302.1', 'KI270303.1', 'KI270304.1', 'KI270305.1', 'KI270310.1', 'KI270311.1', 'KI270312.1', 'KI270315.1', 'KI270316.1', 'KI270317.1', 'KI270320.1', 'KI270322.1', 'KI270329.1', 'KI270330.1', 'KI270333.1', 'KI270334.1', 'KI270335.1', 'KI270336.1', 'KI270337.1', 'KI270338.1', 'KI270340.1', 'KI270362.1', 'KI270363.1', 'KI270364.1', 'KI270366.1', 'KI270371.1', 'KI270372.1', 'KI270373.1', 'KI270374.1', 'KI270375.1', 'KI270376.1', 'KI270378.1', 'KI270379.1', 'KI270381.1', 'KI270382.1', 'KI270383.1', 'KI270384.1', 'KI270385.1', 'KI270386.1', 'KI270387.1', 'KI270388.1', 'KI270389.1', 'KI270390.1', 'KI270391.1', 'KI270392.1', 'KI270393.1', 'KI270394.1', 'KI270395.1', 'KI270396.1', 'KI270411.1', 'KI270412.1', 'KI270414.1', 'KI270417.1', 'KI270418.1', 'KI270419.1', 'KI270420.1', 'KI270422.1', 'KI270423.1', 'KI270424.1', 'KI270425.1', 'KI270429.1', 'KI270435.1', 'KI270438.1', 'KI270442.1', 'KI270448.1', 'KI270465.1', 'KI270466.1', 'KI270467.1', 'KI270468.1', 'KI270507.1', 'KI270508.1', 'KI270509.1', 'KI270510.1', 'KI270511.1', 'KI270512.1', 'KI270515.1', 'KI270516.1', 'KI270517.1', 'KI270518.1', 'KI270519.1', 'KI270521.1', 'KI270522.1', 'KI270528.1', 'KI270529.1', 'KI270530.1', 'KI270538.1', 'KI270539.1', 'KI270544.1', 'KI270548.1', 'KI270579.1', 'KI270580.1', 'KI270581.1', 'KI270582.1', 'KI270583.1', 'KI270584.1', 'KI270587.1', 'KI270588.1', 'KI270589.1', 'KI270590.1', 'KI270591.1', 'KI270593.1', 'KI270706.1', 'KI270707.1', 'KI270708.1', 'KI270709.1', 'KI270710.1', 'KI270711.1', 'KI270712.1', 'KI270713.1', 'KI270714.1', 'KI270715.1', 'KI270716.1', 'KI270717.1', 'KI270718.1', 'KI270719.1', 'KI270720.1', 'KI270721.1', 'KI270722.1', 'KI270723.1', 'KI270724.1', 'KI270725.1', 'KI270726.1', 'KI270727.1', 'KI270728.1', 'KI270729.1', 'KI270730.1', 'KI270731.1', 'KI270732.1', 'KI270733.1', 'KI270734.1', 'KI270735.1', 'KI270736.1', 'KI270737.1', 'KI270738.1', 'KI270739.1', 'KI270740.1', 'KI270741.1', 'KI270742.1', 'KI270743.1', 'KI270744.1', 'KI270745.1', 'KI270746.1', 'KI270747.1', 'KI270748.1', 'KI270749.1', 'KI270750.1', 'KI270751.1', 'KI270752.1', 'KI270753.1', 'KI270754.1', 'KI270755.1', 'KI270756.1', 'KI270757.1']
I0109 16:15:18.099504 139938488489792 make_examples_core.py:257] Task 2/30: Starting from v0.9.0, --use_ref_for_cram is default to true. If you are using CRAM input, note that we will decode CRAM using the reference you passed in with --ref
2025-01-09 16:15:18.099871: I third_party/nucleus/io/sam_reader.cc:736] Setting HTS_OPT_BLOCK_SIZE to 134217728
I0109 16:15:17.913742 140514036438848 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
W0109 16:15:17.914069 140514036438848 make_examples_core.py:298] No non-empty sample name found in the input reads. DeepVariant will use default as the sample name. You can also provide a sample name with the --sample_name argument.
I0109 16:15:17.966635 140514036438848 make_examples_core.py:257] Task 22/30: Preparing inputs
I0109 16:15:17.996320 140514036438848 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.074829 140514036438848 make_examples_core.py:257] Task 22/30: Common contigs are ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY', 'chrM', 'GL000008.2', 'GL000009.2', 'GL000205.2', 'GL000216.2', 'KI270302.1', 'KI270303.1', 'KI270304.1', 'KI270305.1', 'KI270310.1', 'KI270311.1', 'KI270312.1', 'KI270315.1', 'KI270316.1', 'KI270317.1', 'KI270320.1', 'KI270322.1', 'KI270329.1', 'KI270330.1', 'KI270333.1', 'KI270334.1', 'KI270335.1', 'KI270336.1', 'KI270337.1', 'KI270338.1', 'KI270340.1', 'KI270362.1', 'KI270363.1', 'KI270364.1', 'KI270366.1', 'KI270371.1', 'KI270372.1', 'KI270373.1', 'KI270374.1', 'KI270375.1', 'KI270376.1', 'KI270378.1', 'KI270379.1', 'KI270381.1', 'KI270382.1', 'KI270383.1', 'KI270384.1', 'KI270385.1', 'KI270386.1', 'KI270387.1', 'KI270388.1', 'KI270389.1', 'KI270390.1', 'KI270391.1', 'KI270392.1', 'KI270393.1', 'KI270394.1', 'KI270395.1', 'KI270396.1', 'KI270411.1', 'KI270412.1', 'KI270414.1', 'KI270417.1', 'KI270418.1', 'KI270419.1', 'KI270420.1', 'KI270422.1', 'KI270423.1', 'KI270424.1', 'KI270425.1', 'KI270429.1', 'KI270435.1', 'KI270438.1', 'KI270442.1', 'KI270448.1', 'KI270465.1', 'KI270466.1', 'KI270467.1', 'KI270468.1', 'KI270507.1', 'KI270508.1', 'KI270509.1', 'KI270510.1', 'KI270511.1', 'KI270512.1', 'KI270515.1', 'KI270516.1', 'KI270517.1', 'KI270518.1', 'KI270519.1', 'KI270521.1', 'KI270522.1', 'KI270528.1', 'KI270529.1', 'KI270530.1', 'KI270538.1', 'KI270539.1', 'KI270544.1', 'KI270548.1', 'KI270579.1', 'KI270580.1', 'KI270581.1', 'KI270582.1', 'KI270583.1', 'KI270584.1', 'KI270587.1', 'KI270588.1', 'KI270589.1', 'KI270590.1', 'KI270591.1', 'KI270593.1', 'KI270706.1', 'KI270707.1', 'KI270708.1', 'KI270709.1', 'KI270710.1', 'KI270711.1', 'KI270712.1', 'KI270713.1', 'KI270714.1', 'KI270715.1', 'KI270716.1', 'KI270717.1', 'KI270718.1', 'KI270719.1', 'KI270720.1', 'KI270721.1', 'KI270722.1', 'KI270723.1', 'KI270724.1', 'KI270725.1', 'KI270726.1', 'KI270727.1', 'KI270728.1', 'KI270729.1', 'KI270730.1', 'KI270731.1', 'KI270732.1', 'KI270733.1', 'KI270734.1', 'KI270735.1', 'KI270736.1', 'KI270737.1', 'KI270738.1', 'KI270739.1', 'KI270740.1', 'KI270741.1', 'KI270742.1', 'KI270743.1', 'KI270744.1', 'KI270745.1', 'KI270746.1', 'KI270747.1', 'KI270748.1', 'KI270749.1', 'KI270750.1', 'KI270751.1', 'KI270752.1', 'KI270753.1', 'KI270754.1', 'KI270755.1', 'KI270756.1', 'KI270757.1']
I0109 16:15:18.100070 140514036438848 make_examples_core.py:257] Task 22/30: Starting from v0.9.0, --use_ref_for_cram is default to true. If you are using CRAM input, note that we will decode CRAM using the reference you passed in with --ref
2025-01-09 16:15:18.100470: I third_party/nucleus/io/sam_reader.cc:736] Setting HTS_OPT_BLOCK_SIZE to 134217728
I0109 16:15:17.664900 140404518430528 make_examples_core.py:257] Task 20/30: Preparing inputs
I0109 16:15:17.707246 140404518430528 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:17.842752 140404518430528 make_examples_core.py:257] Task 20/30: Common contigs are ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY', 'chrM', 'GL000008.2', 'GL000009.2', 'GL000205.2', 'GL000216.2', 'KI270302.1', 'KI270303.1', 'KI270304.1', 'KI270305.1', 'KI270310.1', 'KI270311.1', 'KI270312.1', 'KI270315.1', 'KI270316.1', 'KI270317.1', 'KI270320.1', 'KI270322.1', 'KI270329.1', 'KI270330.1', 'KI270333.1', 'KI270334.1', 'KI270335.1', 'KI270336.1', 'KI270337.1', 'KI270338.1', 'KI270340.1', 'KI270362.1', 'KI270363.1', 'KI270364.1', 'KI270366.1', 'KI270371.1', 'KI270372.1', 'KI270373.1', 'KI270374.1', 'KI270375.1', 'KI270376.1', 'KI270378.1', 'KI270379.1', 'KI270381.1', 'KI270382.1', 'KI270383.1', 'KI270384.1', 'KI270385.1', 'KI270386.1', 'KI270387.1', 'KI270388.1', 'KI270389.1', 'KI270390.1', 'KI270391.1', 'KI270392.1', 'KI270393.1', 'KI270394.1', 'KI270395.1', 'KI270396.1', 'KI270411.1', 'KI270412.1', 'KI270414.1', 'KI270417.1', 'KI270418.1', 'KI270419.1', 'KI270420.1', 'KI270422.1', 'KI270423.1', 'KI270424.1', 'KI270425.1', 'KI270429.1', 'KI270435.1', 'KI270438.1', 'KI270442.1', 'KI270448.1', 'KI270465.1', 'KI270466.1', 'KI270467.1', 'KI270468.1', 'KI270507.1', 'KI270508.1', 'KI270509.1', 'KI270510.1', 'KI270511.1', 'KI270512.1', 'KI270515.1', 'KI270516.1', 'KI270517.1', 'KI270518.1', 'KI270519.1', 'KI270521.1', 'KI270522.1', 'KI270528.1', 'KI270529.1', 'KI270530.1', 'KI270538.1', 'KI270539.1', 'KI270544.1', 'KI270548.1', 'KI270579.1', 'KI270580.1', 'KI270581.1', 'KI270582.1', 'KI270583.1', 'KI270584.1', 'KI270587.1', 'KI270588.1', 'KI270589.1', 'KI270590.1', 'KI270591.1', 'KI270593.1', 'KI270706.1', 'KI270707.1', 'KI270708.1', 'KI270709.1', 'KI270710.1', 'KI270711.1', 'KI270712.1', 'KI270713.1', 'KI270714.1', 'KI270715.1', 'KI270716.1', 'KI270717.1', 'KI270718.1', 'KI270719.1', 'KI270720.1', 'KI270721.1', 'KI270722.1', 'KI270723.1', 'KI270724.1', 'KI270725.1', 'KI270726.1', 'KI270727.1', 'KI270728.1', 'KI270729.1', 'KI270730.1', 'KI270731.1', 'KI270732.1', 'KI270733.1', 'KI270734.1', 'KI270735.1', 'KI270736.1', 'KI270737.1', 'KI270738.1', 'KI270739.1', 'KI270740.1', 'KI270741.1', 'KI270742.1', 'KI270743.1', 'KI270744.1', 'KI270745.1', 'KI270746.1', 'KI270747.1', 'KI270748.1', 'KI270749.1', 'KI270750.1', 'KI270751.1', 'KI270752.1', 'KI270753.1', 'KI270754.1', 'KI270755.1', 'KI270756.1', 'KI270757.1']
I0109 16:15:17.888822 140404518430528 make_examples_core.py:257] Task 20/30: Starting from v0.9.0, --use_ref_for_cram is default to true. If you are using CRAM input, note that we will decode CRAM using the reference you passed in with --ref
2025-01-09 16:15:17.889396: I third_party/nucleus/io/sam_reader.cc:736] Setting HTS_OPT_BLOCK_SIZE to 134217728
I0109 16:15:18.040312 140404518430528 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.020009 140432962852672 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
W0109 16:15:18.020299 140432962852672 make_examples_core.py:298] No non-empty sample name found in the input reads. DeepVariant will use default as the sample name. You can also provide a sample name with the --sample_name argument.
I0109 16:15:18.056117 140432962852672 make_examples_core.py:257] Task 11/30: Preparing inputs
I0109 16:15:18.082712 140432962852672 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:17.912930 139849412101952 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
W0109 16:15:17.913278 139849412101952 make_examples_core.py:298] No non-empty sample name found in the input reads. DeepVariant will use default as the sample name. You can also provide a sample name with the --sample_name argument.
I0109 16:15:17.964554 139849412101952 make_examples_core.py:257] Task 4/30: Preparing inputs
I0109 16:15:17.993981 139849412101952 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.074520 139849412101952 make_examples_core.py:257] Task 4/30: Common contigs are ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY', 'chrM', 'GL000008.2', 'GL000009.2', 'GL000205.2', 'GL000216.2', 'KI270302.1', 'KI270303.1', 'KI270304.1', 'KI270305.1', 'KI270310.1', 'KI270311.1', 'KI270312.1', 'KI270315.1', 'KI270316.1', 'KI270317.1', 'KI270320.1', 'KI270322.1', 'KI270329.1', 'KI270330.1', 'KI270333.1', 'KI270334.1', 'KI270335.1', 'KI270336.1', 'KI270337.1', 'KI270338.1', 'KI270340.1', 'KI270362.1', 'KI270363.1', 'KI270364.1', 'KI270366.1', 'KI270371.1', 'KI270372.1', 'KI270373.1', 'KI270374.1', 'KI270375.1', 'KI270376.1', 'KI270378.1', 'KI270379.1', 'KI270381.1', 'KI270382.1', 'KI270383.1', 'KI270384.1', 'KI270385.1', 'KI270386.1', 'KI270387.1', 'KI270388.1', 'KI270389.1', 'KI270390.1', 'KI270391.1', 'KI270392.1', 'KI270393.1', 'KI270394.1', 'KI270395.1', 'KI270396.1', 'KI270411.1', 'KI270412.1', 'KI270414.1', 'KI270417.1', 'KI270418.1', 'KI270419.1', 'KI270420.1', 'KI270422.1', 'KI270423.1', 'KI270424.1', 'KI270425.1', 'KI270429.1', 'KI270435.1', 'KI270438.1', 'KI270442.1', 'KI270448.1', 'KI270465.1', 'KI270466.1', 'KI270467.1', 'KI270468.1', 'KI270507.1', 'KI270508.1', 'KI270509.1', 'KI270510.1', 'KI270511.1', 'KI270512.1', 'KI270515.1', 'KI270516.1', 'KI270517.1', 'KI270518.1', 'KI270519.1', 'KI270521.1', 'KI270522.1', 'KI270528.1', 'KI270529.1', 'KI270530.1', 'KI270538.1', 'KI270539.1', 'KI270544.1', 'KI270548.1', 'KI270579.1', 'KI270580.1', 'KI270581.1', 'KI270582.1', 'KI270583.1', 'KI270584.1', 'KI270587.1', 'KI270588.1', 'KI270589.1', 'KI270590.1', 'KI270591.1', 'KI270593.1', 'KI270706.1', 'KI270707.1', 'KI270708.1', 'KI270709.1', 'KI270710.1', 'KI270711.1', 'KI270712.1', 'KI270713.1', 'KI270714.1', 'KI270715.1', 'KI270716.1', 'KI270717.1', 'KI270718.1', 'KI270719.1', 'KI270720.1', 'KI270721.1', 'KI270722.1', 'KI270723.1', 'KI270724.1', 'KI270725.1', 'KI270726.1', 'KI270727.1', 'KI270728.1', 'KI270729.1', 'KI270730.1', 'KI270731.1', 'KI270732.1', 'KI270733.1', 'KI270734.1', 'KI270735.1', 'KI270736.1', 'KI270737.1', 'KI270738.1', 'KI270739.1', 'KI270740.1', 'KI270741.1', 'KI270742.1', 'KI270743.1', 'KI270744.1', 'KI270745.1', 'KI270746.1', 'KI270747.1', 'KI270748.1', 'KI270749.1', 'KI270750.1', 'KI270751.1', 'KI270752.1', 'KI270753.1', 'KI270754.1', 'KI270755.1', 'KI270756.1', 'KI270757.1']
I0109 16:15:18.099561 139849412101952 make_examples_core.py:257] Task 4/30: Starting from v0.9.0, --use_ref_for_cram is default to true. If you are using CRAM input, note that we will decode CRAM using the reference you passed in with --ref
2025-01-09 16:15:18.099871: I third_party/nucleus/io/sam_reader.cc:736] Setting HTS_OPT_BLOCK_SIZE to 134217728
I0109 16:15:17.929369 140425084057408 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
W0109 16:15:17.929711 140425084057408 make_examples_core.py:298] No non-empty sample name found in the input reads. DeepVariant will use default as the sample name. You can also provide a sample name with the --sample_name argument.
I0109 16:15:17.966779 140425084057408 make_examples_core.py:257] Task 28/30: Preparing inputs
I0109 16:15:17.996237 140425084057408 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.074557 140425084057408 make_examples_core.py:257] Task 28/30: Common contigs are ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY', 'chrM', 'GL000008.2', 'GL000009.2', 'GL000205.2', 'GL000216.2', 'KI270302.1', 'KI270303.1', 'KI270304.1', 'KI270305.1', 'KI270310.1', 'KI270311.1', 'KI270312.1', 'KI270315.1', 'KI270316.1', 'KI270317.1', 'KI270320.1', 'KI270322.1', 'KI270329.1', 'KI270330.1', 'KI270333.1', 'KI270334.1', 'KI270335.1', 'KI270336.1', 'KI270337.1', 'KI270338.1', 'KI270340.1', 'KI270362.1', 'KI270363.1', 'KI270364.1', 'KI270366.1', 'KI270371.1', 'KI270372.1', 'KI270373.1', 'KI270374.1', 'KI270375.1', 'KI270376.1', 'KI270378.1', 'KI270379.1', 'KI270381.1', 'KI270382.1', 'KI270383.1', 'KI270384.1', 'KI270385.1', 'KI270386.1', 'KI270387.1', 'KI270388.1', 'KI270389.1', 'KI270390.1', 'KI270391.1', 'KI270392.1', 'KI270393.1', 'KI270394.1', 'KI270395.1', 'KI270396.1', 'KI270411.1', 'KI270412.1', 'KI270414.1', 'KI270417.1', 'KI270418.1', 'KI270419.1', 'KI270420.1', 'KI270422.1', 'KI270423.1', 'KI270424.1', 'KI270425.1', 'KI270429.1', 'KI270435.1', 'KI270438.1', 'KI270442.1', 'KI270448.1', 'KI270465.1', 'KI270466.1', 'KI270467.1', 'KI270468.1', 'KI270507.1', 'KI270508.1', 'KI270509.1', 'KI270510.1', 'KI270511.1', 'KI270512.1', 'KI270515.1', 'KI270516.1', 'KI270517.1', 'KI270518.1', 'KI270519.1', 'KI270521.1', 'KI270522.1', 'KI270528.1', 'KI270529.1', 'KI270530.1', 'KI270538.1', 'KI270539.1', 'KI270544.1', 'KI270548.1', 'KI270579.1', 'KI270580.1', 'KI270581.1', 'KI270582.1', 'KI270583.1', 'KI270584.1', 'KI270587.1', 'KI270588.1', 'KI270589.1', 'KI270590.1', 'KI270591.1', 'KI270593.1', 'KI270706.1', 'KI270707.1', 'KI270708.1', 'KI270709.1', 'KI270710.1', 'KI270711.1', 'KI270712.1', 'KI270713.1', 'KI270714.1', 'KI270715.1', 'KI270716.1', 'KI270717.1', 'KI270718.1', 'KI270719.1', 'KI270720.1', 'KI270721.1', 'KI270722.1', 'KI270723.1', 'KI270724.1', 'KI270725.1', 'KI270726.1', 'KI270727.1', 'KI270728.1', 'KI270729.1', 'KI270730.1', 'KI270731.1', 'KI270732.1', 'KI270733.1', 'KI270734.1', 'KI270735.1', 'KI270736.1', 'KI270737.1', 'KI270738.1', 'KI270739.1', 'KI270740.1', 'KI270741.1', 'KI270742.1', 'KI270743.1', 'KI270744.1', 'KI270745.1', 'KI270746.1', 'KI270747.1', 'KI270748.1', 'KI270749.1', 'KI270750.1', 'KI270751.1', 'KI270752.1', 'KI270753.1', 'KI270754.1', 'KI270755.1', 'KI270756.1', 'KI270757.1']
I0109 16:15:18.099504 140425084057408 make_examples_core.py:257] Task 28/30: Starting from v0.9.0, --use_ref_for_cram is default to true. If you are using CRAM input, note that we will decode CRAM using the reference you passed in with --ref
2025-01-09 16:15:18.099871: I third_party/nucleus/io/sam_reader.cc:736] Setting HTS_OPT_BLOCK_SIZE to 134217728
I0109 16:15:17.912572 140424271456064 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
W0109 16:15:17.912915 140424271456064 make_examples_core.py:298] No non-empty sample name found in the input reads. DeepVariant will use default as the sample name. You can also provide a sample name with the --sample_name argument.
I0109 16:15:17.966827 140424271456064 make_examples_core.py:257] Task 27/30: Preparing inputs
I0109 16:15:17.996521 140424271456064 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.070834 140424271456064 make_examples_core.py:257] Task 27/30: Common contigs are ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY', 'chrM', 'GL000008.2', 'GL000009.2', 'GL000205.2', 'GL000216.2', 'KI270302.1', 'KI270303.1', 'KI270304.1', 'KI270305.1', 'KI270310.1', 'KI270311.1', 'KI270312.1', 'KI270315.1', 'KI270316.1', 'KI270317.1', 'KI270320.1', 'KI270322.1', 'KI270329.1', 'KI270330.1', 'KI270333.1', 'KI270334.1', 'KI270335.1', 'KI270336.1', 'KI270337.1', 'KI270338.1', 'KI270340.1', 'KI270362.1', 'KI270363.1', 'KI270364.1', 'KI270366.1', 'KI270371.1', 'KI270372.1', 'KI270373.1', 'KI270374.1', 'KI270375.1', 'KI270376.1', 'KI270378.1', 'KI270379.1', 'KI270381.1', 'KI270382.1', 'KI270383.1', 'KI270384.1', 'KI270385.1', 'KI270386.1', 'KI270387.1', 'KI270388.1', 'KI270389.1', 'KI270390.1', 'KI270391.1', 'KI270392.1', 'KI270393.1', 'KI270394.1', 'KI270395.1', 'KI270396.1', 'KI270411.1', 'KI270412.1', 'KI270414.1', 'KI270417.1', 'KI270418.1', 'KI270419.1', 'KI270420.1', 'KI270422.1', 'KI270423.1', 'KI270424.1', 'KI270425.1', 'KI270429.1', 'KI270435.1', 'KI270438.1', 'KI270442.1', 'KI270448.1', 'KI270465.1', 'KI270466.1', 'KI270467.1', 'KI270468.1', 'KI270507.1', 'KI270508.1', 'KI270509.1', 'KI270510.1', 'KI270511.1', 'KI270512.1', 'KI270515.1', 'KI270516.1', 'KI270517.1', 'KI270518.1', 'KI270519.1', 'KI270521.1', 'KI270522.1', 'KI270528.1', 'KI270529.1', 'KI270530.1', 'KI270538.1', 'KI270539.1', 'KI270544.1', 'KI270548.1', 'KI270579.1', 'KI270580.1', 'KI270581.1', 'KI270582.1', 'KI270583.1', 'KI270584.1', 'KI270587.1', 'KI270588.1', 'KI270589.1', 'KI270590.1', 'KI270591.1', 'KI270593.1', 'KI270706.1', 'KI270707.1', 'KI270708.1', 'KI270709.1', 'KI270710.1', 'KI270711.1', 'KI270712.1', 'KI270713.1', 'KI270714.1', 'KI270715.1', 'KI270716.1', 'KI270717.1', 'KI270718.1', 'KI270719.1', 'KI270720.1', 'KI270721.1', 'KI270722.1', 'KI270723.1', 'KI270724.1', 'KI270725.1', 'KI270726.1', 'KI270727.1', 'KI270728.1', 'KI270729.1', 'KI270730.1', 'KI270731.1', 'KI270732.1', 'KI270733.1', 'KI270734.1', 'KI270735.1', 'KI270736.1', 'KI270737.1', 'KI270738.1', 'KI270739.1', 'KI270740.1', 'KI270741.1', 'KI270742.1', 'KI270743.1', 'KI270744.1', 'KI270745.1', 'KI270746.1', 'KI270747.1', 'KI270748.1', 'KI270749.1', 'KI270750.1', 'KI270751.1', 'KI270752.1', 'KI270753.1', 'KI270754.1', 'KI270755.1', 'KI270756.1', 'KI270757.1']
I0109 16:15:18.096324 140424271456064 make_examples_core.py:257] Task 27/30: Starting from v0.9.0, --use_ref_for_cram is default to true. If you are using CRAM input, note that we will decode CRAM using the reference you passed in with --ref
2025-01-09 16:15:18.096770: I third_party/nucleus/io/sam_reader.cc:736] Setting HTS_OPT_BLOCK_SIZE to 134217728
I0109 16:15:17.662099 140367169652544 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:17.790127 140367169652544 make_examples_core.py:257] Task 13/30: Common contigs are ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY', 'chrM', 'GL000008.2', 'GL000009.2', 'GL000205.2', 'GL000216.2', 'KI270302.1', 'KI270303.1', 'KI270304.1', 'KI270305.1', 'KI270310.1', 'KI270311.1', 'KI270312.1', 'KI270315.1', 'KI270316.1', 'KI270317.1', 'KI270320.1', 'KI270322.1', 'KI270329.1', 'KI270330.1', 'KI270333.1', 'KI270334.1', 'KI270335.1', 'KI270336.1', 'KI270337.1', 'KI270338.1', 'KI270340.1', 'KI270362.1', 'KI270363.1', 'KI270364.1', 'KI270366.1', 'KI270371.1', 'KI270372.1', 'KI270373.1', 'KI270374.1', 'KI270375.1', 'KI270376.1', 'KI270378.1', 'KI270379.1', 'KI270381.1', 'KI270382.1', 'KI270383.1', 'KI270384.1', 'KI270385.1', 'KI270386.1', 'KI270387.1', 'KI270388.1', 'KI270389.1', 'KI270390.1', 'KI270391.1', 'KI270392.1', 'KI270393.1', 'KI270394.1', 'KI270395.1', 'KI270396.1', 'KI270411.1', 'KI270412.1', 'KI270414.1', 'KI270417.1', 'KI270418.1', 'KI270419.1', 'KI270420.1', 'KI270422.1', 'KI270423.1', 'KI270424.1', 'KI270425.1', 'KI270429.1', 'KI270435.1', 'KI270438.1', 'KI270442.1', 'KI270448.1', 'KI270465.1', 'KI270466.1', 'KI270467.1', 'KI270468.1', 'KI270507.1', 'KI270508.1', 'KI270509.1', 'KI270510.1', 'KI270511.1', 'KI270512.1', 'KI270515.1', 'KI270516.1', 'KI270517.1', 'KI270518.1', 'KI270519.1', 'KI270521.1', 'KI270522.1', 'KI270528.1', 'KI270529.1', 'KI270530.1', 'KI270538.1', 'KI270539.1', 'KI270544.1', 'KI270548.1', 'KI270579.1', 'KI270580.1', 'KI270581.1', 'KI270582.1', 'KI270583.1', 'KI270584.1', 'KI270587.1', 'KI270588.1', 'KI270589.1', 'KI270590.1', 'KI270591.1', 'KI270593.1', 'KI270706.1', 'KI270707.1', 'KI270708.1', 'KI270709.1', 'KI270710.1', 'KI270711.1', 'KI270712.1', 'KI270713.1', 'KI270714.1', 'KI270715.1', 'KI270716.1', 'KI270717.1', 'KI270718.1', 'KI270719.1', 'KI270720.1', 'KI270721.1', 'KI270722.1', 'KI270723.1', 'KI270724.1', 'KI270725.1', 'KI270726.1', 'KI270727.1', 'KI270728.1', 'KI270729.1', 'KI270730.1', 'KI270731.1', 'KI270732.1', 'KI270733.1', 'KI270734.1', 'KI270735.1', 'KI270736.1', 'KI270737.1', 'KI270738.1', 'KI270739.1', 'KI270740.1', 'KI270741.1', 'KI270742.1', 'KI270743.1', 'KI270744.1', 'KI270745.1', 'KI270746.1', 'KI270747.1', 'KI270748.1', 'KI270749.1', 'KI270750.1', 'KI270751.1', 'KI270752.1', 'KI270753.1', 'KI270754.1', 'KI270755.1', 'KI270756.1', 'KI270757.1']
I0109 16:15:17.830763 140367169652544 make_examples_core.py:257] Task 13/30: Starting from v0.9.0, --use_ref_for_cram is default to true. If you are using CRAM input, note that we will decode CRAM using the reference you passed in with --ref
2025-01-09 16:15:17.831282: I third_party/nucleus/io/sam_reader.cc:736] Setting HTS_OPT_BLOCK_SIZE to 134217728
I0109 16:15:18.005048 140367169652544 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:17.738803 139961776187200 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
W0109 16:15:17.739084 139961776187200 make_examples_core.py:298] No non-empty sample name found in the input reads. DeepVariant will use default as the sample name. You can also provide a sample name with the --sample_name argument.
I0109 16:15:17.790657 139961776187200 make_examples_core.py:257] Task 12/30: Preparing inputs
I0109 16:15:17.820936 139961776187200 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:17.939135 139961776187200 make_examples_core.py:257] Task 12/30: Common contigs are ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY', 'chrM', 'GL000008.2', 'GL000009.2', 'GL000205.2', 'GL000216.2', 'KI270302.1', 'KI270303.1', 'KI270304.1', 'KI270305.1', 'KI270310.1', 'KI270311.1', 'KI270312.1', 'KI270315.1', 'KI270316.1', 'KI270317.1', 'KI270320.1', 'KI270322.1', 'KI270329.1', 'KI270330.1', 'KI270333.1', 'KI270334.1', 'KI270335.1', 'KI270336.1', 'KI270337.1', 'KI270338.1', 'KI270340.1', 'KI270362.1', 'KI270363.1', 'KI270364.1', 'KI270366.1', 'KI270371.1', 'KI270372.1', 'KI270373.1', 'KI270374.1', 'KI270375.1', 'KI270376.1', 'KI270378.1', 'KI270379.1', 'KI270381.1', 'KI270382.1', 'KI270383.1', 'KI270384.1', 'KI270385.1', 'KI270386.1', 'KI270387.1', 'KI270388.1', 'KI270389.1', 'KI270390.1', 'KI270391.1', 'KI270392.1', 'KI270393.1', 'KI270394.1', 'KI270395.1', 'KI270396.1', 'KI270411.1', 'KI270412.1', 'KI270414.1', 'KI270417.1', 'KI270418.1', 'KI270419.1', 'KI270420.1', 'KI270422.1', 'KI270423.1', 'KI270424.1', 'KI270425.1', 'KI270429.1', 'KI270435.1', 'KI270438.1', 'KI270442.1', 'KI270448.1', 'KI270465.1', 'KI270466.1', 'KI270467.1', 'KI270468.1', 'KI270507.1', 'KI270508.1', 'KI270509.1', 'KI270510.1', 'KI270511.1', 'KI270512.1', 'KI270515.1', 'KI270516.1', 'KI270517.1', 'KI270518.1', 'KI270519.1', 'KI270521.1', 'KI270522.1', 'KI270528.1', 'KI270529.1', 'KI270530.1', 'KI270538.1', 'KI270539.1', 'KI270544.1', 'KI270548.1', 'KI270579.1', 'KI270580.1', 'KI270581.1', 'KI270582.1', 'KI270583.1', 'KI270584.1', 'KI270587.1', 'KI270588.1', 'KI270589.1', 'KI270590.1', 'KI270591.1', 'KI270593.1', 'KI270706.1', 'KI270707.1', 'KI270708.1', 'KI270709.1', 'KI270710.1', 'KI270711.1', 'KI270712.1', 'KI270713.1', 'KI270714.1', 'KI270715.1', 'KI270716.1', 'KI270717.1', 'KI270718.1', 'KI270719.1', 'KI270720.1', 'KI270721.1', 'KI270722.1', 'KI270723.1', 'KI270724.1', 'KI270725.1', 'KI270726.1', 'KI270727.1', 'KI270728.1', 'KI270729.1', 'KI270730.1', 'KI270731.1', 'KI270732.1', 'KI270733.1', 'KI270734.1', 'KI270735.1', 'KI270736.1', 'KI270737.1', 'KI270738.1', 'KI270739.1', 'KI270740.1', 'KI270741.1', 'KI270742.1', 'KI270743.1', 'KI270744.1', 'KI270745.1', 'KI270746.1', 'KI270747.1', 'KI270748.1', 'KI270749.1', 'KI270750.1', 'KI270751.1', 'KI270752.1', 'KI270753.1', 'KI270754.1', 'KI270755.1', 'KI270756.1', 'KI270757.1']
I0109 16:15:17.976559 139961776187200 make_examples_core.py:257] Task 12/30: Starting from v0.9.0, --use_ref_for_cram is default to true. If you are using CRAM input, note that we will decode CRAM using the reference you passed in with --ref
2025-01-09 16:15:17.977092: I third_party/nucleus/io/sam_reader.cc:736] Setting HTS_OPT_BLOCK_SIZE to 134217728
I0109 16:15:18.119501 139961776187200 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:17.681051 140186593212224 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
W0109 16:15:17.681555 140186593212224 make_examples_core.py:298] No non-empty sample name found in the input reads. DeepVariant will use default as the sample name. You can also provide a sample name with the --sample_name argument.
I0109 16:15:17.722440 140186593212224 make_examples_core.py:257] Task 29/30: Preparing inputs
I0109 16:15:17.752249 140186593212224 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:17.835203 140186593212224 make_examples_core.py:257] Task 29/30: Common contigs are ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY', 'chrM', 'GL000008.2', 'GL000009.2', 'GL000205.2', 'GL000216.2', 'KI270302.1', 'KI270303.1', 'KI270304.1', 'KI270305.1', 'KI270310.1', 'KI270311.1', 'KI270312.1', 'KI270315.1', 'KI270316.1', 'KI270317.1', 'KI270320.1', 'KI270322.1', 'KI270329.1', 'KI270330.1', 'KI270333.1', 'KI270334.1', 'KI270335.1', 'KI270336.1', 'KI270337.1', 'KI270338.1', 'KI270340.1', 'KI270362.1', 'KI270363.1', 'KI270364.1', 'KI270366.1', 'KI270371.1', 'KI270372.1', 'KI270373.1', 'KI270374.1', 'KI270375.1', 'KI270376.1', 'KI270378.1', 'KI270379.1', 'KI270381.1', 'KI270382.1', 'KI270383.1', 'KI270384.1', 'KI270385.1', 'KI270386.1', 'KI270387.1', 'KI270388.1', 'KI270389.1', 'KI270390.1', 'KI270391.1', 'KI270392.1', 'KI270393.1', 'KI270394.1', 'KI270395.1', 'KI270396.1', 'KI270411.1', 'KI270412.1', 'KI270414.1', 'KI270417.1', 'KI270418.1', 'KI270419.1', 'KI270420.1', 'KI270422.1', 'KI270423.1', 'KI270424.1', 'KI270425.1', 'KI270429.1', 'KI270435.1', 'KI270438.1', 'KI270442.1', 'KI270448.1', 'KI270465.1', 'KI270466.1', 'KI270467.1', 'KI270468.1', 'KI270507.1', 'KI270508.1', 'KI270509.1', 'KI270510.1', 'KI270511.1', 'KI270512.1', 'KI270515.1', 'KI270516.1', 'KI270517.1', 'KI270518.1', 'KI270519.1', 'KI270521.1', 'KI270522.1', 'KI270528.1', 'KI270529.1', 'KI270530.1', 'KI270538.1', 'KI270539.1', 'KI270544.1', 'KI270548.1', 'KI270579.1', 'KI270580.1', 'KI270581.1', 'KI270582.1', 'KI270583.1', 'KI270584.1', 'KI270587.1', 'KI270588.1', 'KI270589.1', 'KI270590.1', 'KI270591.1', 'KI270593.1', 'KI270706.1', 'KI270707.1', 'KI270708.1', 'KI270709.1', 'KI270710.1', 'KI270711.1', 'KI270712.1', 'KI270713.1', 'KI270714.1', 'KI270715.1', 'KI270716.1', 'KI270717.1', 'KI270718.1', 'KI270719.1', 'KI270720.1', 'KI270721.1', 'KI270722.1', 'KI270723.1', 'KI270724.1', 'KI270725.1', 'KI270726.1', 'KI270727.1', 'KI270728.1', 'KI270729.1', 'KI270730.1', 'KI270731.1', 'KI270732.1', 'KI270733.1', 'KI270734.1', 'KI270735.1', 'KI270736.1', 'KI270737.1', 'KI270738.1', 'KI270739.1', 'KI270740.1', 'KI270741.1', 'KI270742.1', 'KI270743.1', 'KI270744.1', 'KI270745.1', 'KI270746.1', 'KI270747.1', 'KI270748.1', 'KI270749.1', 'KI270750.1', 'KI270751.1', 'KI270752.1', 'KI270753.1', 'KI270754.1', 'KI270755.1', 'KI270756.1', 'KI270757.1']
I0109 16:15:17.863090 140186593212224 make_examples_core.py:257] Task 29/30: Starting from v0.9.0, --use_ref_for_cram is default to true. If you are using CRAM input, note that we will decode CRAM using the reference you passed in with --ref
2025-01-09 16:15:17.863497: I third_party/nucleus/io/sam_reader.cc:736] Setting HTS_OPT_BLOCK_SIZE to 134217728
I0109 16:15:17.994826 140186593212224 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:17.706881 140204668430144 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
W0109 16:15:17.707220 140204668430144 make_examples_core.py:298] No non-empty sample name found in the input reads. DeepVariant will use default as the sample name. You can also provide a sample name with the --sample_name argument.
I0109 16:15:17.789830 140204668430144 make_examples_core.py:257] Task 1/30: Preparing inputs
I0109 16:15:17.821268 140204668430144 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:17.906062 140204668430144 make_examples_core.py:257] Task 1/30: Common contigs are ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY', 'chrM', 'GL000008.2', 'GL000009.2', 'GL000205.2', 'GL000216.2', 'KI270302.1', 'KI270303.1', 'KI270304.1', 'KI270305.1', 'KI270310.1', 'KI270311.1', 'KI270312.1', 'KI270315.1', 'KI270316.1', 'KI270317.1', 'KI270320.1', 'KI270322.1', 'KI270329.1', 'KI270330.1', 'KI270333.1', 'KI270334.1', 'KI270335.1', 'KI270336.1', 'KI270337.1', 'KI270338.1', 'KI270340.1', 'KI270362.1', 'KI270363.1', 'KI270364.1', 'KI270366.1', 'KI270371.1', 'KI270372.1', 'KI270373.1', 'KI270374.1', 'KI270375.1', 'KI270376.1', 'KI270378.1', 'KI270379.1', 'KI270381.1', 'KI270382.1', 'KI270383.1', 'KI270384.1', 'KI270385.1', 'KI270386.1', 'KI270387.1', 'KI270388.1', 'KI270389.1', 'KI270390.1', 'KI270391.1', 'KI270392.1', 'KI270393.1', 'KI270394.1', 'KI270395.1', 'KI270396.1', 'KI270411.1', 'KI270412.1', 'KI270414.1', 'KI270417.1', 'KI270418.1', 'KI270419.1', 'KI270420.1', 'KI270422.1', 'KI270423.1', 'KI270424.1', 'KI270425.1', 'KI270429.1', 'KI270435.1', 'KI270438.1', 'KI270442.1', 'KI270448.1', 'KI270465.1', 'KI270466.1', 'KI270467.1', 'KI270468.1', 'KI270507.1', 'KI270508.1', 'KI270509.1', 'KI270510.1', 'KI270511.1', 'KI270512.1', 'KI270515.1', 'KI270516.1', 'KI270517.1', 'KI270518.1', 'KI270519.1', 'KI270521.1', 'KI270522.1', 'KI270528.1', 'KI270529.1', 'KI270530.1', 'KI270538.1', 'KI270539.1', 'KI270544.1', 'KI270548.1', 'KI270579.1', 'KI270580.1', 'KI270581.1', 'KI270582.1', 'KI270583.1', 'KI270584.1', 'KI270587.1', 'KI270588.1', 'KI270589.1', 'KI270590.1', 'KI270591.1', 'KI270593.1', 'KI270706.1', 'KI270707.1', 'KI270708.1', 'KI270709.1', 'KI270710.1', 'KI270711.1', 'KI270712.1', 'KI270713.1', 'KI270714.1', 'KI270715.1', 'KI270716.1', 'KI270717.1', 'KI270718.1', 'KI270719.1', 'KI270720.1', 'KI270721.1', 'KI270722.1', 'KI270723.1', 'KI270724.1', 'KI270725.1', 'KI270726.1', 'KI270727.1', 'KI270728.1', 'KI270729.1', 'KI270730.1', 'KI270731.1', 'KI270732.1', 'KI270733.1', 'KI270734.1', 'KI270735.1', 'KI270736.1', 'KI270737.1', 'KI270738.1', 'KI270739.1', 'KI270740.1', 'KI270741.1', 'KI270742.1', 'KI270743.1', 'KI270744.1', 'KI270745.1', 'KI270746.1', 'KI270747.1', 'KI270748.1', 'KI270749.1', 'KI270750.1', 'KI270751.1', 'KI270752.1', 'KI270753.1', 'KI270754.1', 'KI270755.1', 'KI270756.1', 'KI270757.1']
I0109 16:15:17.935392 140204668430144 make_examples_core.py:257] Task 1/30: Starting from v0.9.0, --use_ref_for_cram is default to true. If you are using CRAM input, note that we will decode CRAM using the reference you passed in with --ref
2025-01-09 16:15:17.935862: I third_party/nucleus/io/sam_reader.cc:736] Setting HTS_OPT_BLOCK_SIZE to 134217728
I0109 16:15:18.056314 140204668430144 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:17.661921 139806051260224 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
W0109 16:15:17.662253 139806051260224 make_examples_core.py:298] No non-empty sample name found in the input reads. DeepVariant will use default as the sample name. You can also provide a sample name with the --sample_name argument.
I0109 16:15:17.702639 139806051260224 make_examples_core.py:257] Task 3/30: Preparing inputs
I0109 16:15:17.733995 139806051260224 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:17.819788 139806051260224 make_examples_core.py:257] Task 3/30: Common contigs are ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY', 'chrM', 'GL000008.2', 'GL000009.2', 'GL000205.2', 'GL000216.2', 'KI270302.1', 'KI270303.1', 'KI270304.1', 'KI270305.1', 'KI270310.1', 'KI270311.1', 'KI270312.1', 'KI270315.1', 'KI270316.1', 'KI270317.1', 'KI270320.1', 'KI270322.1', 'KI270329.1', 'KI270330.1', 'KI270333.1', 'KI270334.1', 'KI270335.1', 'KI270336.1', 'KI270337.1', 'KI270338.1', 'KI270340.1', 'KI270362.1', 'KI270363.1', 'KI270364.1', 'KI270366.1', 'KI270371.1', 'KI270372.1', 'KI270373.1', 'KI270374.1', 'KI270375.1', 'KI270376.1', 'KI270378.1', 'KI270379.1', 'KI270381.1', 'KI270382.1', 'KI270383.1', 'KI270384.1', 'KI270385.1', 'KI270386.1', 'KI270387.1', 'KI270388.1', 'KI270389.1', 'KI270390.1', 'KI270391.1', 'KI270392.1', 'KI270393.1', 'KI270394.1', 'KI270395.1', 'KI270396.1', 'KI270411.1', 'KI270412.1', 'KI270414.1', 'KI270417.1', 'KI270418.1', 'KI270419.1', 'KI270420.1', 'KI270422.1', 'KI270423.1', 'KI270424.1', 'KI270425.1', 'KI270429.1', 'KI270435.1', 'KI270438.1', 'KI270442.1', 'KI270448.1', 'KI270465.1', 'KI270466.1', 'KI270467.1', 'KI270468.1', 'KI270507.1', 'KI270508.1', 'KI270509.1', 'KI270510.1', 'KI270511.1', 'KI270512.1', 'KI270515.1', 'KI270516.1', 'KI270517.1', 'KI270518.1', 'KI270519.1', 'KI270521.1', 'KI270522.1', 'KI270528.1', 'KI270529.1', 'KI270530.1', 'KI270538.1', 'KI270539.1', 'KI270544.1', 'KI270548.1', 'KI270579.1', 'KI270580.1', 'KI270581.1', 'KI270582.1', 'KI270583.1', 'KI270584.1', 'KI270587.1', 'KI270588.1', 'KI270589.1', 'KI270590.1', 'KI270591.1', 'KI270593.1', 'KI270706.1', 'KI270707.1', 'KI270708.1', 'KI270709.1', 'KI270710.1', 'KI270711.1', 'KI270712.1', 'KI270713.1', 'KI270714.1', 'KI270715.1', 'KI270716.1', 'KI270717.1', 'KI270718.1', 'KI270719.1', 'KI270720.1', 'KI270721.1', 'KI270722.1', 'KI270723.1', 'KI270724.1', 'KI270725.1', 'KI270726.1', 'KI270727.1', 'KI270728.1', 'KI270729.1', 'KI270730.1', 'KI270731.1', 'KI270732.1', 'KI270733.1', 'KI270734.1', 'KI270735.1', 'KI270736.1', 'KI270737.1', 'KI270738.1', 'KI270739.1', 'KI270740.1', 'KI270741.1', 'KI270742.1', 'KI270743.1', 'KI270744.1', 'KI270745.1', 'KI270746.1', 'KI270747.1', 'KI270748.1', 'KI270749.1', 'KI270750.1', 'KI270751.1', 'KI270752.1', 'KI270753.1', 'KI270754.1', 'KI270755.1', 'KI270756.1', 'KI270757.1']
I0109 16:15:17.848762 139806051260224 make_examples_core.py:257] Task 3/30: Starting from v0.9.0, --use_ref_for_cram is default to true. If you are using CRAM input, note that we will decode CRAM using the reference you passed in with --ref
2025-01-09 16:15:17.849236: I third_party/nucleus/io/sam_reader.cc:736] Setting HTS_OPT_BLOCK_SIZE to 134217728
I0109 16:15:17.996708 139806051260224 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:17.662185 140187777787712 make_examples_core.py:257] Task 10/30: Preparing inputs
I0109 16:15:17.692317 140187777787712 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:17.774950 140187777787712 make_examples_core.py:257] Task 10/30: Common contigs are ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY', 'chrM', 'GL000008.2', 'GL000009.2', 'GL000205.2', 'GL000216.2', 'KI270302.1', 'KI270303.1', 'KI270304.1', 'KI270305.1', 'KI270310.1', 'KI270311.1', 'KI270312.1', 'KI270315.1', 'KI270316.1', 'KI270317.1', 'KI270320.1', 'KI270322.1', 'KI270329.1', 'KI270330.1', 'KI270333.1', 'KI270334.1', 'KI270335.1', 'KI270336.1', 'KI270337.1', 'KI270338.1', 'KI270340.1', 'KI270362.1', 'KI270363.1', 'KI270364.1', 'KI270366.1', 'KI270371.1', 'KI270372.1', 'KI270373.1', 'KI270374.1', 'KI270375.1', 'KI270376.1', 'KI270378.1', 'KI270379.1', 'KI270381.1', 'KI270382.1', 'KI270383.1', 'KI270384.1', 'KI270385.1', 'KI270386.1', 'KI270387.1', 'KI270388.1', 'KI270389.1', 'KI270390.1', 'KI270391.1', 'KI270392.1', 'KI270393.1', 'KI270394.1', 'KI270395.1', 'KI270396.1', 'KI270411.1', 'KI270412.1', 'KI270414.1', 'KI270417.1', 'KI270418.1', 'KI270419.1', 'KI270420.1', 'KI270422.1', 'KI270423.1', 'KI270424.1', 'KI270425.1', 'KI270429.1', 'KI270435.1', 'KI270438.1', 'KI270442.1', 'KI270448.1', 'KI270465.1', 'KI270466.1', 'KI270467.1', 'KI270468.1', 'KI270507.1', 'KI270508.1', 'KI270509.1', 'KI270510.1', 'KI270511.1', 'KI270512.1', 'KI270515.1', 'KI270516.1', 'KI270517.1', 'KI270518.1', 'KI270519.1', 'KI270521.1', 'KI270522.1', 'KI270528.1', 'KI270529.1', 'KI270530.1', 'KI270538.1', 'KI270539.1', 'KI270544.1', 'KI270548.1', 'KI270579.1', 'KI270580.1', 'KI270581.1', 'KI270582.1', 'KI270583.1', 'KI270584.1', 'KI270587.1', 'KI270588.1', 'KI270589.1', 'KI270590.1', 'KI270591.1', 'KI270593.1', 'KI270706.1', 'KI270707.1', 'KI270708.1', 'KI270709.1', 'KI270710.1', 'KI270711.1', 'KI270712.1', 'KI270713.1', 'KI270714.1', 'KI270715.1', 'KI270716.1', 'KI270717.1', 'KI270718.1', 'KI270719.1', 'KI270720.1', 'KI270721.1', 'KI270722.1', 'KI270723.1', 'KI270724.1', 'KI270725.1', 'KI270726.1', 'KI270727.1', 'KI270728.1', 'KI270729.1', 'KI270730.1', 'KI270731.1', 'KI270732.1', 'KI270733.1', 'KI270734.1', 'KI270735.1', 'KI270736.1', 'KI270737.1', 'KI270738.1', 'KI270739.1', 'KI270740.1', 'KI270741.1', 'KI270742.1', 'KI270743.1', 'KI270744.1', 'KI270745.1', 'KI270746.1', 'KI270747.1', 'KI270748.1', 'KI270749.1', 'KI270750.1', 'KI270751.1', 'KI270752.1', 'KI270753.1', 'KI270754.1', 'KI270755.1', 'KI270756.1', 'KI270757.1']
I0109 16:15:17.803131 140187777787712 make_examples_core.py:257] Task 10/30: Starting from v0.9.0, --use_ref_for_cram is default to true. If you are using CRAM input, note that we will decode CRAM using the reference you passed in with --ref
2025-01-09 16:15:17.803516: I third_party/nucleus/io/sam_reader.cc:736] Setting HTS_OPT_BLOCK_SIZE to 134217728
I0109 16:15:17.993962 140187777787712 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.015919 139984866625344 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
W0109 16:15:18.016232 139984866625344 make_examples_core.py:298] No non-empty sample name found in the input reads. DeepVariant will use default as the sample name. You can also provide a sample name with the --sample_name argument.
I0109 16:15:18.061315 139984866625344 make_examples_core.py:257] Task 21/30: Preparing inputs
I0109 16:15:18.099543 139984866625344 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:17.653880 139834169136960 make_examples_core.py:257] Task 18/30: Starting from v0.9.0, --use_ref_for_cram is default to true. If you are using CRAM input, note that we will decode CRAM using the reference you passed in with --ref
2025-01-09 16:15:17.654297: I third_party/nucleus/io/sam_reader.cc:736] Setting HTS_OPT_BLOCK_SIZE to 134217728
I0109 16:15:18.010132 139834169136960 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.003815 140227032713024 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
W0109 16:15:18.004175 140227032713024 make_examples_core.py:298] No non-empty sample name found in the input reads. DeepVariant will use default as the sample name. You can also provide a sample name with the --sample_name argument.
I0109 16:15:18.049707 140227032713024 make_examples_core.py:257] Task 7/30: Preparing inputs
I0109 16:15:18.077852 140227032713024 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:17.979753 140123150317376 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
W0109 16:15:17.980098 140123150317376 make_examples_core.py:298] No non-empty sample name found in the input reads. DeepVariant will use default as the sample name. You can also provide a sample name with the --sample_name argument.
I0109 16:15:18.032227 140123150317376 make_examples_core.py:257] Task 25/30: Preparing inputs
I0109 16:15:18.071497 140123150317376 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.285278 140666116208448 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.293170 140666116208448 make_examples_core.py:257] Task 26/30: Writing gvcf records to /tmp/tmp797co85g/gvcf.tfrecord-00026-of-00030.gz
I0109 16:15:18.293639 140666116208448 make_examples_core.py:257] Task 26/30: Writing examples to /tmp/tmp797co85g/make_examples.tfrecord-00026-of-00030.gz
I0109 16:15:18.293690 140666116208448 make_examples_core.py:257] Task 26/30: Overhead for preparing inputs: 0 seconds
I0109 16:15:18.396916 140484979402560 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.405811 140484979402560 make_examples_core.py:257] Task 17/30: Writing gvcf records to /tmp/tmp797co85g/gvcf.tfrecord-00017-of-00030.gz
I0109 16:15:18.406357 140484979402560 make_examples_core.py:257] Task 17/30: Writing examples to /tmp/tmp797co85g/make_examples.tfrecord-00017-of-00030.gz
I0109 16:15:18.406410 140484979402560 make_examples_core.py:257] Task 17/30: Overhead for preparing inputs: 0 seconds
I0109 16:15:18.298674 139770797205312 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.307687 139770797205312 make_examples_core.py:257] Task 23/30: Writing gvcf records to /tmp/tmp797co85g/gvcf.tfrecord-00023-of-00030.gz
I0109 16:15:18.308262 139770797205312 make_examples_core.py:257] Task 23/30: Writing examples to /tmp/tmp797co85g/make_examples.tfrecord-00023-of-00030.gz
I0109 16:15:18.308315 139770797205312 make_examples_core.py:257] Task 23/30: Overhead for preparing inputs: 0 seconds
I0109 16:15:18.250224 140267877631808 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.338340 140075713414976 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.346924 140075713414976 make_examples_core.py:257] Task 0/30: Writing gvcf records to /tmp/tmp797co85g/gvcf.tfrecord-00000-of-00030.gz
I0109 16:15:18.347507 140075713414976 make_examples_core.py:257] Task 0/30: Writing examples to /tmp/tmp797co85g/make_examples.tfrecord-00000-of-00030.gz
I0109 16:15:18.347560 140075713414976 make_examples_core.py:257] Task 0/30: Overhead for preparing inputs: 0 seconds
I0109 16:15:18.341131 139711390340928 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.351233 139711390340928 make_examples_core.py:257] Task 15/30: Writing gvcf records to /tmp/tmp797co85g/gvcf.tfrecord-00015-of-00030.gz
I0109 16:15:18.351874 139711390340928 make_examples_core.py:257] Task 15/30: Writing examples to /tmp/tmp797co85g/make_examples.tfrecord-00015-of-00030.gz
I0109 16:15:18.351934 139711390340928 make_examples_core.py:257] Task 15/30: Overhead for preparing inputs: 0 seconds
I0109 16:15:18.508365 140144794814272 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.521682 140144794814272 make_examples_core.py:257] Task 5/30: Writing gvcf records to /tmp/tmp797co85g/gvcf.tfrecord-00005-of-00030.gz
I0109 16:15:18.522407 140144794814272 make_examples_core.py:257] Task 5/30: Writing examples to /tmp/tmp797co85g/make_examples.tfrecord-00005-of-00030.gz
I0109 16:15:18.522480 140144794814272 make_examples_core.py:257] Task 5/30: Overhead for preparing inputs: 0 seconds
I0109 16:15:18.301784 140669765121856 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.310045 140669765121856 make_examples_core.py:257] Task 6/30: Writing gvcf records to /tmp/tmp797co85g/gvcf.tfrecord-00006-of-00030.gz
I0109 16:15:18.310569 140669765121856 make_examples_core.py:257] Task 6/30: Writing examples to /tmp/tmp797co85g/make_examples.tfrecord-00006-of-00030.gz
I0109 16:15:18.310620 140669765121856 make_examples_core.py:257] Task 6/30: Overhead for preparing inputs: 0 seconds
I0109 16:15:18.220910 140188848478016 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.616603 140188848478016 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.627739 140188848478016 make_examples_core.py:257] Task 8/30: Writing gvcf records to /tmp/tmp797co85g/gvcf.tfrecord-00008-of-00030.gz
I0109 16:15:18.628355 140188848478016 make_examples_core.py:257] Task 8/30: Writing examples to /tmp/tmp797co85g/make_examples.tfrecord-00008-of-00030.gz
I0109 16:15:18.628417 140188848478016 make_examples_core.py:257] Task 8/30: Overhead for preparing inputs: 0 seconds
I0109 16:15:18.153517 140186146633536 make_examples_core.py:257] Task 14/30: Preparing inputs
I0109 16:15:18.190391 140186146633536 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.301637 140186146633536 make_examples_core.py:257] Task 14/30: Common contigs are ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY', 'chrM', 'GL000008.2', 'GL000009.2', 'GL000205.2', 'GL000216.2', 'KI270302.1', 'KI270303.1', 'KI270304.1', 'KI270305.1', 'KI270310.1', 'KI270311.1', 'KI270312.1', 'KI270315.1', 'KI270316.1', 'KI270317.1', 'KI270320.1', 'KI270322.1', 'KI270329.1', 'KI270330.1', 'KI270333.1', 'KI270334.1', 'KI270335.1', 'KI270336.1', 'KI270337.1', 'KI270338.1', 'KI270340.1', 'KI270362.1', 'KI270363.1', 'KI270364.1', 'KI270366.1', 'KI270371.1', 'KI270372.1', 'KI270373.1', 'KI270374.1', 'KI270375.1', 'KI270376.1', 'KI270378.1', 'KI270379.1', 'KI270381.1', 'KI270382.1', 'KI270383.1', 'KI270384.1', 'KI270385.1', 'KI270386.1', 'KI270387.1', 'KI270388.1', 'KI270389.1', 'KI270390.1', 'KI270391.1', 'KI270392.1', 'KI270393.1', 'KI270394.1', 'KI270395.1', 'KI270396.1', 'KI270411.1', 'KI270412.1', 'KI270414.1', 'KI270417.1', 'KI270418.1', 'KI270419.1', 'KI270420.1', 'KI270422.1', 'KI270423.1', 'KI270424.1', 'KI270425.1', 'KI270429.1', 'KI270435.1', 'KI270438.1', 'KI270442.1', 'KI270448.1', 'KI270465.1', 'KI270466.1', 'KI270467.1', 'KI270468.1', 'KI270507.1', 'KI270508.1', 'KI270509.1', 'KI270510.1', 'KI270511.1', 'KI270512.1', 'KI270515.1', 'KI270516.1', 'KI270517.1', 'KI270518.1', 'KI270519.1', 'KI270521.1', 'KI270522.1', 'KI270528.1', 'KI270529.1', 'KI270530.1', 'KI270538.1', 'KI270539.1', 'KI270544.1', 'KI270548.1', 'KI270579.1', 'KI270580.1', 'KI270581.1', 'KI270582.1', 'KI270583.1', 'KI270584.1', 'KI270587.1', 'KI270588.1', 'KI270589.1', 'KI270590.1', 'KI270591.1', 'KI270593.1', 'KI270706.1', 'KI270707.1', 'KI270708.1', 'KI270709.1', 'KI270710.1', 'KI270711.1', 'KI270712.1', 'KI270713.1', 'KI270714.1', 'KI270715.1', 'KI270716.1', 'KI270717.1', 'KI270718.1', 'KI270719.1', 'KI270720.1', 'KI270721.1', 'KI270722.1', 'KI270723.1', 'KI270724.1', 'KI270725.1', 'KI270726.1', 'KI270727.1', 'KI270728.1', 'KI270729.1', 'KI270730.1', 'KI270731.1', 'KI270732.1', 'KI270733.1', 'KI270734.1', 'KI270735.1', 'KI270736.1', 'KI270737.1', 'KI270738.1', 'KI270739.1', 'KI270740.1', 'KI270741.1', 'KI270742.1', 'KI270743.1', 'KI270744.1', 'KI270745.1', 'KI270746.1', 'KI270747.1', 'KI270748.1', 'KI270749.1', 'KI270750.1', 'KI270751.1', 'KI270752.1', 'KI270753.1', 'KI270754.1', 'KI270755.1', 'KI270756.1', 'KI270757.1']
I0109 16:15:18.348451 140186146633536 make_examples_core.py:257] Task 14/30: Starting from v0.9.0, --use_ref_for_cram is default to true. If you are using CRAM input, note that we will decode CRAM using the reference you passed in with --ref
2025-01-09 16:15:18.349116: I third_party/nucleus/io/sam_reader.cc:736] Setting HTS_OPT_BLOCK_SIZE to 134217728
I0109 16:15:18.498345 140186146633536 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.166408 140260784252736 make_examples_core.py:257] Task 9/30: Starting from v0.9.0, --use_ref_for_cram is default to true. If you are using CRAM input, note that we will decode CRAM using the reference you passed in with --ref
2025-01-09 16:15:18.166915: I third_party/nucleus/io/sam_reader.cc:736] Setting HTS_OPT_BLOCK_SIZE to 134217728
I0109 16:15:18.282684 140260784252736 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.640148 140260784252736 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.648514 140260784252736 make_examples_core.py:257] Task 9/30: Writing gvcf records to /tmp/tmp797co85g/gvcf.tfrecord-00009-of-00030.gz
I0109 16:15:18.649051 140260784252736 make_examples_core.py:257] Task 9/30: Writing examples to /tmp/tmp797co85g/make_examples.tfrecord-00009-of-00030.gz
I0109 16:15:18.649111 140260784252736 make_examples_core.py:257] Task 9/30: Overhead for preparing inputs: 0 seconds
I0109 16:15:18.224491 139938488489792 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.522896 139938488489792 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.532239 139938488489792 make_examples_core.py:257] Task 2/30: Writing gvcf records to /tmp/tmp797co85g/gvcf.tfrecord-00002-of-00030.gz
I0109 16:15:18.532809 139938488489792 make_examples_core.py:257] Task 2/30: Writing examples to /tmp/tmp797co85g/make_examples.tfrecord-00002-of-00030.gz
I0109 16:15:18.532867 139938488489792 make_examples_core.py:257] Task 2/30: Overhead for preparing inputs: 0 seconds
I0109 16:15:18.220735 140514036438848 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.544796 140514036438848 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.554329 140514036438848 make_examples_core.py:257] Task 22/30: Writing gvcf records to /tmp/tmp797co85g/gvcf.tfrecord-00022-of-00030.gz
I0109 16:15:18.554972 140514036438848 make_examples_core.py:257] Task 22/30: Writing examples to /tmp/tmp797co85g/make_examples.tfrecord-00022-of-00030.gz
I0109 16:15:18.555025 140514036438848 make_examples_core.py:257] Task 22/30: Overhead for preparing inputs: 0 seconds
I0109 16:15:18.332719 140404518430528 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.342092 140404518430528 make_examples_core.py:257] Task 20/30: Writing gvcf records to /tmp/tmp797co85g/gvcf.tfrecord-00020-of-00030.gz
I0109 16:15:18.342752 140404518430528 make_examples_core.py:257] Task 20/30: Writing examples to /tmp/tmp797co85g/make_examples.tfrecord-00020-of-00030.gz
I0109 16:15:18.342803 140404518430528 make_examples_core.py:257] Task 20/30: Overhead for preparing inputs: 0 seconds
I0109 16:15:18.173803 140432962852672 make_examples_core.py:257] Task 11/30: Common contigs are ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY', 'chrM', 'GL000008.2', 'GL000009.2', 'GL000205.2', 'GL000216.2', 'KI270302.1', 'KI270303.1', 'KI270304.1', 'KI270305.1', 'KI270310.1', 'KI270311.1', 'KI270312.1', 'KI270315.1', 'KI270316.1', 'KI270317.1', 'KI270320.1', 'KI270322.1', 'KI270329.1', 'KI270330.1', 'KI270333.1', 'KI270334.1', 'KI270335.1', 'KI270336.1', 'KI270337.1', 'KI270338.1', 'KI270340.1', 'KI270362.1', 'KI270363.1', 'KI270364.1', 'KI270366.1', 'KI270371.1', 'KI270372.1', 'KI270373.1', 'KI270374.1', 'KI270375.1', 'KI270376.1', 'KI270378.1', 'KI270379.1', 'KI270381.1', 'KI270382.1', 'KI270383.1', 'KI270384.1', 'KI270385.1', 'KI270386.1', 'KI270387.1', 'KI270388.1', 'KI270389.1', 'KI270390.1', 'KI270391.1', 'KI270392.1', 'KI270393.1', 'KI270394.1', 'KI270395.1', 'KI270396.1', 'KI270411.1', 'KI270412.1', 'KI270414.1', 'KI270417.1', 'KI270418.1', 'KI270419.1', 'KI270420.1', 'KI270422.1', 'KI270423.1', 'KI270424.1', 'KI270425.1', 'KI270429.1', 'KI270435.1', 'KI270438.1', 'KI270442.1', 'KI270448.1', 'KI270465.1', 'KI270466.1', 'KI270467.1', 'KI270468.1', 'KI270507.1', 'KI270508.1', 'KI270509.1', 'KI270510.1', 'KI270511.1', 'KI270512.1', 'KI270515.1', 'KI270516.1', 'KI270517.1', 'KI270518.1', 'KI270519.1', 'KI270521.1', 'KI270522.1', 'KI270528.1', 'KI270529.1', 'KI270530.1', 'KI270538.1', 'KI270539.1', 'KI270544.1', 'KI270548.1', 'KI270579.1', 'KI270580.1', 'KI270581.1', 'KI270582.1', 'KI270583.1', 'KI270584.1', 'KI270587.1', 'KI270588.1', 'KI270589.1', 'KI270590.1', 'KI270591.1', 'KI270593.1', 'KI270706.1', 'KI270707.1', 'KI270708.1', 'KI270709.1', 'KI270710.1', 'KI270711.1', 'KI270712.1', 'KI270713.1', 'KI270714.1', 'KI270715.1', 'KI270716.1', 'KI270717.1', 'KI270718.1', 'KI270719.1', 'KI270720.1', 'KI270721.1', 'KI270722.1', 'KI270723.1', 'KI270724.1', 'KI270725.1', 'KI270726.1', 'KI270727.1', 'KI270728.1', 'KI270729.1', 'KI270730.1', 'KI270731.1', 'KI270732.1', 'KI270733.1', 'KI270734.1', 'KI270735.1', 'KI270736.1', 'KI270737.1', 'KI270738.1', 'KI270739.1', 'KI270740.1', 'KI270741.1', 'KI270742.1', 'KI270743.1', 'KI270744.1', 'KI270745.1', 'KI270746.1', 'KI270747.1', 'KI270748.1', 'KI270749.1', 'KI270750.1', 'KI270751.1', 'KI270752.1', 'KI270753.1', 'KI270754.1', 'KI270755.1', 'KI270756.1', 'KI270757.1']
I0109 16:15:18.200865 140432962852672 make_examples_core.py:257] Task 11/30: Starting from v0.9.0, --use_ref_for_cram is default to true. If you are using CRAM input, note that we will decode CRAM using the reference you passed in with --ref
2025-01-09 16:15:18.201362: I third_party/nucleus/io/sam_reader.cc:736] Setting HTS_OPT_BLOCK_SIZE to 134217728
I0109 16:15:18.356394 140432962852672 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.215056 139849412101952 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.510814 139849412101952 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.519038 139849412101952 make_examples_core.py:257] Task 4/30: Writing gvcf records to /tmp/tmp797co85g/gvcf.tfrecord-00004-of-00030.gz
I0109 16:15:18.519553 139849412101952 make_examples_core.py:257] Task 4/30: Writing examples to /tmp/tmp797co85g/make_examples.tfrecord-00004-of-00030.gz
I0109 16:15:18.519604 139849412101952 make_examples_core.py:257] Task 4/30: Overhead for preparing inputs: 0 seconds
I0109 16:15:18.215056 140425084057408 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.518187 140425084057408 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.526990 140425084057408 make_examples_core.py:257] Task 28/30: Writing gvcf records to /tmp/tmp797co85g/gvcf.tfrecord-00028-of-00030.gz
I0109 16:15:18.527487 140425084057408 make_examples_core.py:257] Task 28/30: Writing examples to /tmp/tmp797co85g/make_examples.tfrecord-00028-of-00030.gz
I0109 16:15:18.527541 140425084057408 make_examples_core.py:257] Task 28/30: Overhead for preparing inputs: 0 seconds
I0109 16:15:18.216046 140424271456064 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.533058 140424271456064 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.542760 140424271456064 make_examples_core.py:257] Task 27/30: Writing gvcf records to /tmp/tmp797co85g/gvcf.tfrecord-00027-of-00030.gz
I0109 16:15:18.543418 140424271456064 make_examples_core.py:257] Task 27/30: Writing examples to /tmp/tmp797co85g/make_examples.tfrecord-00027-of-00030.gz
I0109 16:15:18.543474 140424271456064 make_examples_core.py:257] Task 27/30: Overhead for preparing inputs: 0 seconds
I0109 16:15:18.453228 140367169652544 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.463087 140367169652544 make_examples_core.py:257] Task 13/30: Writing gvcf records to /tmp/tmp797co85g/gvcf.tfrecord-00013-of-00030.gz
I0109 16:15:18.463749 140367169652544 make_examples_core.py:257] Task 13/30: Writing examples to /tmp/tmp797co85g/make_examples.tfrecord-00013-of-00030.gz
I0109 16:15:18.463820 140367169652544 make_examples_core.py:257] Task 13/30: Overhead for preparing inputs: 0 seconds
I0109 16:15:18.230453 140337654490944 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
W0109 16:15:18.230839 140337654490944 make_examples_core.py:298] No non-empty sample name found in the input reads. DeepVariant will use default as the sample name. You can also provide a sample name with the --sample_name argument.
I0109 16:15:18.298497 140337654490944 make_examples_core.py:257] Task 16/30: Preparing inputs
I0109 16:15:18.339973 140337654490944 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.450666 140337654490944 make_examples_core.py:257] Task 16/30: Common contigs are ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY', 'chrM', 'GL000008.2', 'GL000009.2', 'GL000205.2', 'GL000216.2', 'KI270302.1', 'KI270303.1', 'KI270304.1', 'KI270305.1', 'KI270310.1', 'KI270311.1', 'KI270312.1', 'KI270315.1', 'KI270316.1', 'KI270317.1', 'KI270320.1', 'KI270322.1', 'KI270329.1', 'KI270330.1', 'KI270333.1', 'KI270334.1', 'KI270335.1', 'KI270336.1', 'KI270337.1', 'KI270338.1', 'KI270340.1', 'KI270362.1', 'KI270363.1', 'KI270364.1', 'KI270366.1', 'KI270371.1', 'KI270372.1', 'KI270373.1', 'KI270374.1', 'KI270375.1', 'KI270376.1', 'KI270378.1', 'KI270379.1', 'KI270381.1', 'KI270382.1', 'KI270383.1', 'KI270384.1', 'KI270385.1', 'KI270386.1', 'KI270387.1', 'KI270388.1', 'KI270389.1', 'KI270390.1', 'KI270391.1', 'KI270392.1', 'KI270393.1', 'KI270394.1', 'KI270395.1', 'KI270396.1', 'KI270411.1', 'KI270412.1', 'KI270414.1', 'KI270417.1', 'KI270418.1', 'KI270419.1', 'KI270420.1', 'KI270422.1', 'KI270423.1', 'KI270424.1', 'KI270425.1', 'KI270429.1', 'KI270435.1', 'KI270438.1', 'KI270442.1', 'KI270448.1', 'KI270465.1', 'KI270466.1', 'KI270467.1', 'KI270468.1', 'KI270507.1', 'KI270508.1', 'KI270509.1', 'KI270510.1', 'KI270511.1', 'KI270512.1', 'KI270515.1', 'KI270516.1', 'KI270517.1', 'KI270518.1', 'KI270519.1', 'KI270521.1', 'KI270522.1', 'KI270528.1', 'KI270529.1', 'KI270530.1', 'KI270538.1', 'KI270539.1', 'KI270544.1', 'KI270548.1', 'KI270579.1', 'KI270580.1', 'KI270581.1', 'KI270582.1', 'KI270583.1', 'KI270584.1', 'KI270587.1', 'KI270588.1', 'KI270589.1', 'KI270590.1', 'KI270591.1', 'KI270593.1', 'KI270706.1', 'KI270707.1', 'KI270708.1', 'KI270709.1', 'KI270710.1', 'KI270711.1', 'KI270712.1', 'KI270713.1', 'KI270714.1', 'KI270715.1', 'KI270716.1', 'KI270717.1', 'KI270718.1', 'KI270719.1', 'KI270720.1', 'KI270721.1', 'KI270722.1', 'KI270723.1', 'KI270724.1', 'KI270725.1', 'KI270726.1', 'KI270727.1', 'KI270728.1', 'KI270729.1', 'KI270730.1', 'KI270731.1', 'KI270732.1', 'KI270733.1', 'KI270734.1', 'KI270735.1', 'KI270736.1', 'KI270737.1', 'KI270738.1', 'KI270739.1', 'KI270740.1', 'KI270741.1', 'KI270742.1', 'KI270743.1', 'KI270744.1', 'KI270745.1', 'KI270746.1', 'KI270747.1', 'KI270748.1', 'KI270749.1', 'KI270750.1', 'KI270751.1', 'KI270752.1', 'KI270753.1', 'KI270754.1', 'KI270755.1', 'KI270756.1', 'KI270757.1']
I0109 16:15:18.486724 140337654490944 make_examples_core.py:257] Task 16/30: Starting from v0.9.0, --use_ref_for_cram is default to true. If you are using CRAM input, note that we will decode CRAM using the reference you passed in with --ref
2025-01-09 16:15:18.487456: I third_party/nucleus/io/sam_reader.cc:736] Setting HTS_OPT_BLOCK_SIZE to 134217728
I0109 16:15:18.651769 140337654490944 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.409711 139961776187200 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.418251 139961776187200 make_examples_core.py:257] Task 12/30: Writing gvcf records to /tmp/tmp797co85g/gvcf.tfrecord-00012-of-00030.gz
I0109 16:15:18.418804 139961776187200 make_examples_core.py:257] Task 12/30: Writing examples to /tmp/tmp797co85g/make_examples.tfrecord-00012-of-00030.gz
I0109 16:15:18.418855 139961776187200 make_examples_core.py:257] Task 12/30: Overhead for preparing inputs: 0 seconds
I0109 16:15:18.279042 140186593212224 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.286941 140186593212224 make_examples_core.py:257] Task 29/30: Writing gvcf records to /tmp/tmp797co85g/gvcf.tfrecord-00029-of-00030.gz
I0109 16:15:18.287444 140186593212224 make_examples_core.py:257] Task 29/30: Writing examples to /tmp/tmp797co85g/make_examples.tfrecord-00029-of-00030.gz
I0109 16:15:18.287497 140186593212224 make_examples_core.py:257] Task 29/30: Overhead for preparing inputs: 0 seconds
I0109 16:15:18.501206 140204668430144 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.513771 140204668430144 make_examples_core.py:257] Task 1/30: Writing gvcf records to /tmp/tmp797co85g/gvcf.tfrecord-00001-of-00030.gz
I0109 16:15:18.514439 140204668430144 make_examples_core.py:257] Task 1/30: Writing examples to /tmp/tmp797co85g/make_examples.tfrecord-00001-of-00030.gz
I0109 16:15:18.514511 140204668430144 make_examples_core.py:257] Task 1/30: Overhead for preparing inputs: 0 seconds
I0109 16:15:18.345948 139806051260224 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.355446 139806051260224 make_examples_core.py:257] Task 3/30: Writing gvcf records to /tmp/tmp797co85g/gvcf.tfrecord-00003-of-00030.gz
I0109 16:15:18.356103 139806051260224 make_examples_core.py:257] Task 3/30: Writing examples to /tmp/tmp797co85g/make_examples.tfrecord-00003-of-00030.gz
I0109 16:15:18.356157 139806051260224 make_examples_core.py:257] Task 3/30: Overhead for preparing inputs: 0 seconds
I0109 16:15:18.294198 140187777787712 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.303249 140187777787712 make_examples_core.py:257] Task 10/30: Writing gvcf records to /tmp/tmp797co85g/gvcf.tfrecord-00010-of-00030.gz
I0109 16:15:18.303799 140187777787712 make_examples_core.py:257] Task 10/30: Writing examples to /tmp/tmp797co85g/make_examples.tfrecord-00010-of-00030.gz
I0109 16:15:18.303852 140187777787712 make_examples_core.py:257] Task 10/30: Overhead for preparing inputs: 0 seconds
I0109 16:15:18.206728 140591318640448 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
W0109 16:15:18.207091 140591318640448 make_examples_core.py:298] No non-empty sample name found in the input reads. DeepVariant will use default as the sample name. You can also provide a sample name with the --sample_name argument.
I0109 16:15:18.249840 140591318640448 make_examples_core.py:257] Task 24/30: Preparing inputs
I0109 16:15:18.284909 140591318640448 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.367424 140591318640448 make_examples_core.py:257] Task 24/30: Common contigs are ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY', 'chrM', 'GL000008.2', 'GL000009.2', 'GL000205.2', 'GL000216.2', 'KI270302.1', 'KI270303.1', 'KI270304.1', 'KI270305.1', 'KI270310.1', 'KI270311.1', 'KI270312.1', 'KI270315.1', 'KI270316.1', 'KI270317.1', 'KI270320.1', 'KI270322.1', 'KI270329.1', 'KI270330.1', 'KI270333.1', 'KI270334.1', 'KI270335.1', 'KI270336.1', 'KI270337.1', 'KI270338.1', 'KI270340.1', 'KI270362.1', 'KI270363.1', 'KI270364.1', 'KI270366.1', 'KI270371.1', 'KI270372.1', 'KI270373.1', 'KI270374.1', 'KI270375.1', 'KI270376.1', 'KI270378.1', 'KI270379.1', 'KI270381.1', 'KI270382.1', 'KI270383.1', 'KI270384.1', 'KI270385.1', 'KI270386.1', 'KI270387.1', 'KI270388.1', 'KI270389.1', 'KI270390.1', 'KI270391.1', 'KI270392.1', 'KI270393.1', 'KI270394.1', 'KI270395.1', 'KI270396.1', 'KI270411.1', 'KI270412.1', 'KI270414.1', 'KI270417.1', 'KI270418.1', 'KI270419.1', 'KI270420.1', 'KI270422.1', 'KI270423.1', 'KI270424.1', 'KI270425.1', 'KI270429.1', 'KI270435.1', 'KI270438.1', 'KI270442.1', 'KI270448.1', 'KI270465.1', 'KI270466.1', 'KI270467.1', 'KI270468.1', 'KI270507.1', 'KI270508.1', 'KI270509.1', 'KI270510.1', 'KI270511.1', 'KI270512.1', 'KI270515.1', 'KI270516.1', 'KI270517.1', 'KI270518.1', 'KI270519.1', 'KI270521.1', 'KI270522.1', 'KI270528.1', 'KI270529.1', 'KI270530.1', 'KI270538.1', 'KI270539.1', 'KI270544.1', 'KI270548.1', 'KI270579.1', 'KI270580.1', 'KI270581.1', 'KI270582.1', 'KI270583.1', 'KI270584.1', 'KI270587.1', 'KI270588.1', 'KI270589.1', 'KI270590.1', 'KI270591.1', 'KI270593.1', 'KI270706.1', 'KI270707.1', 'KI270708.1', 'KI270709.1', 'KI270710.1', 'KI270711.1', 'KI270712.1', 'KI270713.1', 'KI270714.1', 'KI270715.1', 'KI270716.1', 'KI270717.1', 'KI270718.1', 'KI270719.1', 'KI270720.1', 'KI270721.1', 'KI270722.1', 'KI270723.1', 'KI270724.1', 'KI270725.1', 'KI270726.1', 'KI270727.1', 'KI270728.1', 'KI270729.1', 'KI270730.1', 'KI270731.1', 'KI270732.1', 'KI270733.1', 'KI270734.1', 'KI270735.1', 'KI270736.1', 'KI270737.1', 'KI270738.1', 'KI270739.1', 'KI270740.1', 'KI270741.1', 'KI270742.1', 'KI270743.1', 'KI270744.1', 'KI270745.1', 'KI270746.1', 'KI270747.1', 'KI270748.1', 'KI270749.1', 'KI270750.1', 'KI270751.1', 'KI270752.1', 'KI270753.1', 'KI270754.1', 'KI270755.1', 'KI270756.1', 'KI270757.1']
I0109 16:15:18.397924 140591318640448 make_examples_core.py:257] Task 24/30: Starting from v0.9.0, --use_ref_for_cram is default to true. If you are using CRAM input, note that we will decode CRAM using the reference you passed in with --ref
2025-01-09 16:15:18.398495: I third_party/nucleus/io/sam_reader.cc:736] Setting HTS_OPT_BLOCK_SIZE to 134217728
I0109 16:15:18.553601 140591318640448 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.215808 139984866625344 make_examples_core.py:257] Task 21/30: Common contigs are ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY', 'chrM', 'GL000008.2', 'GL000009.2', 'GL000205.2', 'GL000216.2', 'KI270302.1', 'KI270303.1', 'KI270304.1', 'KI270305.1', 'KI270310.1', 'KI270311.1', 'KI270312.1', 'KI270315.1', 'KI270316.1', 'KI270317.1', 'KI270320.1', 'KI270322.1', 'KI270329.1', 'KI270330.1', 'KI270333.1', 'KI270334.1', 'KI270335.1', 'KI270336.1', 'KI270337.1', 'KI270338.1', 'KI270340.1', 'KI270362.1', 'KI270363.1', 'KI270364.1', 'KI270366.1', 'KI270371.1', 'KI270372.1', 'KI270373.1', 'KI270374.1', 'KI270375.1', 'KI270376.1', 'KI270378.1', 'KI270379.1', 'KI270381.1', 'KI270382.1', 'KI270383.1', 'KI270384.1', 'KI270385.1', 'KI270386.1', 'KI270387.1', 'KI270388.1', 'KI270389.1', 'KI270390.1', 'KI270391.1', 'KI270392.1', 'KI270393.1', 'KI270394.1', 'KI270395.1', 'KI270396.1', 'KI270411.1', 'KI270412.1', 'KI270414.1', 'KI270417.1', 'KI270418.1', 'KI270419.1', 'KI270420.1', 'KI270422.1', 'KI270423.1', 'KI270424.1', 'KI270425.1', 'KI270429.1', 'KI270435.1', 'KI270438.1', 'KI270442.1', 'KI270448.1', 'KI270465.1', 'KI270466.1', 'KI270467.1', 'KI270468.1', 'KI270507.1', 'KI270508.1', 'KI270509.1', 'KI270510.1', 'KI270511.1', 'KI270512.1', 'KI270515.1', 'KI270516.1', 'KI270517.1', 'KI270518.1', 'KI270519.1', 'KI270521.1', 'KI270522.1', 'KI270528.1', 'KI270529.1', 'KI270530.1', 'KI270538.1', 'KI270539.1', 'KI270544.1', 'KI270548.1', 'KI270579.1', 'KI270580.1', 'KI270581.1', 'KI270582.1', 'KI270583.1', 'KI270584.1', 'KI270587.1', 'KI270588.1', 'KI270589.1', 'KI270590.1', 'KI270591.1', 'KI270593.1', 'KI270706.1', 'KI270707.1', 'KI270708.1', 'KI270709.1', 'KI270710.1', 'KI270711.1', 'KI270712.1', 'KI270713.1', 'KI270714.1', 'KI270715.1', 'KI270716.1', 'KI270717.1', 'KI270718.1', 'KI270719.1', 'KI270720.1', 'KI270721.1', 'KI270722.1', 'KI270723.1', 'KI270724.1', 'KI270725.1', 'KI270726.1', 'KI270727.1', 'KI270728.1', 'KI270729.1', 'KI270730.1', 'KI270731.1', 'KI270732.1', 'KI270733.1', 'KI270734.1', 'KI270735.1', 'KI270736.1', 'KI270737.1', 'KI270738.1', 'KI270739.1', 'KI270740.1', 'KI270741.1', 'KI270742.1', 'KI270743.1', 'KI270744.1', 'KI270745.1', 'KI270746.1', 'KI270747.1', 'KI270748.1', 'KI270749.1', 'KI270750.1', 'KI270751.1', 'KI270752.1', 'KI270753.1', 'KI270754.1', 'KI270755.1', 'KI270756.1', 'KI270757.1']
I0109 16:15:18.243401 139984866625344 make_examples_core.py:257] Task 21/30: Starting from v0.9.0, --use_ref_for_cram is default to true. If you are using CRAM input, note that we will decode CRAM using the reference you passed in with --ref
2025-01-09 16:15:18.243871: I third_party/nucleus/io/sam_reader.cc:736] Setting HTS_OPT_BLOCK_SIZE to 134217728
I0109 16:15:18.365749 139984866625344 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.668769 139984866625344 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.678054 139984866625344 make_examples_core.py:257] Task 21/30: Writing gvcf records to /tmp/tmp797co85g/gvcf.tfrecord-00021-of-00030.gz
I0109 16:15:18.678670 139984866625344 make_examples_core.py:257] Task 21/30: Writing examples to /tmp/tmp797co85g/make_examples.tfrecord-00021-of-00030.gz
I0109 16:15:18.678723 139984866625344 make_examples_core.py:257] Task 21/30: Overhead for preparing inputs: 0 seconds
I0109 16:15:18.280859 139834169136960 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.290064 139834169136960 make_examples_core.py:257] Task 18/30: Writing gvcf records to /tmp/tmp797co85g/gvcf.tfrecord-00018-of-00030.gz
I0109 16:15:18.290706 139834169136960 make_examples_core.py:257] Task 18/30: Writing examples to /tmp/tmp797co85g/make_examples.tfrecord-00018-of-00030.gz
I0109 16:15:18.290760 139834169136960 make_examples_core.py:257] Task 18/30: Overhead for preparing inputs: 0 seconds
I0109 16:15:18.160475 140227032713024 make_examples_core.py:257] Task 7/30: Common contigs are ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY', 'chrM', 'GL000008.2', 'GL000009.2', 'GL000205.2', 'GL000216.2', 'KI270302.1', 'KI270303.1', 'KI270304.1', 'KI270305.1', 'KI270310.1', 'KI270311.1', 'KI270312.1', 'KI270315.1', 'KI270316.1', 'KI270317.1', 'KI270320.1', 'KI270322.1', 'KI270329.1', 'KI270330.1', 'KI270333.1', 'KI270334.1', 'KI270335.1', 'KI270336.1', 'KI270337.1', 'KI270338.1', 'KI270340.1', 'KI270362.1', 'KI270363.1', 'KI270364.1', 'KI270366.1', 'KI270371.1', 'KI270372.1', 'KI270373.1', 'KI270374.1', 'KI270375.1', 'KI270376.1', 'KI270378.1', 'KI270379.1', 'KI270381.1', 'KI270382.1', 'KI270383.1', 'KI270384.1', 'KI270385.1', 'KI270386.1', 'KI270387.1', 'KI270388.1', 'KI270389.1', 'KI270390.1', 'KI270391.1', 'KI270392.1', 'KI270393.1', 'KI270394.1', 'KI270395.1', 'KI270396.1', 'KI270411.1', 'KI270412.1', 'KI270414.1', 'KI270417.1', 'KI270418.1', 'KI270419.1', 'KI270420.1', 'KI270422.1', 'KI270423.1', 'KI270424.1', 'KI270425.1', 'KI270429.1', 'KI270435.1', 'KI270438.1', 'KI270442.1', 'KI270448.1', 'KI270465.1', 'KI270466.1', 'KI270467.1', 'KI270468.1', 'KI270507.1', 'KI270508.1', 'KI270509.1', 'KI270510.1', 'KI270511.1', 'KI270512.1', 'KI270515.1', 'KI270516.1', 'KI270517.1', 'KI270518.1', 'KI270519.1', 'KI270521.1', 'KI270522.1', 'KI270528.1', 'KI270529.1', 'KI270530.1', 'KI270538.1', 'KI270539.1', 'KI270544.1', 'KI270548.1', 'KI270579.1', 'KI270580.1', 'KI270581.1', 'KI270582.1', 'KI270583.1', 'KI270584.1', 'KI270587.1', 'KI270588.1', 'KI270589.1', 'KI270590.1', 'KI270591.1', 'KI270593.1', 'KI270706.1', 'KI270707.1', 'KI270708.1', 'KI270709.1', 'KI270710.1', 'KI270711.1', 'KI270712.1', 'KI270713.1', 'KI270714.1', 'KI270715.1', 'KI270716.1', 'KI270717.1', 'KI270718.1', 'KI270719.1', 'KI270720.1', 'KI270721.1', 'KI270722.1', 'KI270723.1', 'KI270724.1', 'KI270725.1', 'KI270726.1', 'KI270727.1', 'KI270728.1', 'KI270729.1', 'KI270730.1', 'KI270731.1', 'KI270732.1', 'KI270733.1', 'KI270734.1', 'KI270735.1', 'KI270736.1', 'KI270737.1', 'KI270738.1', 'KI270739.1', 'KI270740.1', 'KI270741.1', 'KI270742.1', 'KI270743.1', 'KI270744.1', 'KI270745.1', 'KI270746.1', 'KI270747.1', 'KI270748.1', 'KI270749.1', 'KI270750.1', 'KI270751.1', 'KI270752.1', 'KI270753.1', 'KI270754.1', 'KI270755.1', 'KI270756.1', 'KI270757.1']
I0109 16:15:18.185878 140227032713024 make_examples_core.py:257] Task 7/30: Starting from v0.9.0, --use_ref_for_cram is default to true. If you are using CRAM input, note that we will decode CRAM using the reference you passed in with --ref
2025-01-09 16:15:18.186352: I third_party/nucleus/io/sam_reader.cc:736] Setting HTS_OPT_BLOCK_SIZE to 134217728
I0109 16:15:18.288457 140227032713024 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.630157 140227032713024 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.639574 140227032713024 make_examples_core.py:257] Task 7/30: Writing gvcf records to /tmp/tmp797co85g/gvcf.tfrecord-00007-of-00030.gz
I0109 16:15:18.640153 140227032713024 make_examples_core.py:257] Task 7/30: Writing examples to /tmp/tmp797co85g/make_examples.tfrecord-00007-of-00030.gz
I0109 16:15:18.640207 140227032713024 make_examples_core.py:257] Task 7/30: Overhead for preparing inputs: 0 seconds
I0109 16:15:18.169970 140123150317376 make_examples_core.py:257] Task 25/30: Common contigs are ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY', 'chrM', 'GL000008.2', 'GL000009.2', 'GL000205.2', 'GL000216.2', 'KI270302.1', 'KI270303.1', 'KI270304.1', 'KI270305.1', 'KI270310.1', 'KI270311.1', 'KI270312.1', 'KI270315.1', 'KI270316.1', 'KI270317.1', 'KI270320.1', 'KI270322.1', 'KI270329.1', 'KI270330.1', 'KI270333.1', 'KI270334.1', 'KI270335.1', 'KI270336.1', 'KI270337.1', 'KI270338.1', 'KI270340.1', 'KI270362.1', 'KI270363.1', 'KI270364.1', 'KI270366.1', 'KI270371.1', 'KI270372.1', 'KI270373.1', 'KI270374.1', 'KI270375.1', 'KI270376.1', 'KI270378.1', 'KI270379.1', 'KI270381.1', 'KI270382.1', 'KI270383.1', 'KI270384.1', 'KI270385.1', 'KI270386.1', 'KI270387.1', 'KI270388.1', 'KI270389.1', 'KI270390.1', 'KI270391.1', 'KI270392.1', 'KI270393.1', 'KI270394.1', 'KI270395.1', 'KI270396.1', 'KI270411.1', 'KI270412.1', 'KI270414.1', 'KI270417.1', 'KI270418.1', 'KI270419.1', 'KI270420.1', 'KI270422.1', 'KI270423.1', 'KI270424.1', 'KI270425.1', 'KI270429.1', 'KI270435.1', 'KI270438.1', 'KI270442.1', 'KI270448.1', 'KI270465.1', 'KI270466.1', 'KI270467.1', 'KI270468.1', 'KI270507.1', 'KI270508.1', 'KI270509.1', 'KI270510.1', 'KI270511.1', 'KI270512.1', 'KI270515.1', 'KI270516.1', 'KI270517.1', 'KI270518.1', 'KI270519.1', 'KI270521.1', 'KI270522.1', 'KI270528.1', 'KI270529.1', 'KI270530.1', 'KI270538.1', 'KI270539.1', 'KI270544.1', 'KI270548.1', 'KI270579.1', 'KI270580.1', 'KI270581.1', 'KI270582.1', 'KI270583.1', 'KI270584.1', 'KI270587.1', 'KI270588.1', 'KI270589.1', 'KI270590.1', 'KI270591.1', 'KI270593.1', 'KI270706.1', 'KI270707.1', 'KI270708.1', 'KI270709.1', 'KI270710.1', 'KI270711.1', 'KI270712.1', 'KI270713.1', 'KI270714.1', 'KI270715.1', 'KI270716.1', 'KI270717.1', 'KI270718.1', 'KI270719.1', 'KI270720.1', 'KI270721.1', 'KI270722.1', 'KI270723.1', 'KI270724.1', 'KI270725.1', 'KI270726.1', 'KI270727.1', 'KI270728.1', 'KI270729.1', 'KI270730.1', 'KI270731.1', 'KI270732.1', 'KI270733.1', 'KI270734.1', 'KI270735.1', 'KI270736.1', 'KI270737.1', 'KI270738.1', 'KI270739.1', 'KI270740.1', 'KI270741.1', 'KI270742.1', 'KI270743.1', 'KI270744.1', 'KI270745.1', 'KI270746.1', 'KI270747.1', 'KI270748.1', 'KI270749.1', 'KI270750.1', 'KI270751.1', 'KI270752.1', 'KI270753.1', 'KI270754.1', 'KI270755.1', 'KI270756.1', 'KI270757.1']
I0109 16:15:18.210136 140123150317376 make_examples_core.py:257] Task 25/30: Starting from v0.9.0, --use_ref_for_cram is default to true. If you are using CRAM input, note that we will decode CRAM using the reference you passed in with --ref
2025-01-09 16:15:18.210690: I third_party/nucleus/io/sam_reader.cc:736] Setting HTS_OPT_BLOCK_SIZE to 134217728
I0109 16:15:18.394631 140123150317376 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.709360 140267877631808 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.720378 140267877631808 make_examples_core.py:257] Task 19/30: Writing gvcf records to /tmp/tmp797co85g/gvcf.tfrecord-00019-of-00030.gz
I0109 16:15:18.721020 140267877631808 make_examples_core.py:257] Task 19/30: Writing examples to /tmp/tmp797co85g/make_examples.tfrecord-00019-of-00030.gz
I0109 16:15:18.721093 140267877631808 make_examples_core.py:257] Task 19/30: Overhead for preparing inputs: 0 seconds
I0109 16:15:18.928517 140186146633536 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.939149 140186146633536 make_examples_core.py:257] Task 14/30: Writing gvcf records to /tmp/tmp797co85g/gvcf.tfrecord-00014-of-00030.gz
I0109 16:15:18.939734 140186146633536 make_examples_core.py:257] Task 14/30: Writing examples to /tmp/tmp797co85g/make_examples.tfrecord-00014-of-00030.gz
I0109 16:15:18.939796 140186146633536 make_examples_core.py:257] Task 14/30: Overhead for preparing inputs: 0 seconds
I0109 16:15:18.733572 140432962852672 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.743534 140432962852672 make_examples_core.py:257] Task 11/30: Writing gvcf records to /tmp/tmp797co85g/gvcf.tfrecord-00011-of-00030.gz
I0109 16:15:18.744143 140432962852672 make_examples_core.py:257] Task 11/30: Writing examples to /tmp/tmp797co85g/make_examples.tfrecord-00011-of-00030.gz
I0109 16:15:18.744207 140432962852672 make_examples_core.py:257] Task 11/30: Overhead for preparing inputs: 0 seconds
I0109 16:15:19.114124 140337654490944 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:19.124670 140337654490944 make_examples_core.py:257] Task 16/30: Writing gvcf records to /tmp/tmp797co85g/gvcf.tfrecord-00016-of-00030.gz
I0109 16:15:19.125255 140337654490944 make_examples_core.py:257] Task 16/30: Writing examples to /tmp/tmp797co85g/make_examples.tfrecord-00016-of-00030.gz
I0109 16:15:19.125319 140337654490944 make_examples_core.py:257] Task 16/30: Overhead for preparing inputs: 0 seconds
I0109 16:15:18.910472 140591318640448 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.920241 140591318640448 make_examples_core.py:257] Task 24/30: Writing gvcf records to /tmp/tmp797co85g/gvcf.tfrecord-00024-of-00030.gz
I0109 16:15:18.920816 140591318640448 make_examples_core.py:257] Task 24/30: Writing examples to /tmp/tmp797co85g/make_examples.tfrecord-00024-of-00030.gz
I0109 16:15:18.920878 140591318640448 make_examples_core.py:257] Task 24/30: Overhead for preparing inputs: 0 seconds
I0109 16:15:18.869812 140123150317376 genomics_reader.py:222] Reading mapping/A53T_828_21.12_SW_Barcode02_laser_DNA_sorted.bam with NativeSamReader
I0109 16:15:18.879981 140123150317376 make_examples_core.py:257] Task 25/30: Writing gvcf records to /tmp/tmp797co85g/gvcf.tfrecord-00025-of-00030.gz
I0109 16:15:18.880640 140123150317376 make_examples_core.py:257] Task 25/30: Writing examples to /tmp/tmp797co85g/make_examples.tfrecord-00025-of-00030.gz
I0109 16:15:18.880725 140123150317376 make_examples_core.py:257] Task 25/30: Overhead for preparing inputs: 0 seconds
I0109 16:15:19.428105 140666116208448 make_examples_core.py:257] Task 26/30: 23 candidates (23 examples) [1.13s elapsed]
I0109 16:15:19.704732 140484979402560 make_examples_core.py:257] Task 17/30: 73 candidates (75 examples) [1.30s elapsed]
I0109 16:15:19.347925 139770797205312 make_examples_core.py:257] Task 23/30: 3 candidates (3 examples) [1.04s elapsed]
I0109 16:15:19.628673 140075713414976 make_examples_core.py:257] Task 0/30: 40 candidates (42 examples) [1.28s elapsed]
I0109 16:15:19.626882 139711390340928 make_examples_core.py:257] Task 15/30: 44 candidates (44 examples) [1.27s elapsed]
I0109 16:15:19.709555 140260784252736 make_examples_core.py:257] Task 9/30: 23 candidates (23 examples) [1.06s elapsed]
I0109 16:15:19.645357 140514036438848 make_examples_core.py:257] Task 22/30: 15 candidates (15 examples) [1.09s elapsed]
I0109 16:15:19.382724 140404518430528 make_examples_core.py:257] Task 20/30: 8 candidates (8 examples) [1.04s elapsed]
I0109 16:15:19.933469 140432962852672 make_examples_core.py:257] Task 11/30: 32 candidates (32 examples) [1.19s elapsed]
I0109 16:15:19.679663 140425084057408 make_examples_core.py:257] Task 28/30: 57 candidates (57 examples) [1.15s elapsed]
I0109 16:15:19.542477 140424271456064 make_examples_core.py:257] Task 27/30: 6 candidates (6 examples) [1.00s elapsed]
I0109 16:15:19.730880 139961776187200 make_examples_core.py:257] Task 12/30: 80 candidates (80 examples) [1.31s elapsed]
I0109 16:15:19.452692 140186593212224 make_examples_core.py:257] Task 29/30: 35 candidates (35 examples) [1.17s elapsed]
I0109 16:15:19.847298 140204668430144 make_examples_core.py:257] Task 1/30: 46 candidates (46 examples) [1.33s elapsed]
I0109 16:15:19.859487 139806051260224 make_examples_core.py:257] Task 3/30: 78 candidates (78 examples) [1.50s elapsed]
I0109 16:15:19.435550 140187777787712 make_examples_core.py:257] Task 10/30: 25 candidates (25 examples) [1.13s elapsed]
I0109 16:15:19.677660 139984866625344 make_examples_core.py:257] Task 21/30: 3 candidates (3 examples) [1.00s elapsed]
I0109 16:15:20.471195 140267877631808 make_examples_core.py:257] Task 19/30: 130 candidates (130 examples) [1.75s elapsed]
I0109 16:15:20.171768 140144794814272 make_examples_core.py:257] Task 5/30: 56 candidates (56 examples) [1.65s elapsed]
I0109 16:15:20.078020 140669765121856 make_examples_core.py:257] Task 6/30: 153 candidates (155 examples) [1.77s elapsed]
I0109 16:15:20.029989 140188848478016 make_examples_core.py:257] Task 8/30: 32 candidates (32 examples) [1.40s elapsed]
I0109 16:15:20.152964 139938488489792 make_examples_core.py:257] Task 2/30: 116 candidates (118 examples) [1.62s elapsed]
I0109 16:15:20.071999 139849412101952 make_examples_core.py:257] Task 4/30: 112 candidates (114 examples) [1.55s elapsed]
I0109 16:15:20.609148 140367169652544 make_examples_core.py:257] Task 13/30: 79 candidates (81 examples) [2.15s elapsed]
I0109 16:15:20.274975 140591318640448 make_examples_core.py:257] Task 24/30: 85 candidates (85 examples) [1.35s elapsed]
I0109 16:15:20.187501 139834169136960 make_examples_core.py:257] Task 18/30: 195 candidates (195 examples) [1.90s elapsed]
I0109 16:15:20.140357 140227032713024 make_examples_core.py:257] Task 7/30: 122 candidates (122 examples) [1.50s elapsed]
I0109 16:15:20.138972 140123150317376 make_examples_core.py:257] Task 25/30: 32 candidates (32 examples) [1.26s elapsed]
I0109 16:15:20.732704 140186146633536 make_examples_core.py:257] Task 14/30: 77 candidates (77 examples) [1.79s elapsed]
I0109 16:15:20.865960 140337654490944 make_examples_core.py:257] Task 16/30: 98 candidates (100 examples) [1.74s elapsed]
I0109 16:15:48.366757 139834169136960 make_examples_core.py:257] Task 18/30: 2014 candidates (2225 examples) [28.18s elapsed]
I0109 16:15:49.960479 139938488489792 make_examples_core.py:257] Task 2/30: 2093 candidates (2440 examples) [29.81s elapsed]
I0109 16:15:49.260832 140432962852672 make_examples_core.py:257] Task 11/30: 2005 candidates (2203 examples) [29.33s elapsed]
I0109 16:15:50.450026 139770797205312 make_examples_core.py:257] Task 23/30: 2064 candidates (2267 examples) [31.10s elapsed]
I0109 16:15:50.851353 139711390340928 make_examples_core.py:257] Task 15/30: 2003 candidates (2199 examples) [31.22s elapsed]
I0109 16:15:51.744331 140404518430528 make_examples_core.py:257] Task 20/30: 2092 candidates (2238 examples) [32.36s elapsed]
I0109 16:15:52.119046 140591318640448 make_examples_core.py:257] Task 24/30: 2156 candidates (2303 examples) [31.84s elapsed]
I0109 16:15:52.039851 140227032713024 make_examples_core.py:257] Task 7/30: 2012 candidates (2266 examples) [31.90s elapsed]
I0109 16:15:52.484133 140669765121856 make_examples_core.py:257] Task 6/30: 2098 candidates (2286 examples) [32.41s elapsed]
I0109 16:15:52.842443 139961776187200 make_examples_core.py:257] Task 12/30: 2119 candidates (2356 examples) [33.11s elapsed]
I0109 16:15:52.259335 140186593212224 make_examples_core.py:257] Task 29/30: 2025 candidates (2241 examples) [32.81s elapsed]
I0109 16:15:53.626746 140075713414976 make_examples_core.py:257] Task 0/30: 2107 candidates (2334 examples) [34.00s elapsed]
I0109 16:15:54.023371 140424271456064 make_examples_core.py:257] Task 27/30: 2109 candidates (2345 examples) [34.48s elapsed]
I0109 16:15:54.060620 139984866625344 make_examples_core.py:257] Task 21/30: 2219 candidates (2399 examples) [34.38s elapsed]
I0109 16:15:54.798127 140186146633536 make_examples_core.py:257] Task 14/30: 2040 candidates (2323 examples) [34.07s elapsed]
I0109 16:15:56.157514 140260784252736 make_examples_core.py:257] Task 9/30: 2164 candidates (2347 examples) [36.45s elapsed]
I0109 16:15:55.844213 140514036438848 make_examples_core.py:257] Task 22/30: 2098 candidates (2340 examples) [36.20s elapsed]
I0109 16:15:55.490197 140425084057408 make_examples_core.py:257] Task 28/30: 2001 candidates (2214 examples) [35.81s elapsed]
I0109 16:15:56.916877 140187777787712 make_examples_core.py:257] Task 10/30: 2153 candidates (2373 examples) [37.48s elapsed]
I0109 16:15:58.381504 140144794814272 make_examples_core.py:257] Task 5/30: 2013 candidates (2229 examples) [38.21s elapsed]
I0109 16:15:58.769477 140666116208448 make_examples_core.py:257] Task 26/30: 2042 candidates (2274 examples) [39.34s elapsed]
I0109 16:15:59.014511 140267877631808 make_examples_core.py:257] Task 19/30: 2205 candidates (2452 examples) [38.54s elapsed]
I0109 16:15:58.727129 140123150317376 make_examples_core.py:257] Task 25/30: 2119 candidates (2274 examples) [38.59s elapsed]
I0109 16:16:04.106321 140484979402560 make_examples_core.py:257] Task 17/30: 2192 candidates (2414 examples) [44.40s elapsed]
I0109 16:16:04.244537 140204668430144 make_examples_core.py:257] Task 1/30: 2147 candidates (2360 examples) [44.40s elapsed]
I0109 16:16:05.032680 140188848478016 make_examples_core.py:257] Task 8/30: 2157 candidates (2398 examples) [45.00s elapsed]
I0109 16:16:04.983986 139849412101952 make_examples_core.py:257] Task 4/30: 2115 candidates (2406 examples) [44.91s elapsed]
I0109 16:16:06.132541 140367169652544 make_examples_core.py:257] Task 13/30: 2007 candidates (2257 examples) [45.52s elapsed]
I0109 16:16:06.215103 140337654490944 make_examples_core.py:257] Task 16/30: 2266 candidates (2446 examples) [45.35s elapsed]
I0109 16:16:08.121132 139806051260224 make_examples_core.py:257] Task 3/30: 2096 candidates (2336 examples) [48.26s elapsed]
I0109 16:16:22.780417 139770797205312 make_examples_core.py:257] Task 23/30: 4045 candidates (4474 examples) [32.33s elapsed]
I0109 16:16:24.735075 139711390340928 make_examples_core.py:257] Task 15/30: 4067 candidates (4438 examples) [33.88s elapsed]
I0109 16:16:24.450773 139938488489792 make_examples_core.py:257] Task 2/30: 4214 candidates (4757 examples) [34.49s elapsed]
I0109 16:16:26.196687 139961776187200 make_examples_core.py:257] Task 12/30: 4097 candidates (4530 examples) [33.35s elapsed]
I0109 16:16:27.215817 140669765121856 make_examples_core.py:257] Task 6/30: 4109 candidates (4522 examples) [34.73s elapsed]
I0109 16:16:27.290928 140432962852672 make_examples_core.py:257] Task 11/30: 4107 candidates (4482 examples) [38.03s elapsed]
I0109 16:16:26.973300 139984866625344 make_examples_core.py:257] Task 21/30: 4001 candidates (4386 examples) [32.91s elapsed]
I0109 16:16:27.023544 139834169136960 make_examples_core.py:257] Task 18/30: 4081 candidates (4474 examples) [38.66s elapsed]
I0109 16:16:28.129446 140186146633536 make_examples_core.py:257] Task 14/30: 4097 candidates (4574 examples) [33.33s elapsed]
I0109 16:16:28.655672 140514036438848 make_examples_core.py:257] Task 22/30: 4055 candidates (4508 examples) [32.81s elapsed]
I0109 16:16:28.754333 140404518430528 make_examples_core.py:257] Task 20/30: 4147 candidates (4529 examples) [37.01s elapsed]
I0109 16:16:29.300107 140227032713024 make_examples_core.py:257] Task 7/30: 4049 candidates (4525 examples) [37.26s elapsed]
I0109 16:16:30.482714 140075713414976 make_examples_core.py:257] Task 0/30: 4047 candidates (4453 examples) [36.86s elapsed]
I0109 16:16:30.818902 140424271456064 make_examples_core.py:257] Task 27/30: 4094 candidates (4499 examples) [36.80s elapsed]
I0109 16:16:31.271216 140186593212224 make_examples_core.py:257] Task 29/30: 4171 candidates (4550 examples) [39.01s elapsed]
I0109 16:16:33.518091 140260784252736 make_examples_core.py:257] Task 9/30: 4117 candidates (4485 examples) [37.36s elapsed]
I0109 16:16:33.862720 140187777787712 make_examples_core.py:257] Task 10/30: 4186 candidates (4639 examples) [36.95s elapsed]
I0109 16:16:35.623212 140425084057408 make_examples_core.py:257] Task 28/30: 4399 candidates (4795 examples) [40.13s elapsed]
I0109 16:16:35.412264 140591318640448 make_examples_core.py:257] Task 24/30: 4096 candidates (4452 examples) [43.29s elapsed]
I0109 16:16:37.314411 140666116208448 make_examples_core.py:257] Task 26/30: 4154 candidates (4613 examples) [38.54s elapsed]
I0109 16:16:37.891824 140484979402560 make_examples_core.py:257] Task 17/30: 4181 candidates (4606 examples) [33.79s elapsed]
I0109 16:16:37.525085 139849412101952 make_examples_core.py:257] Task 4/30: 4132 candidates (4585 examples) [32.54s elapsed]
I0109 16:16:37.408151 140123150317376 make_examples_core.py:257] Task 25/30: 4111 candidates (4418 examples) [38.68s elapsed]
I0109 16:16:38.005287 140204668430144 make_examples_core.py:257] Task 1/30: 4022 candidates (4417 examples) [33.76s elapsed]
I0109 16:16:39.310506 140267877631808 make_examples_core.py:257] Task 19/30: 4118 candidates (4600 examples) [40.30s elapsed]
I0109 16:16:40.124677 140367169652544 make_examples_core.py:257] Task 13/30: 4029 candidates (4475 examples) [33.99s elapsed]
I0109 16:16:40.815030 140337654490944 make_examples_core.py:257] Task 16/30: 4091 candidates (4455 examples) [34.60s elapsed]
I0109 16:16:40.673992 139806051260224 make_examples_core.py:257] Task 3/30: 4111 candidates (4571 examples) [32.55s elapsed]
I0109 16:16:43.368500 140144794814272 make_examples_core.py:257] Task 5/30: 4102 candidates (4535 examples) [44.99s elapsed]
I0109 16:16:43.798910 140188848478016 make_examples_core.py:257] Task 8/30: 4027 candidates (4468 examples) [38.77s elapsed]
I0109 16:16:56.110564 139938488489792 make_examples_core.py:257] Task 2/30: 6065 candidates (6781 examples) [31.66s elapsed]
I0109 16:16:57.494854 140669765121856 make_examples_core.py:257] Task 6/30: 6027 candidates (6586 examples) [30.28s elapsed]
I0109 16:16:57.333916 140514036438848 make_examples_core.py:257] Task 22/30: 6009 candidates (6684 examples) [28.68s elapsed]
I0109 16:16:59.199386 140432962852672 make_examples_core.py:257] Task 11/30: 6109 candidates (6663 examples) [31.91s elapsed]
I0109 16:16:59.474482 139711390340928 make_examples_core.py:257] Task 15/30: 6158 candidates (6748 examples) [34.74s elapsed]
I0109 16:16:59.794039 140404518430528 make_examples_core.py:257] Task 20/30: 6058 candidates (6651 examples) [31.04s elapsed]
I0109 16:17:01.950234 140424271456064 make_examples_core.py:257] Task 27/30: 6006 candidates (6715 examples) [31.13s elapsed]
I0109 16:17:02.055022 140186593212224 make_examples_core.py:257] Task 29/30: 6062 candidates (6608 examples) [30.78s elapsed]
I0109 16:17:02.390239 139834169136960 make_examples_core.py:257] Task 18/30: 6161 candidates (6811 examples) [35.37s elapsed]
I0109 16:17:02.520690 140227032713024 make_examples_core.py:257] Task 7/30: 6131 candidates (6753 examples) [33.22s elapsed]
I0109 16:17:04.663733 140186146633536 make_examples_core.py:257] Task 14/30: 6079 candidates (6747 examples) [36.53s elapsed]
I0109 16:17:05.033010 139770797205312 make_examples_core.py:257] Task 23/30: 6107 candidates (6771 examples) [42.25s elapsed]
I0109 16:17:05.151094 140425084057408 make_examples_core.py:257] Task 28/30: 6094 candidates (6683 examples) [29.53s elapsed]
I0109 16:17:05.321994 139961776187200 make_examples_core.py:257] Task 12/30: 6187 candidates (6805 examples) [39.12s elapsed]
I0109 16:17:05.163308 140187777787712 make_examples_core.py:257] Task 10/30: 6072 candidates (6731 examples) [31.30s elapsed]
I0109 16:17:05.146289 139984866625344 make_examples_core.py:257] Task 21/30: 6173 candidates (6822 examples) [38.17s elapsed]
I0109 16:17:07.104091 140484979402560 make_examples_core.py:257] Task 17/30: 6051 candidates (6603 examples) [29.21s elapsed]
I0109 16:17:08.436189 140075713414976 make_examples_core.py:257] Task 0/30: 6037 candidates (6589 examples) [37.95s elapsed]
I0109 16:17:08.669265 140260784252736 make_examples_core.py:257] Task 9/30: 6012 candidates (6529 examples) [35.15s elapsed]
I0109 16:17:09.952189 140666116208448 make_examples_core.py:257] Task 26/30: 6017 candidates (6606 examples) [32.64s elapsed]
I0109 16:17:10.573945 139849412101952 make_examples_core.py:257] Task 4/30: 6090 candidates (6698 examples) [33.05s elapsed]
I0109 16:17:13.996248 140123150317376 make_examples_core.py:257] Task 25/30: 6012 candidates (6537 examples) [36.59s elapsed]
I0109 16:17:14.571382 140267877631808 make_examples_core.py:257] Task 19/30: 6073 candidates (6780 examples) [35.26s elapsed]
I0109 16:17:16.065062 140204668430144 make_examples_core.py:257] Task 1/30: 6069 candidates (6693 examples) [38.06s elapsed]
I0109 16:17:15.339741 139806051260224 make_examples_core.py:257] Task 3/30: 6155 candidates (6812 examples) [34.67s elapsed]
I0109 16:17:19.291553 140144794814272 make_examples_core.py:257] Task 5/30: 6110 candidates (6746 examples) [35.92s elapsed]
I0109 16:17:19.954098 140591318640448 make_examples_core.py:257] Task 24/30: 6136 candidates (6712 examples) [44.54s elapsed]
I0109 16:17:21.720381 140188848478016 make_examples_core.py:257] Task 8/30: 6016 candidates (6622 examples) [37.92s elapsed]
I0109 16:17:22.349499 140337654490944 make_examples_core.py:257] Task 16/30: 6055 candidates (6654 examples) [41.53s elapsed]
I0109 16:17:28.908658 140367169652544 make_examples_core.py:257] Task 13/30: 6129 candidates (6754 examples) [48.78s elapsed]
I0109 16:17:36.195778 139711390340928 make_examples_core.py:257] Task 15/30: 8172 candidates (8935 examples) [36.72s elapsed]
I0109 16:17:38.624369 139938488489792 make_examples_core.py:257] Task 2/30: 8243 candidates (9217 examples) [42.51s elapsed]
I0109 16:17:38.259888 140514036438848 make_examples_core.py:257] Task 22/30: 8169 candidates (9135 examples) [40.93s elapsed]
I0109 16:17:38.654726 139834169136960 make_examples_core.py:257] Task 18/30: 8151 candidates (8997 examples) [36.26s elapsed]
I0109 16:17:39.792468 140186146633536 make_examples_core.py:257] Task 14/30: 8117 candidates (8963 examples) [35.13s elapsed]
I0109 16:17:39.251685 140432962852672 make_examples_core.py:257] Task 11/30: 8162 candidates (8923 examples) [40.05s elapsed]
I0109 16:17:39.516072 140424271456064 make_examples_core.py:257] Task 27/30: 8140 candidates (9106 examples) [37.57s elapsed]
I0109 16:17:40.466926 140404518430528 make_examples_core.py:257] Task 20/30: 8225 candidates (9106 examples) [40.67s elapsed]
I0109 16:17:41.563232 140669765121856 make_examples_core.py:257] Task 6/30: 8113 candidates (8885 examples) [44.07s elapsed]
I0109 16:17:41.788245 139984866625344 make_examples_core.py:257] Task 21/30: 8141 candidates (8970 examples) [36.64s elapsed]
I0109 16:17:42.188942 140484979402560 make_examples_core.py:257] Task 17/30: 8043 candidates (8733 examples) [35.08s elapsed]
I0109 16:17:42.653801 140425084057408 make_examples_core.py:257] Task 28/30: 8003 candidates (8810 examples) [37.50s elapsed]
I0109 16:17:42.366477 139961776187200 make_examples_core.py:257] Task 12/30: 8150 candidates (8960 examples) [37.04s elapsed]
I0109 16:17:42.027063 140186593212224 make_examples_core.py:257] Task 29/30: 8007 candidates (8888 examples) [39.97s elapsed]
I0109 16:17:42.635505 140227032713024 make_examples_core.py:257] Task 7/30: 8134 candidates (8973 examples) [40.11s elapsed]
I0109 16:17:43.260961 140187777787712 make_examples_core.py:257] Task 10/30: 8116 candidates (8941 examples) [38.10s elapsed]
I0109 16:17:47.077285 140075713414976 make_examples_core.py:257] Task 0/30: 8142 candidates (8955 examples) [38.64s elapsed]
I0109 16:17:47.337690 140260784252736 make_examples_core.py:257] Task 9/30: 8124 candidates (8795 examples) [38.67s elapsed]
I0109 16:17:50.395825 140666116208448 make_examples_core.py:257] Task 26/30: 8055 candidates (8862 examples) [40.44s elapsed]
I0109 16:17:51.751481 139806051260224 make_examples_core.py:257] Task 3/30: 8051 candidates (8963 examples) [36.41s elapsed]
I0109 16:17:53.151934 139770797205312 make_examples_core.py:257] Task 23/30: 8159 candidates (9112 examples) [48.12s elapsed]
I0109 16:17:53.185261 140267877631808 make_examples_core.py:257] Task 19/30: 8016 candidates (8909 examples) [38.61s elapsed]
I0109 16:17:54.483220 139849412101952 make_examples_core.py:257] Task 4/30: 8069 candidates (8899 examples) [43.91s elapsed]
I0109 16:17:57.360949 140188848478016 make_examples_core.py:257] Task 8/30: 8031 candidates (8910 examples) [35.64s elapsed]
I0109 16:17:57.616113 140204668430144 make_examples_core.py:257] Task 1/30: 8070 candidates (8994 examples) [41.55s elapsed]
I0109 16:17:59.500525 140591318640448 make_examples_core.py:257] Task 24/30: 8194 candidates (9051 examples) [39.55s elapsed]
I0109 16:18:02.090888 140144794814272 make_examples_core.py:257] Task 5/30: 8032 candidates (8879 examples) [42.80s elapsed]
I0109 16:18:01.962799 140337654490944 make_examples_core.py:257] Task 16/30: 8156 candidates (8936 examples) [39.61s elapsed]
I0109 16:18:05.079399 140123150317376 make_examples_core.py:257] Task 25/30: 8182 candidates (8931 examples) [51.08s elapsed]
I0109 16:18:08.440427 140367169652544 make_examples_core.py:257] Task 13/30: 8143 candidates (8958 examples) [39.53s elapsed]
I0109 16:18:33.426108 139938488489792 make_examples_core.py:257] Task 2/30: 10048 candidates (11339 examples) [54.80s elapsed]
I0109 16:18:37.085145 140404518430528 make_examples_core.py:257] Task 20/30: 10087 candidates (11256 examples) [56.62s elapsed]
I0109 16:18:37.216122 140187777787712 make_examples_core.py:257] Task 10/30: 10077 candidates (11228 examples) [53.95s elapsed]
I0109 16:18:40.610746 139834169136960 make_examples_core.py:257] Task 18/30: 10105 candidates (11194 examples) [61.96s elapsed]
I0109 16:18:45.485945 139711390340928 make_examples_core.py:257] Task 15/30: 10113 candidates (11197 examples) [69.29s elapsed]
I0109 16:18:45.751507 139984866625344 make_examples_core.py:257] Task 21/30: 10017 candidates (11151 examples) [63.96s elapsed]
I0109 16:18:46.365938 140484979402560 make_examples_core.py:257] Task 17/30: 10087 candidates (10990 examples) [64.18s elapsed]
I0109 16:18:46.329212 140186146633536 make_examples_core.py:257] Task 14/30: 10125 candidates (11275 examples) [66.54s elapsed]
I0109 16:18:46.727780 139961776187200 make_examples_core.py:257] Task 12/30: 10051 candidates (11113 examples) [64.36s elapsed]
I0109 16:18:48.405544 140514036438848 make_examples_core.py:257] Task 22/30: 10023 candidates (11315 examples) [70.15s elapsed]
I0109 16:18:53.033923 140666116208448 make_examples_core.py:257] Task 26/30: 10048 candidates (11197 examples) [62.64s elapsed]
I0109 16:18:53.025969 140432962852672 make_examples_core.py:257] Task 11/30: 10036 candidates (11084 examples) [73.77s elapsed]
I0109 16:18:53.796564 140337654490944 make_examples_core.py:257] Task 16/30: 10029 candidates (11138 examples) [51.83s elapsed]
I0109 16:18:54.783836 140260784252736 make_examples_core.py:257] Task 9/30: 10014 candidates (11006 examples) [67.45s elapsed]
I0109 16:18:55.865351 140424271456064 make_examples_core.py:257] Task 27/30: 10073 candidates (11373 examples) [76.35s elapsed]
I0109 16:18:59.421802 139770797205312 make_examples_core.py:257] Task 23/30: 10079 candidates (11384 examples) [66.27s elapsed]
I0109 16:18:59.642883 140075713414976 make_examples_core.py:257] Task 0/30: 10119 candidates (11244 examples) [72.57s elapsed]
I0109 16:19:00.270077 140267877631808 make_examples_core.py:257] Task 19/30: 10135 candidates (11339 examples) [67.08s elapsed]
I0109 16:19:01.043993 140227032713024 make_examples_core.py:257] Task 7/30: 10112 candidates (11245 examples) [78.41s elapsed]
I0109 16:19:05.333597 140669765121856 make_examples_core.py:257] Task 6/30: 10079 candidates (11209 examples) [83.77s elapsed]
I0109 16:19:06.190994 140186593212224 make_examples_core.py:257] Task 29/30: 10060 candidates (11287 examples) [84.16s elapsed]
I0109 16:19:08.262561 140188848478016 make_examples_core.py:257] Task 8/30: 10019 candidates (11205 examples) [70.90s elapsed]
I0109 16:19:10.980320 140425084057408 make_examples_core.py:257] Task 28/30: 10123 candidates (11321 examples) [88.33s elapsed]
I0109 16:19:13.525371 140204668430144 make_examples_core.py:257] Task 1/30: 10102 candidates (11430 examples) [75.91s elapsed]
I0109 16:19:15.262714 139849412101952 make_examples_core.py:257] Task 4/30: 10016 candidates (11092 examples) [80.78s elapsed]
I0109 16:19:16.756939 140367169652544 make_examples_core.py:257] Task 13/30: 10152 candidates (11267 examples) [68.32s elapsed]
I0109 16:19:22.757549 139806051260224 make_examples_core.py:257] Task 3/30: 10017 candidates (11270 examples) [91.01s elapsed]
I0109 16:19:31.647612 140144794814272 make_examples_core.py:257] Task 5/30: 10093 candidates (11300 examples) [89.56s elapsed]
I0109 16:19:32.208214 140123150317376 make_examples_core.py:257] Task 25/30: 10147 candidates (11298 examples) [87.13s elapsed]
I0109 16:19:34.422479 140591318640448 make_examples_core.py:257] Task 24/30: 10026 candidates (11265 examples) [94.92s elapsed]
I0109 16:20:01.590780 140075713414976 make_examples_core.py:257] Task 0/30: 12015 candidates (13395 examples) [61.95s elapsed]
I0109 16:20:01.365290 140514036438848 make_examples_core.py:257] Task 22/30: 12027 candidates (13584 examples) [72.96s elapsed]
I0109 16:20:03.909231 139711390340928 make_examples_core.py:257] Task 15/30: 12139 candidates (13549 examples) [78.42s elapsed]
I0109 16:20:04.695469 139938488489792 make_examples_core.py:257] Task 2/30: 12142 candidates (13744 examples) [91.27s elapsed]
I0109 16:20:04.927471 140187777787712 make_examples_core.py:257] Task 10/30: 12106 candidates (13568 examples) [87.71s elapsed]
I0109 16:20:06.874981 139961776187200 make_examples_core.py:257] Task 12/30: 12180 candidates (13554 examples) [80.15s elapsed]
I0109 16:20:08.637992 140186146633536 make_examples_core.py:257] Task 14/30: 12190 candidates (13675 examples) [82.31s elapsed]
I0109 16:20:10.218627 140424271456064 make_examples_core.py:257] Task 27/30: 12042 candidates (13681 examples) [74.35s elapsed]
I0109 16:20:11.347000 140404518430528 make_examples_core.py:257] Task 20/30: 12223 candidates (13676 examples) [94.26s elapsed]
I0109 16:20:13.226796 140669765121856 make_examples_core.py:257] Task 6/30: 12027 candidates (13403 examples) [67.89s elapsed]
I0109 16:20:13.209319 139984866625344 make_examples_core.py:257] Task 21/30: 12160 candidates (13610 examples) [87.46s elapsed]
I0109 16:20:12.903537 139834169136960 make_examples_core.py:257] Task 18/30: 12074 candidates (13493 examples) [92.29s elapsed]
I0109 16:20:13.043924 140227032713024 make_examples_core.py:257] Task 7/30: 12019 candidates (13377 examples) [72.00s elapsed]
I0109 16:20:17.705439 140425084057408 make_examples_core.py:257] Task 28/30: 12135 candidates (13609 examples) [66.72s elapsed]
I0109 16:20:18.252006 140666116208448 make_examples_core.py:257] Task 26/30: 12176 candidates (13714 examples) [85.22s elapsed]
I0109 16:20:18.082680 140484979402560 make_examples_core.py:257] Task 17/30: 12107 candidates (13276 examples) [91.72s elapsed]
I0109 16:20:17.955071 139770797205312 make_examples_core.py:257] Task 23/30: 12292 candidates (13877 examples) [78.53s elapsed]
I0109 16:20:18.327150 140186593212224 make_examples_core.py:257] Task 29/30: 12110 candidates (13593 examples) [72.14s elapsed]
I0109 16:20:21.195795 140260784252736 make_examples_core.py:257] Task 9/30: 12068 candidates (13351 examples) [86.41s elapsed]
I0109 16:20:33.472454 140432962852672 make_examples_core.py:257] Task 11/30: 12007 candidates (13398 examples) [100.45s elapsed]
I0109 16:20:35.249445 140267877631808 make_examples_core.py:257] Task 19/30: 12084 candidates (13637 examples) [94.98s elapsed]
I0109 16:20:35.597545 140591318640448 make_examples_core.py:257] Task 24/30: 12051 candidates (13509 examples) [61.17s elapsed]
I0109 16:20:36.193683 140075713414976 make_examples_core.py:257] Task 0/30: 14054 candidates (15666 examples) [34.60s elapsed]
I0109 16:20:36.458379 139711390340928 make_examples_core.py:257] Task 15/30: 14103 candidates (15738 examples) [32.55s elapsed]
I0109 16:20:35.970749 140204668430144 make_examples_core.py:257] Task 1/30: 12176 candidates (13743 examples) [82.45s elapsed]
I0109 16:20:37.493148 140144794814272 make_examples_core.py:257] Task 5/30: 12060 candidates (13552 examples) [65.85s elapsed]
I0109 16:20:37.098092 140337654490944 make_examples_core.py:257] Task 16/30: 12118 candidates (13598 examples) [103.30s elapsed]
I0109 16:20:38.283617 140188848478016 make_examples_core.py:257] Task 8/30: 12311 candidates (13875 examples) [90.02s elapsed]
I0109 16:20:38.854081 140514036438848 make_examples_core.py:257] Task 22/30: 14155 candidates (15946 examples) [37.49s elapsed]
I0109 16:20:38.621537 140367169652544 make_examples_core.py:257] Task 13/30: 12190 candidates (13609 examples) [81.86s elapsed]
I0109 16:20:38.478986 140123150317376 make_examples_core.py:257] Task 25/30: 12076 candidates (13432 examples) [66.27s elapsed]
I0109 16:20:39.864099 139938488489792 make_examples_core.py:257] Task 2/30: 14174 candidates (15988 examples) [35.17s elapsed]
I0109 16:20:39.473657 139961776187200 make_examples_core.py:257] Task 12/30: 14149 candidates (15720 examples) [32.60s elapsed]
I0109 16:20:40.375102 140186146633536 make_examples_core.py:257] Task 14/30: 14107 candidates (15779 examples) [31.74s elapsed]
I0109 16:20:40.623063 139849412101952 make_examples_core.py:257] Task 4/30: 12100 candidates (13559 examples) [85.36s elapsed]
I0109 16:20:40.757923 139806051260224 make_examples_core.py:257] Task 3/30: 12143 candidates (13757 examples) [78.00s elapsed]
I0109 16:20:40.626718 140187777787712 make_examples_core.py:257] Task 10/30: 14154 candidates (15826 examples) [35.70s elapsed]
I0109 16:20:43.493549 140404518430528 make_examples_core.py:257] Task 20/30: 14054 candidates (15684 examples) [32.15s elapsed]
I0109 16:20:46.921190 139984866625344 make_examples_core.py:257] Task 21/30: 14181 candidates (15848 examples) [33.71s elapsed]
I0109 16:20:48.184094 139770797205312 make_examples_core.py:257] Task 23/30: 14025 candidates (15799 examples) [30.23s elapsed]
I0109 16:20:47.915307 140669765121856 make_examples_core.py:257] Task 6/30: 14000 candidates (15629 examples) [34.69s elapsed]
I0109 16:20:48.041506 139834169136960 make_examples_core.py:257] Task 18/30: 14098 candidates (15728 examples) [35.14s elapsed]
I0109 16:20:48.683065 140227032713024 make_examples_core.py:257] Task 7/30: 14060 candidates (15708 examples) [35.64s elapsed]
I0109 16:20:50.824498 140186593212224 make_examples_core.py:257] Task 29/30: 14006 candidates (15689 examples) [32.50s elapsed]
I0109 16:20:52.700288 140425084057408 make_examples_core.py:257] Task 28/30: 14121 candidates (15799 examples) [34.99s elapsed]
I0109 16:20:55.373895 140484979402560 make_examples_core.py:257] Task 17/30: 14182 candidates (15551 examples) [37.29s elapsed]
I0109 16:20:56.354203 140424271456064 make_examples_core.py:257] Task 27/30: 14012 candidates (15844 examples) [46.14s elapsed]
I0109 16:20:59.957572 140260784252736 make_examples_core.py:257] Task 9/30: 14150 candidates (15634 examples) [38.76s elapsed]
I0109 16:21:04.217664 140666116208448 make_examples_core.py:257] Task 26/30: 14148 candidates (15886 examples) [45.97s elapsed]
I0109 16:21:08.036621 140075713414976 make_examples_core.py:257] Task 0/30: 16013 candidates (17777 examples) [31.84s elapsed]
I0109 16:21:10.348901 140188848478016 make_examples_core.py:257] Task 8/30: 14019 candidates (15795 examples) [32.06s elapsed]
I0109 16:21:13.411509 140514036438848 make_examples_core.py:257] Task 22/30: 16030 candidates (17964 examples) [34.56s elapsed]
I0109 16:21:14.033834 140337654490944 make_examples_core.py:257] Task 16/30: 14132 candidates (15804 examples) [36.94s elapsed]
I0109 16:21:14.855181 139711390340928 make_examples_core.py:257] Task 15/30: 16140 candidates (18015 examples) [38.40s elapsed]
I0109 16:21:15.100738 139938488489792 make_examples_core.py:257] Task 2/30: 16053 candidates (18114 examples) [35.24s elapsed]
I0109 16:21:14.570689 140367169652544 make_examples_core.py:257] Task 13/30: 14053 candidates (15641 examples) [35.95s elapsed]
I0109 16:21:15.522194 139961776187200 make_examples_core.py:257] Task 12/30: 16068 candidates (17844 examples) [36.05s elapsed]
I0109 16:21:16.186462 140187777787712 make_examples_core.py:257] Task 10/30: 16026 candidates (17915 examples) [35.56s elapsed]
I0109 16:21:15.997470 140591318640448 make_examples_core.py:257] Task 24/30: 14168 candidates (15874 examples) [40.40s elapsed]
I0109 16:21:16.933290 140432962852672 make_examples_core.py:257] Task 11/30: 14107 candidates (15722 examples) [43.46s elapsed]
I0109 16:21:16.829847 140204668430144 make_examples_core.py:257] Task 1/30: 14099 candidates (15886 examples) [40.86s elapsed]
I0109 16:21:17.820118 140267877631808 make_examples_core.py:257] Task 19/30: 14128 candidates (15844 examples) [42.57s elapsed]
I0109 16:21:19.401276 140144794814272 make_examples_core.py:257] Task 5/30: 14099 candidates (15834 examples) [41.91s elapsed]
I0109 16:21:19.195752 140186146633536 make_examples_core.py:257] Task 14/30: 16150 candidates (18094 examples) [38.82s elapsed]
I0109 16:21:19.181930 139849412101952 make_examples_core.py:257] Task 4/30: 14028 candidates (15726 examples) [38.56s elapsed]
I0109 16:21:18.863127 139806051260224 make_examples_core.py:257] Task 3/30: 14186 candidates (16061 examples) [38.10s elapsed]
I0109 16:21:19.729929 140404518430528 make_examples_core.py:257] Task 20/30: 16044 candidates (17858 examples) [36.24s elapsed]
I0109 16:21:22.463462 139984866625344 make_examples_core.py:257] Task 21/30: 16062 candidates (17936 examples) [35.54s elapsed]
I0109 16:21:21.968527 140123150317376 make_examples_core.py:257] Task 25/30: 14114 candidates (15646 examples) [43.49s elapsed]
I0109 16:21:24.617919 140227032713024 make_examples_core.py:257] Task 7/30: 16029 candidates (17854 examples) [35.93s elapsed]
I0109 16:21:25.297441 139834169136960 make_examples_core.py:257] Task 18/30: 16072 candidates (17887 examples) [37.26s elapsed]
I0109 16:21:26.030827 140669765121856 make_examples_core.py:257] Task 6/30: 16205 candidates (18033 examples) [38.12s elapsed]
I0109 16:21:26.738847 140425084057408 make_examples_core.py:257] Task 28/30: 16143 candidates (18004 examples) [34.04s elapsed]
I0109 16:21:28.945821 139770797205312 make_examples_core.py:257] Task 23/30: 16221 candidates (18231 examples) [40.76s elapsed]
I0109 16:21:28.279811 140186593212224 make_examples_core.py:257] Task 29/30: 16089 candidates (17915 examples) [37.45s elapsed]
I0109 16:21:30.361324 140484979402560 make_examples_core.py:257] Task 17/30: 16033 candidates (17636 examples) [34.99s elapsed]
I0109 16:21:35.754104 140424271456064 make_examples_core.py:257] Task 27/30: 16081 candidates (18144 examples) [39.40s elapsed]
I0109 16:21:39.423131 140666116208448 make_examples_core.py:257] Task 26/30: 16107 candidates (18090 examples) [35.21s elapsed]
I0109 16:21:43.895917 140260784252736 make_examples_core.py:257] Task 9/30: 16022 candidates (17713 examples) [43.94s elapsed]
I0109 16:21:44.711063 140075713414976 make_examples_core.py:257] Task 0/30: 18074 candidates (20033 examples) [36.67s elapsed]
I0109 16:21:45.290334 140337654490944 make_examples_core.py:257] Task 16/30: 16047 candidates (17916 examples) [31.26s elapsed]
I0109 16:21:46.883916 140188848478016 make_examples_core.py:257] Task 8/30: 16041 candidates (18052 examples) [36.53s elapsed]
I0109 16:21:50.375047 139711390340928 make_examples_core.py:257] Task 15/30: 18128 candidates (20209 examples) [35.52s elapsed]
I0109 16:21:49.815999 139938488489792 make_examples_core.py:257] Task 2/30: 18060 candidates (20334 examples) [34.71s elapsed]
I0109 16:21:50.337032 140514036438848 make_examples_core.py:257] Task 22/30: 18176 candidates (20358 examples) [36.93s elapsed]
I0109 16:21:50.332545 140591318640448 make_examples_core.py:257] Task 24/30: 16208 candidates (18122 examples) [34.33s elapsed]
I0109 16:21:50.772855 140186146633536 make_examples_core.py:257] Task 14/30: 18030 candidates (20153 examples) [31.58s elapsed]
I0109 16:21:51.450318 139849412101952 make_examples_core.py:257] Task 4/30: 16048 candidates (17882 examples) [32.27s elapsed]
I0109 16:21:51.449001 140367169652544 make_examples_core.py:257] Task 13/30: 16136 candidates (17989 examples) [36.88s elapsed]
I0109 16:21:51.298542 139806051260224 make_examples_core.py:257] Task 3/30: 16100 candidates (18189 examples) [32.44s elapsed]
I0109 16:21:52.185325 140432962852672 make_examples_core.py:257] Task 11/30: 16137 candidates (17998 examples) [35.25s elapsed]
I0109 16:21:54.764627 140404518430528 make_examples_core.py:257] Task 20/30: 18072 candidates (20141 examples) [35.03s elapsed]
I0109 16:21:55.318102 139984866625344 make_examples_core.py:257] Task 21/30: 18013 candidates (20080 examples) [32.85s elapsed]
I0109 16:21:56.808128 140669765121856 make_examples_core.py:257] Task 6/30: 18069 candidates (20061 examples) [30.78s elapsed]
I0109 16:21:56.257153 140204668430144 make_examples_core.py:257] Task 1/30: 16044 candidates (18047 examples) [39.43s elapsed]
I0109 16:21:59.385028 140144794814272 make_examples_core.py:257] Task 5/30: 16092 candidates (18010 examples) [39.98s elapsed]
I0109 16:22:00.962878 140267877631808 make_examples_core.py:257] Task 19/30: 16120 candidates (18074 examples) [43.14s elapsed]
I0109 16:22:00.777150 140425084057408 make_examples_core.py:257] Task 28/30: 18117 candidates (20178 examples) [34.04s elapsed]
I0109 16:22:00.262374 140186593212224 make_examples_core.py:257] Task 29/30: 18056 candidates (20069 examples) [31.98s elapsed]
I0109 16:22:00.664301 140187777787712 make_examples_core.py:257] Task 10/30: 18006 candidates (20134 examples) [44.48s elapsed]
I0109 16:22:01.266839 139770797205312 make_examples_core.py:257] Task 23/30: 18109 candidates (20299 examples) [32.32s elapsed]
I0109 16:22:01.491363 140227032713024 make_examples_core.py:257] Task 7/30: 18288 candidates (20351 examples) [36.87s elapsed]
I0109 16:22:02.544161 139961776187200 make_examples_core.py:257] Task 12/30: 18113 candidates (20123 examples) [47.02s elapsed]
I0109 16:22:02.179989 139834169136960 make_examples_core.py:257] Task 18/30: 18173 candidates (20192 examples) [36.88s elapsed]
I0109 16:22:04.371855 140123150317376 make_examples_core.py:257] Task 25/30: 16140 candidates (17912 examples) [42.40s elapsed]
I0109 16:22:06.482370 140484979402560 make_examples_core.py:257] Task 17/30: 18231 candidates (20043 examples) [36.12s elapsed]
I0109 16:22:12.516461 140424271456064 make_examples_core.py:257] Task 27/30: 18189 candidates (20607 examples) [36.76s elapsed]
I0109 16:22:14.871560 140666116208448 make_examples_core.py:257] Task 26/30: 18158 candidates (20356 examples) [35.45s elapsed]
I0109 16:22:18.303793 140337654490944 make_examples_core.py:257] Task 16/30: 18023 candidates (20056 examples) [33.01s elapsed]
I0109 16:22:22.180065 140075713414976 make_examples_core.py:257] Task 0/30: 20125 candidates (22289 examples) [37.47s elapsed]
I0109 16:22:22.326307 140514036438848 make_examples_core.py:257] Task 22/30: 20014 candidates (22324 examples) [31.99s elapsed]
I0109 16:22:22.858371 139711390340928 make_examples_core.py:257] Task 15/30: 20171 candidates (22412 examples) [32.48s elapsed]
I0109 16:22:22.980896 140186146633536 make_examples_core.py:257] Task 14/30: 20002 candidates (22315 examples) [32.21s elapsed]
I0109 16:22:23.711329 140188848478016 make_examples_core.py:257] Task 8/30: 18183 candidates (20403 examples) [36.83s elapsed]
I0109 16:22:24.366023 140432962852672 make_examples_core.py:257] Task 11/30: 18042 candidates (20095 examples) [32.18s elapsed]
I0109 16:22:24.649672 139938488489792 make_examples_core.py:257] Task 2/30: 20253 candidates (22757 examples) [34.83s elapsed]
I0109 16:22:25.626371 140367169652544 make_examples_core.py:257] Task 13/30: 18098 candidates (20147 examples) [34.18s elapsed]
I0109 16:22:24.770942 140591318640448 make_examples_core.py:257] Task 24/30: 18123 candidates (20307 examples) [34.44s elapsed]
I0109 16:22:26.141175 140260784252736 make_examples_core.py:257] Task 9/30: 18078 candidates (19951 examples) [42.24s elapsed]
I0109 16:22:26.556777 139849412101952 make_examples_core.py:257] Task 4/30: 18120 candidates (20139 examples) [35.11s elapsed]
I0109 16:22:27.562173 139806051260224 make_examples_core.py:257] Task 3/30: 18145 candidates (20438 examples) [36.26s elapsed]
I0109 16:22:32.412214 140204668430144 make_examples_core.py:257] Task 1/30: 18004 candidates (20203 examples) [36.15s elapsed]
I0109 16:22:33.198909 140669765121856 make_examples_core.py:257] Task 6/30: 20128 candidates (22285 examples) [36.39s elapsed]
I0109 16:22:33.728026 140404518430528 make_examples_core.py:257] Task 20/30: 20096 candidates (22395 examples) [38.96s elapsed]
I0109 16:22:34.500230 139984866625344 make_examples_core.py:257] Task 21/30: 20177 candidates (22466 examples) [39.18s elapsed]
I0109 16:22:36.868821 140425084057408 make_examples_core.py:257] Task 28/30: 20047 candidates (22352 examples) [36.09s elapsed]
I0109 16:22:38.026106 140186593212224 make_examples_core.py:257] Task 29/30: 20137 candidates (22448 examples) [37.76s elapsed]
I0109 16:22:37.539596 140227032713024 make_examples_core.py:257] Task 7/30: 20159 candidates (22409 examples) [36.05s elapsed]
I0109 16:22:39.137009 139770797205312 make_examples_core.py:257] Task 23/30: 20084 candidates (22459 examples) [37.87s elapsed]
I0109 16:22:39.951511 140144794814272 make_examples_core.py:257] Task 5/30: 18108 candidates (20243 examples) [40.57s elapsed]
I0109 16:22:41.873388 140514036438848 make_examples_core.py:257] Task 22/30: Writing example info to /tmp/tmp797co85g/make_examples.tfrecord-00022-of-00030.gz.example_info.json
I0109 16:22:41.873685 140514036438848 make_examples_core.py:2273] example_shape = [100, 199, 9]
I0109 16:22:41.873762 140514036438848 make_examples_core.py:2274] example_channels = [1, 2, 3, 4, 5, 6, 7, 9, 10]
I0109 16:22:41.874522 140514036438848 make_examples_core.py:257] Task 22/30: Found 21007 candidate variants
I0109 16:22:41.874597 140514036438848 make_examples_core.py:257] Task 22/30: Created 23431 examples
I0109 16:22:44.307979 140123150317376 make_examples_core.py:257] Task 25/30: 18015 candidates (20001 examples) [39.94s elapsed]
I0109 16:22:46.228494 139711390340928 make_examples_core.py:257] Task 15/30: Writing example info to /tmp/tmp797co85g/make_examples.tfrecord-00015-of-00030.gz.example_info.json
I0109 16:22:46.228857 139711390340928 make_examples_core.py:2273] example_shape = [100, 199, 9]
I0109 16:22:46.228957 139711390340928 make_examples_core.py:2274] example_channels = [1, 2, 3, 4, 5, 6, 7, 9, 10]
I0109 16:22:46.229799 139711390340928 make_examples_core.py:257] Task 15/30: Found 21392 candidate variants
I0109 16:22:46.229888 139711390340928 make_examples_core.py:257] Task 15/30: Created 23773 examples
I0109 16:22:45.979114 139834169136960 make_examples_core.py:257] Task 18/30: 20246 candidates (22508 examples) [43.80s elapsed]
I0109 16:22:47.190136 140666116208448 make_examples_core.py:257] Task 26/30: 20020 candidates (22377 examples) [32.32s elapsed]
I0109 16:22:47.888317 140267877631808 make_examples_core.py:257] Task 19/30: 18103 candidates (20212 examples) [46.92s elapsed]
I0109 16:22:51.140946 139961776187200 make_examples_core.py:257] Task 12/30: 20119 candidates (22265 examples) [48.60s elapsed]
I0109 16:22:56.150784 140484979402560 make_examples_core.py:257] Task 17/30: 20024 candidates (22028 examples) [49.67s elapsed]
I0109 16:22:57.021211 140424271456064 make_examples_core.py:257] Task 27/30: 20269 candidates (22841 examples) [44.50s elapsed]
I0109 16:22:58.152906 140187777787712 make_examples_core.py:257] Task 10/30: 20180 candidates (22502 examples) [57.49s elapsed]
I0109 16:22:59.396463 140669765121856 make_examples_core.py:257] Task 6/30: Writing example info to /tmp/tmp797co85g/make_examples.tfrecord-00006-of-00030.gz.example_info.json
I0109 16:22:59.396698 140669765121856 make_examples_core.py:2273] example_shape = [100, 199, 9]
I0109 16:22:59.396751 140669765121856 make_examples_core.py:2274] example_channels = [1, 2, 3, 4, 5, 6, 7, 9, 10]
I0109 16:22:59.397315 140669765121856 make_examples_core.py:257] Task 6/30: Found 20993 candidate variants
I0109 16:22:59.397381 140669765121856 make_examples_core.py:257] Task 6/30: Created 23229 examples
I0109 16:23:02.135688 140075713414976 make_examples_core.py:257] Task 0/30: Writing example info to /tmp/tmp797co85g/make_examples.tfrecord-00000-of-00030.gz.example_info.json
I0109 16:23:02.135898 140075713414976 make_examples_core.py:2273] example_shape = [100, 199, 9]
I0109 16:23:02.135951 140075713414976 make_examples_core.py:2274] example_channels = [1, 2, 3, 4, 5, 6, 7, 9, 10]
I0109 16:23:02.136447 140075713414976 make_examples_core.py:257] Task 0/30: Found 21771 candidate variants
I0109 16:23:02.136502 140075713414976 make_examples_core.py:257] Task 0/30: Created 24077 examples
I0109 16:23:02.736130 140186146633536 make_examples_core.py:257] Task 14/30: Writing example info to /tmp/tmp797co85g/make_examples.tfrecord-00014-of-00030.gz.example_info.json
I0109 16:23:02.736345 140186146633536 make_examples_core.py:2273] example_shape = [100, 199, 9]
I0109 16:23:02.736399 140186146633536 make_examples_core.py:2274] example_channels = [1, 2, 3, 4, 5, 6, 7, 9, 10]
I0109 16:23:02.736951 140186146633536 make_examples_core.py:257] Task 14/30: Found 21531 candidate variants
I0109 16:23:02.737016 140186146633536 make_examples_core.py:257] Task 14/30: Created 24035 examples
I0109 16:23:05.932800 140186593212224 make_examples_core.py:257] Task 29/30: Writing example info to /tmp/tmp797co85g/make_examples.tfrecord-00029-of-00030.gz.example_info.json
I0109 16:23:05.933021 140186593212224 make_examples_core.py:2273] example_shape = [100, 199, 9]
I0109 16:23:05.933078 140186593212224 make_examples_core.py:2274] example_channels = [1, 2, 3, 4, 5, 6, 7, 9, 10]
I0109 16:23:05.933624 140186593212224 make_examples_core.py:257] Task 29/30: Found 21164 candidate variants
I0109 16:23:05.933682 140186593212224 make_examples_core.py:257] Task 29/30: Created 23624 examples
I0109 16:23:06.699817 140337654490944 make_examples_core.py:257] Task 16/30: 20029 candidates (22250 examples) [48.40s elapsed]
I0109 16:23:06.956054 139938488489792 make_examples_core.py:257] Task 2/30: Writing example info to /tmp/tmp797co85g/make_examples.tfrecord-00002-of-00030.gz.example_info.json
I0109 16:23:06.956258 139938488489792 make_examples_core.py:2273] example_shape = [100, 199, 9]
I0109 16:23:06.956310 139938488489792 make_examples_core.py:2274] example_channels = [1, 2, 3, 4, 5, 6, 7, 9, 10]
I0109 16:23:06.956820 139938488489792 make_examples_core.py:257] Task 2/30: Found 21885 candidate variants
I0109 16:23:06.956880 139938488489792 make_examples_core.py:257] Task 2/30: Created 24553 examples
I0109 16:23:08.166881 140227032713024 make_examples_core.py:257] Task 7/30: Writing example info to /tmp/tmp797co85g/make_examples.tfrecord-00007-of-00030.gz.example_info.json
I0109 16:23:08.167086 140227032713024 make_examples_core.py:2273] example_shape = [100, 199, 9]
I0109 16:23:08.167139 140227032713024 make_examples_core.py:2274] example_channels = [1, 2, 3, 4, 5, 6, 7, 9, 10]
I0109 16:23:08.167700 140227032713024 make_examples_core.py:257] Task 7/30: Found 21360 candidate variants
I0109 16:23:08.167763 140227032713024 make_examples_core.py:257] Task 7/30: Created 23737 examples
I0109 16:23:09.332226 140424271456064 make_examples_core.py:257] Task 27/30: Writing example info to /tmp/tmp797co85g/make_examples.tfrecord-00027-of-00030.gz.example_info.json
I0109 16:23:09.332472 140424271456064 make_examples_core.py:2273] example_shape = [100, 199, 9]
I0109 16:23:09.332527 140424271456064 make_examples_core.py:2274] example_channels = [1, 2, 3, 4, 5, 6, 7, 9, 10]
I0109 16:23:09.333080 140424271456064 make_examples_core.py:257] Task 27/30: Found 21071 candidate variants
I0109 16:23:09.333136 140424271456064 make_examples_core.py:257] Task 27/30: Created 23761 examples
I0109 16:23:10.095303 140425084057408 make_examples_core.py:257] Task 28/30: Writing example info to /tmp/tmp797co85g/make_examples.tfrecord-00028-of-00030.gz.example_info.json
I0109 16:23:10.095535 140425084057408 make_examples_core.py:2273] example_shape = [100, 199, 9]
I0109 16:23:10.095598 140425084057408 make_examples_core.py:2274] example_channels = [1, 2, 3, 4, 5, 6, 7, 9, 10]
I0109 16:23:10.096158 140425084057408 make_examples_core.py:257] Task 28/30: Found 21358 candidate variants
I0109 16:23:10.096222 140425084057408 make_examples_core.py:257] Task 28/30: Created 23850 examples
I0109 16:23:10.342591 140591318640448 make_examples_core.py:257] Task 24/30: 20016 candidates (22396 examples) [45.57s elapsed]
I0109 16:23:11.048742 140432962852672 make_examples_core.py:257] Task 11/30: 20097 candidates (22325 examples) [46.68s elapsed]
I0109 16:23:11.271919 140404518430528 make_examples_core.py:257] Task 20/30: Writing example info to /tmp/tmp797co85g/make_examples.tfrecord-00020-of-00030.gz.example_info.json
I0109 16:23:11.272141 140404518430528 make_examples_core.py:2273] example_shape = [100, 199, 9]
I0109 16:23:11.272196 140404518430528 make_examples_core.py:2274] example_channels = [1, 2, 3, 4, 5, 6, 7, 9, 10]
I0109 16:23:11.272758 140404518430528 make_examples_core.py:257] Task 20/30: Found 21643 candidate variants
I0109 16:23:11.272814 140404518430528 make_examples_core.py:257] Task 20/30: Created 24135 examples
I0109 16:23:11.523673 140188848478016 make_examples_core.py:257] Task 8/30: 20134 candidates (22572 examples) [47.81s elapsed]
I0109 16:23:12.150538 139849412101952 make_examples_core.py:257] Task 4/30: 20103 candidates (22306 examples) [45.59s elapsed]
I0109 16:23:12.294952 139984866625344 make_examples_core.py:257] Task 21/30: Writing example info to /tmp/tmp797co85g/make_examples.tfrecord-00021-of-00030.gz.example_info.json
I0109 16:23:12.295165 139984866625344 make_examples_core.py:2273] example_shape = [100, 199, 9]
I0109 16:23:12.295217 139984866625344 make_examples_core.py:2274] example_channels = [1, 2, 3, 4, 5, 6, 7, 9, 10]
I0109 16:23:12.295728 139984866625344 make_examples_core.py:257] Task 21/30: Found 21715 candidate variants
I0109 16:23:12.295781 139984866625344 make_examples_core.py:257] Task 21/30: Created 24208 examples
I0109 16:23:12.845777 139770797205312 make_examples_core.py:257] Task 23/30: Writing example info to /tmp/tmp797co85g/make_examples.tfrecord-00023-of-00030.gz.example_info.json
I0109 16:23:12.846002 139770797205312 make_examples_core.py:2273] example_shape = [100, 199, 9]
I0109 16:23:12.846055 139770797205312 make_examples_core.py:2274] example_channels = [1, 2, 3, 4, 5, 6, 7, 9, 10]
I0109 16:23:12.846585 139770797205312 make_examples_core.py:257] Task 23/30: Found 21243 candidate variants
I0109 16:23:12.846651 139770797205312 make_examples_core.py:257] Task 23/30: Created 23709 examples
I0109 16:23:14.160319 140367169652544 make_examples_core.py:257] Task 13/30: 20230 candidates (22457 examples) [48.53s elapsed]
I0109 16:23:14.789154 139806051260224 make_examples_core.py:257] Task 3/30: 20066 candidates (22545 examples) [47.23s elapsed]
I0109 16:23:15.131096 140260784252736 make_examples_core.py:257] Task 9/30: 20088 candidates (22158 examples) [48.99s elapsed]
I0109 16:23:15.558249 139834169136960 make_examples_core.py:257] Task 18/30: Writing example info to /tmp/tmp797co85g/make_examples.tfrecord-00018-of-00030.gz.example_info.json
I0109 16:23:15.558479 139834169136960 make_examples_core.py:2273] example_shape = [100, 199, 9]
I0109 16:23:15.558537 139834169136960 make_examples_core.py:2274] example_channels = [1, 2, 3, 4, 5, 6, 7, 9, 10]
I0109 16:23:15.559136 139834169136960 make_examples_core.py:257] Task 18/30: Found 21560 candidate variants
I0109 16:23:15.559190 139834169136960 make_examples_core.py:257] Task 18/30: Created 24028 examples
I0109 16:23:16.592615 140591318640448 make_examples_core.py:257] Task 24/30: Writing example info to /tmp/tmp797co85g/make_examples.tfrecord-00024-of-00030.gz.example_info.json
I0109 16:23:16.592839 140591318640448 make_examples_core.py:2273] example_shape = [100, 199, 9]
I0109 16:23:16.592898 140591318640448 make_examples_core.py:2274] example_channels = [1, 2, 3, 4, 5, 6, 7, 9, 10]
I0109 16:23:16.593422 140591318640448 make_examples_core.py:257] Task 24/30: Found 20429 candidate variants
I0109 16:23:16.593476 140591318640448 make_examples_core.py:257] Task 24/30: Created 22886 examples
I0109 16:23:17.666871 139961776187200 make_examples_core.py:257] Task 12/30: Writing example info to /tmp/tmp797co85g/make_examples.tfrecord-00012-of-00030.gz.example_info.json
I0109 16:23:17.667086 139961776187200 make_examples_core.py:2273] example_shape = [100, 199, 9]
I0109 16:23:17.667137 139961776187200 make_examples_core.py:2274] example_channels = [1, 2, 3, 4, 5, 6, 7, 9, 10]
I0109 16:23:17.667681 139961776187200 make_examples_core.py:257] Task 12/30: Found 21591 candidate variants
I0109 16:23:17.667735 139961776187200 make_examples_core.py:257] Task 12/30: Created 23859 examples
I0109 16:23:19.643133 140204668430144 make_examples_core.py:257] Task 1/30: 20078 candidates (22484 examples) [47.23s elapsed]
I0109 16:23:23.937389 140187777787712 make_examples_core.py:257] Task 10/30: Writing example info to /tmp/tmp797co85g/make_examples.tfrecord-00010-of-00030.gz.example_info.json
I0109 16:23:23.937611 140187777787712 make_examples_core.py:2273] example_shape = [100, 199, 9]
I0109 16:23:23.937664 140187777787712 make_examples_core.py:2274] example_channels = [1, 2, 3, 4, 5, 6, 7, 9, 10]
I0109 16:23:23.938191 140187777787712 make_examples_core.py:257] Task 10/30: Found 21827 candidate variants
I0109 16:23:23.938244 140187777787712 make_examples_core.py:257] Task 10/30: Created 24288 examples
I0109 16:23:24.501233 140666116208448 make_examples_core.py:257] Task 26/30: Writing example info to /tmp/tmp797co85g/make_examples.tfrecord-00026-of-00030.gz.example_info.json
I0109 16:23:24.501448 140666116208448 make_examples_core.py:2273] example_shape = [100, 199, 9]
I0109 16:23:24.501502 140666116208448 make_examples_core.py:2274] example_channels = [1, 2, 3, 4, 5, 6, 7, 9, 10]
I0109 16:23:24.502023 140666116208448 make_examples_core.py:257] Task 26/30: Found 21947 candidate variants
I0109 16:23:24.502079 140666116208448 make_examples_core.py:257] Task 26/30: Created 24519 examples
I0109 16:23:24.246087 140144794814272 make_examples_core.py:257] Task 5/30: 20006 candidates (22367 examples) [44.29s elapsed]
I0109 16:23:29.456245 140188848478016 make_examples_core.py:257] Task 8/30: Writing example info to /tmp/tmp797co85g/make_examples.tfrecord-00008-of-00030.gz.example_info.json
I0109 16:23:29.456468 140188848478016 make_examples_core.py:2273] example_shape = [100, 199, 9]
I0109 16:23:29.456525 140188848478016 make_examples_core.py:2274] example_channels = [1, 2, 3, 4, 5, 6, 7, 9, 10]
I0109 16:23:29.457043 140188848478016 make_examples_core.py:257] Task 8/30: Found 21259 candidate variants
I0109 16:23:29.457095 140188848478016 make_examples_core.py:257] Task 8/30: Created 23803 examples
I0109 16:23:29.181728 139849412101952 make_examples_core.py:257] Task 4/30: Writing example info to /tmp/tmp797co85g/make_examples.tfrecord-00004-of-00030.gz.example_info.json
I0109 16:23:29.181911 139849412101952 make_examples_core.py:2273] example_shape = [100, 199, 9]
I0109 16:23:29.181959 139849412101952 make_examples_core.py:2274] example_channels = [1, 2, 3, 4, 5, 6, 7, 9, 10]
I0109 16:23:29.182420 139849412101952 make_examples_core.py:257] Task 4/30: Found 21203 candidate variants
I0109 16:23:29.182470 139849412101952 make_examples_core.py:257] Task 4/30: Created 23523 examples
I0109 16:23:29.844950 139806051260224 make_examples_core.py:257] Task 3/30: Writing example info to /tmp/tmp797co85g/make_examples.tfrecord-00003-of-00030.gz.example_info.json
I0109 16:23:29.845175 139806051260224 make_examples_core.py:2273] example_shape = [100, 199, 9]
I0109 16:23:29.845227 139806051260224 make_examples_core.py:2274] example_channels = [1, 2, 3, 4, 5, 6, 7, 9, 10]
I0109 16:23:29.845842 139806051260224 make_examples_core.py:257] Task 3/30: Found 21001 candidate variants
I0109 16:23:29.845895 139806051260224 make_examples_core.py:257] Task 3/30: Created 23570 examples
I0109 16:23:31.333294 140484979402560 make_examples_core.py:257] Task 17/30: 22175 candidates (24480 examples) [35.18s elapsed]
I0109 16:23:31.339616 140484979402560 make_examples_core.py:257] Task 17/30: Writing example info to /tmp/tmp797co85g/make_examples.tfrecord-00017-of-00030.gz.example_info.json
I0109 16:23:31.339721 140484979402560 make_examples_core.py:2273] example_shape = [100, 199, 9]
I0109 16:23:31.339770 140484979402560 make_examples_core.py:2274] example_channels = [1, 2, 3, 4, 5, 6, 7, 9, 10]
I0109 16:23:31.340243 140484979402560 make_examples_core.py:257] Task 17/30: Found 22175 candidate variants
I0109 16:23:31.340297 140484979402560 make_examples_core.py:257] Task 17/30: Created 24480 examples
I0109 16:23:31.520944 140123150317376 make_examples_core.py:257] Task 25/30: 20069 candidates (22215 examples) [47.21s elapsed]
I0109 16:23:34.105011 140367169652544 make_examples_core.py:257] Task 13/30: Writing example info to /tmp/tmp797co85g/make_examples.tfrecord-00013-of-00030.gz.example_info.json
I0109 16:23:34.105249 140367169652544 make_examples_core.py:2273] example_shape = [100, 199, 9]
I0109 16:23:34.105308 140367169652544 make_examples_core.py:2274] example_channels = [1, 2, 3, 4, 5, 6, 7, 9, 10]
I0109 16:23:34.105922 140367169652544 make_examples_core.py:257] Task 13/30: Found 21328 candidate variants
I0109 16:23:34.105982 140367169652544 make_examples_core.py:257] Task 13/30: Created 23708 examples
I0109 16:23:34.884137 140267877631808 make_examples_core.py:257] Task 19/30: 20031 candidates (22336 examples) [47.00s elapsed]
I0109 16:23:35.748167 140260784252736 make_examples_core.py:257] Task 9/30: Writing example info to /tmp/tmp797co85g/make_examples.tfrecord-00009-of-00030.gz.example_info.json
I0109 16:23:35.748375 140260784252736 make_examples_core.py:2273] example_shape = [100, 199, 9]
I0109 16:23:35.748438 140260784252736 make_examples_core.py:2274] example_channels = [1, 2, 3, 4, 5, 6, 7, 9, 10]
I0109 16:23:35.749065 140260784252736 make_examples_core.py:257] Task 9/30: Found 21198 candidate variants
I0109 16:23:35.749134 140260784252736 make_examples_core.py:257] Task 9/30: Created 23339 examples
I0109 16:23:37.464712 140337654490944 make_examples_core.py:257] Task 16/30: 22038 candidates (24429 examples) [30.76s elapsed]
I0109 16:23:38.093711 140144794814272 make_examples_core.py:257] Task 5/30: Writing example info to /tmp/tmp797co85g/make_examples.tfrecord-00005-of-00030.gz.example_info.json
I0109 16:23:38.093941 140144794814272 make_examples_core.py:2273] example_shape = [100, 199, 9]
I0109 16:23:38.094010 140144794814272 make_examples_core.py:2274] example_channels = [1, 2, 3, 4, 5, 6, 7, 9, 10]
I0109 16:23:38.094642 140144794814272 make_examples_core.py:257] Task 5/30: Found 20775 candidate variants
I0109 16:23:38.094712 140144794814272 make_examples_core.py:257] Task 5/30: Created 23196 examples
I0109 16:23:40.085231 140432962852672 make_examples_core.py:257] Task 11/30: 22180 candidates (24594 examples) [29.04s elapsed]
I0109 16:23:40.090689 140432962852672 make_examples_core.py:257] Task 11/30: Writing example info to /tmp/tmp797co85g/make_examples.tfrecord-00011-of-00030.gz.example_info.json
I0109 16:23:40.090776 140432962852672 make_examples_core.py:2273] example_shape = [100, 199, 9]
I0109 16:23:40.090829 140432962852672 make_examples_core.py:2274] example_channels = [1, 2, 3, 4, 5, 6, 7, 9, 10]
I0109 16:23:40.091375 140432962852672 make_examples_core.py:257] Task 11/30: Found 22180 candidate variants
I0109 16:23:40.091429 140432962852672 make_examples_core.py:257] Task 11/30: Created 24594 examples
I0109 16:23:47.429489 140337654490944 make_examples_core.py:257] Task 16/30: Writing example info to /tmp/tmp797co85g/make_examples.tfrecord-00016-of-00030.gz.example_info.json
I0109 16:23:47.429703 140337654490944 make_examples_core.py:2273] example_shape = [100, 199, 9]
I0109 16:23:47.429757 140337654490944 make_examples_core.py:2274] example_channels = [1, 2, 3, 4, 5, 6, 7, 9, 10]
I0109 16:23:47.430283 140337654490944 make_examples_core.py:257] Task 16/30: Found 22741 candidate variants
I0109 16:23:47.430340 140337654490944 make_examples_core.py:257] Task 16/30: Created 25282 examples
I0109 16:23:48.358723 140204668430144 make_examples_core.py:257] Task 1/30: Writing example info to /tmp/tmp797co85g/make_examples.tfrecord-00001-of-00030.gz.example_info.json
I0109 16:23:48.358906 140204668430144 make_examples_core.py:2273] example_shape = [100, 199, 9]
I0109 16:23:48.358959 140204668430144 make_examples_core.py:2274] example_channels = [1, 2, 3, 4, 5, 6, 7, 9, 10]
I0109 16:23:48.359417 140204668430144 make_examples_core.py:257] Task 1/30: Found 21507 candidate variants
I0109 16:23:48.359482 140204668430144 make_examples_core.py:257] Task 1/30: Created 24059 examples
I0109 16:23:49.791456 140123150317376 make_examples_core.py:257] Task 25/30: Writing example info to /tmp/tmp797co85g/make_examples.tfrecord-00025-of-00030.gz.example_info.json
I0109 16:23:49.791648 140123150317376 make_examples_core.py:2273] example_shape = [100, 199, 9]
I0109 16:23:49.791706 140123150317376 make_examples_core.py:2274] example_channels = [1, 2, 3, 4, 5, 6, 7, 9, 10]
I0109 16:23:49.792210 140123150317376 make_examples_core.py:257] Task 25/30: Found 20923 candidate variants
I0109 16:23:49.792270 140123150317376 make_examples_core.py:257] Task 25/30: Created 23156 examples
I0109 16:23:56.116433 140267877631808 make_examples_core.py:257] Task 19/30: Writing example info to /tmp/tmp797co85g/make_examples.tfrecord-00019-of-00030.gz.example_info.json
I0109 16:23:56.116703 140267877631808 make_examples_core.py:2273] example_shape = [100, 199, 9]
I0109 16:23:56.116775 140267877631808 make_examples_core.py:2274] example_channels = [1, 2, 3, 4, 5, 6, 7, 9, 10]
I0109 16:23:56.117376 140267877631808 make_examples_core.py:257] Task 19/30: Found 21218 candidate variants
I0109 16:23:56.117449 140267877631808 make_examples_core.py:257] Task 19/30: Created 23641 examples

real	8m46.650s
user	231m19.696s
sys	1m22.183s

***** Running the command:*****
time /opt/deepvariant/bin/call_variants --outfile "/tmp/tmp797co85g/call_variants_output.tfrecord.gz" --examples "/tmp/tmp797co85g/make_examples.tfrecord@30.gz" --checkpoint "/opt/models/ont_r104/model.ckpt"

2025-01-09 16:23:57.633645: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
I0109 16:23:59.890071 139707584423744 call_variants.py:317] From /tmp/tmp797co85g/make_examples.tfrecord-00000-of-00030.gz.example_info.json: Shape of input examples: [100, 199, 9], Channels of input examples: [1, 2, 3, 4, 5, 6, 7, 9, 10].
I0109 16:23:59.941554 139707584423744 call_variants.py:317] From /opt/models/ont_r104/model.ckpt.example_info.json: Shape of input examples: [100, 199, 9], Channels of input examples: [1, 2, 3, 4, 5, 6, 7, 9, 10].
2025-01-09 16:23:59.944687: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2025-01-09 16:23:59.970266: I tensorflow/core/common_runtime/process_util.cc:146] Creating new thread pool with default inter op setting: 256. Tune using inter_op_parallelism_threads for best performance.
2025-01-09 16:24:00.045184: I tensorflow/compiler/mlir/mlir_graph_optimization_pass.cc:357] MLIR V1 optimization pass is not enabled
WARNING:tensorflow:Using temporary folder as model directory: /tmp/tmpsyte9g_e
W0109 16:24:00.429855 139707584423744 estimator.py:1864] Using temporary folder as model directory: /tmp/tmpsyte9g_e
INFO:tensorflow:Using config: {'_model_dir': '/tmp/tmpsyte9g_e', '_tf_random_seed': None, '_save_summary_steps': 100, '_save_checkpoints_steps': None, '_save_checkpoints_secs': 600, '_session_config': , '_keep_checkpoint_max': 100000, '_keep_checkpoint_every_n_hours': 10000, '_log_step_count_steps': 100, '_train_distribute': None, '_device_fn': None, '_protocol': None, '_eval_distribute': None, '_experimental_distribute': None, '_experimental_max_worker_delay_secs': None, '_session_creation_timeout_secs': 7200, '_checkpoint_save_graph_def': True, '_service': None, '_cluster_spec': ClusterSpec({}), '_task_type': 'worker', '_task_id': 0, '_global_id_in_cluster': 0, '_master': '', '_evaluation_master': '', '_is_chief': True, '_num_ps_replicas': 0, '_num_worker_replicas': 1}
I0109 16:24:00.430683 139707584423744 estimator.py:202] Using config: {'_model_dir': '/tmp/tmpsyte9g_e', '_tf_random_seed': None, '_save_summary_steps': 100, '_save_checkpoints_steps': None, '_save_checkpoints_secs': 600, '_session_config': , '_keep_checkpoint_max': 100000, '_keep_checkpoint_every_n_hours': 10000, '_log_step_count_steps': 100, '_train_distribute': None, '_device_fn': None, '_protocol': None, '_eval_distribute': None, '_experimental_distribute': None, '_experimental_max_worker_delay_secs': None, '_session_creation_timeout_secs': 7200, '_checkpoint_save_graph_def': True, '_service': None, '_cluster_spec': ClusterSpec({}), '_task_type': 'worker', '_task_id': 0, '_global_id_in_cluster': 0, '_master': '', '_evaluation_master': '', '_is_chief': True, '_num_ps_replicas': 0, '_num_worker_replicas': 1}
I0109 16:24:00.431193 139707584423744 call_variants.py:446] Writing calls to /tmp/tmp797co85g/call_variants_output.tfrecord.gz
INFO:tensorflow:Calling model_fn.
I0109 16:24:00.847439 139707584423744 estimator.py:1173] Calling model_fn.
/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer_v1.py:1694: UserWarning: `layer.apply` is deprecated and will be removed in a future version. Please use `layer.__call__` method instead.
  warnings.warn('`layer.apply` is deprecated and '
INFO:tensorflow:Done calling model_fn.
I0109 16:24:06.402294 139707584423744 estimator.py:1175] Done calling model_fn.
2025-01-09 16:24:07.241776: I tensorflow/core/common_runtime/process_util.cc:146] Creating new thread pool with default inter op setting: 256. Tune using inter_op_parallelism_threads for best performance.
INFO:tensorflow:Graph was finalized.
I0109 16:24:07.571633 139707584423744 monitored_session.py:240] Graph was finalized.
INFO:tensorflow:Restoring parameters from /opt/models/ont_r104/model.ckpt
I0109 16:24:07.572272 139707584423744 saver.py:1410] Restoring parameters from /opt/models/ont_r104/model.ckpt
INFO:tensorflow:Running local_init_op.
I0109 16:24:11.935181 139707584423744 session_manager.py:526] Running local_init_op.
INFO:tensorflow:Done running local_init_op.
I0109 16:24:12.008544 139707584423744 session_manager.py:529] Done running local_init_op.
INFO:tensorflow:Reloading EMA...
I0109 16:24:12.585146 139707584423744 modeling.py:418] Reloading EMA...
INFO:tensorflow:Restoring parameters from /opt/models/ont_r104/model.ckpt
I0109 16:24:12.585759 139707584423744 saver.py:1410] Restoring parameters from /opt/models/ont_r104/model.ckpt
I0109 16:24:29.014329 139707584423744 call_variants.py:462] Processed 1 examples in 1 batches [2858.267 sec per 100]
I0109 16:44:15.725349 139707584423744 call_variants.py:462] Processed 50001 examples in 98 batches [2.431 sec per 100]
I0109 17:05:44.404405 139707584423744 call_variants.py:462] Processed 100001 examples in 196 batches [2.504 sec per 100]
I0109 17:28:19.443160 139707584423744 call_variants.py:462] Processed 150001 examples in 293 batches [2.573 sec per 100]
I0109 17:51:17.550983 139707584423744 call_variants.py:462] Processed 200001 examples in 391 batches [2.619 sec per 100]
I0109 18:13:38.458277 139707584423744 call_variants.py:462] Processed 250001 examples in 489 batches [2.631 sec per 100]
I0109 18:37:27.622788 139707584423744 call_variants.py:462] Processed 300001 examples in 586 batches [2.669 sec per 100]
I0109 19:01:02.136839 139707584423744 call_variants.py:462] Processed 350001 examples in 684 batches [2.692 sec per 100]
I0109 19:24:00.437291 139707584423744 call_variants.py:462] Processed 400001 examples in 782 batches [2.700 sec per 100]
I0109 19:46:43.093622 139707584423744 call_variants.py:462] Processed 450001 examples in 879 batches [2.703 sec per 100]
I0109 20:09:26.069742 139707584423744 call_variants.py:462] Processed 500001 examples in 977 batches [2.705 sec per 100]
I0109 20:31:27.071231 139707584423744 call_variants.py:462] Processed 550001 examples in 1075 batches [2.699 sec per 100]
I0109 20:52:56.499736 139707584423744 call_variants.py:462] Processed 600001 examples in 1172 batches [2.689 sec per 100]
I0109 21:16:11.973641 139707584423744 call_variants.py:462] Processed 650001 examples in 1270 batches [2.697 sec per 100]
I0109 21:38:51.738098 139707584423744 call_variants.py:462] Processed 700001 examples in 1368 batches [2.699 sec per 100]
I0109 21:46:00.928066 139707584423744 call_variants.py:468] Processed 716053 examples in 1399 batches [2.698 sec per 100]
I0109 21:46:00.928341 139707584423744 call_variants.py:471] Done calling variants from a total of 716053 examples.

real	322m5.078s
user	515m22.657s
sys	17m10.479s

***** Running the command:*****
time /opt/deepvariant/bin/postprocess_variants --ref "/home/MRHannahMacpherson/MinaRyten/Emil/references/GRCh38.primary_assembly.genome.fa" --infile "/tmp/tmp797co85g/call_variants_output.tfrecord.gz" --outfile "deepvariant/A53T_828_21.12_SW_Barcode02_laser_DNA.vcf" --nonvariant_site_tfrecord_path "/tmp/tmp797co85g/gvcf.tfrecord@30.gz" --gvcf_outfile "deepvariant/A53T_828_21.12_SW_Barcode02_laser_DNA.gvcf"

2025-01-09 21:46:02.681485: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
I0109 21:46:05.161989 140358714390336 postprocess_variants.py:972] Using sample name from call_variants output. Sample name: default
2025-01-09 21:46:05.170967: I deepvariant/postprocess_variants.cc:88] Read from: /tmp/tmp797co85g/call_variants_output.tfrecord.gz
2025-01-09 21:46:10.518986: I deepvariant/postprocess_variants.cc:103] Total #entries in single_site_calls = 716053
I0109 21:46:21.896454 140358714390336 postprocess_variants.py:1037] CVO sorting took 0.27877105474472047 minutes
I0109 21:46:21.897086 140358714390336 postprocess_variants.py:1040] Transforming call_variants_output to variants.
I0109 21:47:59.905014 140358714390336 postprocess_variants.py:1080] Processing variants (and writing to temporary file) took 1.6334492166837056 minutes
I0109 21:51:21.513944 140358714390336 postprocess_variants.py:1093] Finished writing VCF and gVCF in 3.360126026471456 minutes.
I0109 21:51:21.516364 140358714390336 genomics_reader.py:222] Reading deepvariant/A53T_828_21.12_SW_Barcode02_laser_DNA.vcf with NativeVcfReader
I0109 21:52:02.180566 140358714390336 postprocess_variants.py:1104] Generating VCF stats took 0.6777728875478108 minutes.

real	6m1.148s
user	5m36.445s
sys	0m7.576s
[Thu Jan  9 21:52:04 2025]
Finished job 6.
5 of 9 steps (56%) done
Resources before job selection: {'_cores': 50, '_nodes': 9223372036854775807}
Ready jobs (1):
	phase_vcf
Select jobs to execute...
Using greedy selector because only single job has to be scheduled.
Selected jobs (1):
	phase_vcf
Resources after job selection: {'_cores': 0, '_nodes': 9223372036854775806}

[Thu Jan  9 21:52:04 2025]
rule phase_vcf:
    input: mapping/A53T_828_21.12_SW_Barcode02_laser_DNA.bam, longshot/A53T_828_21.12_SW_Barcode02_laser_DNA_region.vcf.gz, deepvariant/A53T_828_21.12_SW_Barcode02_laser_DNA.vcf, /home/MRHannahMacpherson/MinaRyten/Emil/references/GRCh38.primary_assembly.genome.fa
    output: phased_vcf/A53T_828_21.12_SW_Barcode02_laser_DNA_phased_region_longshot.vcf.gz, phased_vcf/A53T_828_21.12_SW_Barcode02_laser_DNA_phased_region_deepvariant.vcf.gz
    jobid: 9
    reason: Missing output files: phased_vcf/A53T_828_21.12_SW_Barcode02_laser_DNA_phased_region_deepvariant.vcf.gz, phased_vcf/A53T_828_21.12_SW_Barcode02_laser_DNA_phased_region_longshot.vcf.gz; Input files updated by another job: deepvariant/A53T_828_21.12_SW_Barcode02_laser_DNA.vcf, longshot/A53T_828_21.12_SW_Barcode02_laser_DNA_region.vcf.gz, mapping/A53T_828_21.12_SW_Barcode02_laser_DNA.bam
    threads: 50
    resources: tmpdir=/tmp

Activating conda environment: .snakemake/conda/c90d9ffc95e00cfa98e62cc563e5a4fb_
WARNING: Ignoring --row-limit as heuristic is not used as algorithm.
This is WhatsHap 2.3 running under Python 3.8.20
WARNING: Read group "A53T_828_21.12_SW_Barcode02_laser_DNA SM:A53T_828_21.12_SW_Barcode02_laser_DNA" does not contain an SM field to assign it to a sample. Use --ignore-read-groups to use these alignments anyway.
Working on 1 sample from 1 family

# Working on contig chr4 in individual SAMPLE
Found 71747 usable heterozygous variants (0 skipped due to missing genotypes)
WARNING: Sample 'SAMPLE' not found in any BAM/CRAM file.
Found 0 reads covering 0 variants
Kept 0 reads that cover at least two variants each
Selected 0 most phase-informative reads covering 0 variants
Best-case phasing would result in 0 non-singleton phased blocks (0 singletons). 
Phasing 1 sample by solving the MEC problem ...
No. of phased blocks: 0

# Resource usage
Maximum memory usage: 0.564 GB
Time spent reading BAM/CRAM:                    1.2 s
Time spent parsing VCF:                         2.6 s
Time spent selecting reads:                     0.0 s
Time spent phasing:                             0.0 s
Time spent writing VCF:                         3.5 s
Time spent finding components:                  0.0 s
Time spent on rest:                             6.8 s
Total elapsed time:                            14.0 s
WARNING: Ignoring --row-limit as heuristic is not used as algorithm.
This is WhatsHap 2.3 running under Python 3.8.20
WARNING: Read group "A53T_828_21.12_SW_Barcode02_laser_DNA SM:A53T_828_21.12_SW_Barcode02_laser_DNA" does not contain an SM field to assign it to a sample. Use --ignore-read-groups to use these alignments anyway.
Working on 1 sample from 1 family

# Working on contig chr4 in individual default
Found 81048 usable heterozygous variants (42344 skipped due to missing genotypes)
WARNING: Sample 'default' not found in any BAM/CRAM file.
Found 0 reads covering 0 variants
Kept 0 reads that cover at least two variants each
Selected 0 most phase-informative reads covering 0 variants
Best-case phasing would result in 0 non-singleton phased blocks (0 singletons). 
Phasing 1 sample by solving the MEC problem ...
No. of phased blocks: 0

# Resource usage
Maximum memory usage: 1.226 GB
Time spent reading BAM/CRAM:                    1.3 s
Time spent parsing VCF:                        12.0 s
Time spent selecting reads:                     0.0 s
Time spent phasing:                             0.0 s
Time spent writing VCF:                         9.8 s
Time spent finding components:                  0.0 s
Time spent on rest:                            51.6 s
Total elapsed time:                            74.8 s
[Thu Jan  9 21:53:42 2025]
Finished job 9.
6 of 9 steps (67%) done
Resources before job selection: {'_cores': 50, '_nodes': 9223372036854775807}
Ready jobs (1):
	create_haplotyped_personalised_reference
Select jobs to execute...
Using greedy selector because only single job has to be scheduled.
Selected jobs (1):
	create_haplotyped_personalised_reference
Resources after job selection: {'_cores': 49, '_nodes': 9223372036854775806}

[Thu Jan  9 21:53:42 2025]
rule create_haplotyped_personalised_reference:
    input: /home/MRHannahMacpherson/MinaRyten/Emil/references/GRCh38.primary_assembly.genome.fa, phased_vcf/A53T_828_21.12_SW_Barcode02_laser_DNA_phased_region_longshot.vcf.gz, phased_vcf/A53T_828_21.12_SW_Barcode02_laser_DNA_phased_region_deepvariant.vcf.gz
    output: personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_longshot_hap1_region.fa.gz, personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_longshot_hap2_region.fa.gz, personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_deepvariant_hap1_region.fa.gz, personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_deepvariant_hap2_region.fa.gz
    jobid: 8
    reason: Missing output files: personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_deepvariant_hap2_region.fa.gz, personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_longshot_hap1_region.fa.gz, personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_longshot_hap2_region.fa.gz, personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_deepvariant_hap1_region.fa.gz; Input files updated by another job: phased_vcf/A53T_828_21.12_SW_Barcode02_laser_DNA_phased_region_deepvariant.vcf.gz, phased_vcf/A53T_828_21.12_SW_Barcode02_laser_DNA_phased_region_longshot.vcf.gz
    resources: tmpdir=/tmp

Activating conda environment: .snakemake/conda/b629aed5d77d25755445827ea0c1d4f7_
[W::hts_idx_load3] The index file is older than the data file: phased_vcf/A53T_828_21.12_SW_Barcode02_laser_DNA_phased_region_longshot.vcf.gz.tbi
Applied 43528 variants
[W::hts_idx_load3] The index file is older than the data file: phased_vcf/A53T_828_21.12_SW_Barcode02_laser_DNA_phased_region_longshot.vcf.gz.tbi
Applied 115275 variants
The site chr4:56162202 overlaps with another variant, skipping...
The site chr4:78007897 overlaps with another variant, skipping...
The site chr4:86980957 overlaps with another variant, skipping...
The site chr4:110805695 overlaps with another variant, skipping...
The site chr4:121805797 overlaps with another variant, skipping...
The site chr4:124926109 overlaps with another variant, skipping...
Applied 57487 variants
The site chr4:52396719 overlaps with another variant, skipping...
The site chr4:53356752 overlaps with another variant, skipping...
The site chr4:54122461 overlaps with another variant, skipping...
The site chr4:54461941 overlaps with another variant, skipping...
The site chr4:55171520 overlaps with another variant, skipping...
The site chr4:55531910 overlaps with another variant, skipping...
The site chr4:56158397 overlaps with another variant, skipping...
The site chr4:56162202 overlaps with another variant, skipping...
The site chr4:56394862 overlaps with another variant, skipping...
The site chr4:57328848 overlaps with another variant, skipping...
The site chr4:57717486 overlaps with another variant, skipping...
The site chr4:57907009 overlaps with another variant, skipping...
The site chr4:58697281 overlaps with another variant, skipping...
The site chr4:59165441 overlaps with another variant, skipping...
The site chr4:60311780 overlaps with another variant, skipping...
The site chr4:60801420 overlaps with another variant, skipping...
The site chr4:60934862 overlaps with another variant, skipping...
The site chr4:60934871 overlaps with another variant, skipping...
The site chr4:60934873 overlaps with another variant, skipping...
The site chr4:61251879 overlaps with another variant, skipping...
The site chr4:61253712 overlaps with another variant, skipping...
The site chr4:61253714 overlaps with another variant, skipping...
The site chr4:61540550 overlaps with another variant, skipping...
The site chr4:61775911 overlaps with another variant, skipping...
The site chr4:62703363 overlaps with another variant, skipping...
The site chr4:62805220 overlaps with another variant, skipping...
The site chr4:63414957 overlaps with another variant, skipping...
The site chr4:63705752 overlaps with another variant, skipping...
The site chr4:63941703 overlaps with another variant, skipping...
The site chr4:64365221 overlaps with another variant, skipping...
The site chr4:65333539 overlaps with another variant, skipping...
The site chr4:65551282 overlaps with another variant, skipping...
The site chr4:65551284 overlaps with another variant, skipping...
The site chr4:67608409 overlaps with another variant, skipping...
The site chr4:68138389 overlaps with another variant, skipping...
The site chr4:68419184 overlaps with another variant, skipping...
The site chr4:69657765 overlaps with another variant, skipping...
The site chr4:70848773 overlaps with another variant, skipping...
The site chr4:70848782 overlaps with another variant, skipping...
The site chr4:71744304 overlaps with another variant, skipping...
The site chr4:71815153 overlaps with another variant, skipping...
The site chr4:72858252 overlaps with another variant, skipping...
The site chr4:72979641 overlaps with another variant, skipping...
The site chr4:74578868 overlaps with another variant, skipping...
The site chr4:74673491 overlaps with another variant, skipping...
The site chr4:74888951 overlaps with another variant, skipping...
The site chr4:76742923 overlaps with another variant, skipping...
The site chr4:76928111 overlaps with another variant, skipping...
The site chr4:77186639 overlaps with another variant, skipping...
The site chr4:78007897 overlaps with another variant, skipping...
The site chr4:78182888 overlaps with another variant, skipping...
The site chr4:79654656 overlaps with another variant, skipping...
The site chr4:81851611 overlaps with another variant, skipping...
The site chr4:82822982 overlaps with another variant, skipping...
The site chr4:83643337 overlaps with another variant, skipping...
The site chr4:84274333 overlaps with another variant, skipping...
The site chr4:84450128 overlaps with another variant, skipping...
The site chr4:85522909 overlaps with another variant, skipping...
The site chr4:85757231 overlaps with another variant, skipping...
The site chr4:86335376 overlaps with another variant, skipping...
The site chr4:86774721 overlaps with another variant, skipping...
The site chr4:86820531 overlaps with another variant, skipping...
The site chr4:86961662 overlaps with another variant, skipping...
The site chr4:86980957 overlaps with another variant, skipping...
The site chr4:87262647 overlaps with another variant, skipping...
The site chr4:87379788 overlaps with another variant, skipping...
The site chr4:87616053 overlaps with another variant, skipping...
The site chr4:87616268 overlaps with another variant, skipping...
The site chr4:87616271 overlaps with another variant, skipping...
The site chr4:87616274 overlaps with another variant, skipping...
The site chr4:87616277 overlaps with another variant, skipping...
The site chr4:87616280 overlaps with another variant, skipping...
The site chr4:87855277 overlaps with another variant, skipping...
The site chr4:87883726 overlaps with another variant, skipping...
The site chr4:87993284 overlaps with another variant, skipping...
The site chr4:88110826 overlaps with another variant, skipping...
The site chr4:88134011 overlaps with another variant, skipping...
The site chr4:88197197 overlaps with another variant, skipping...
The site chr4:88211363 overlaps with another variant, skipping...
The site chr4:88228886 overlaps with another variant, skipping...
The site chr4:88764205 overlaps with another variant, skipping...
The site chr4:88887534 overlaps with another variant, skipping...
The site chr4:89796286 overlaps with another variant, skipping...
The site chr4:89833481 overlaps with another variant, skipping...
The site chr4:89890248 overlaps with another variant, skipping...
The site chr4:90113773 overlaps with another variant, skipping...
The site chr4:90113799 overlaps with another variant, skipping...
The site chr4:90113912 overlaps with another variant, skipping...
The site chr4:91000219 overlaps with another variant, skipping...
The site chr4:91226015 overlaps with another variant, skipping...
The site chr4:91296467 overlaps with another variant, skipping...
The site chr4:91517784 overlaps with another variant, skipping...
The site chr4:91553858 overlaps with another variant, skipping...
The site chr4:91705393 overlaps with another variant, skipping...
The site chr4:91967250 overlaps with another variant, skipping...
The site chr4:91999388 overlaps with another variant, skipping...
The site chr4:91999393 overlaps with another variant, skipping...
The site chr4:92090158 overlaps with another variant, skipping...
The site chr4:92658793 overlaps with another variant, skipping...
The site chr4:92740675 overlaps with another variant, skipping...
The site chr4:92868070 overlaps with another variant, skipping...
The site chr4:93047883 overlaps with another variant, skipping...
The site chr4:93145471 overlaps with another variant, skipping...
The site chr4:93229161 overlaps with another variant, skipping...
The site chr4:93240769 overlaps with another variant, skipping...
The site chr4:93294463 overlaps with another variant, skipping...
The site chr4:93327449 overlaps with another variant, skipping...
The site chr4:93917799 overlaps with another variant, skipping...
The site chr4:94340849 overlaps with another variant, skipping...
The site chr4:95096730 overlaps with another variant, skipping...
The site chr4:95393864 overlaps with another variant, skipping...
The site chr4:96060367 overlaps with another variant, skipping...
The site chr4:96098540 overlaps with another variant, skipping...
The site chr4:96112351 overlaps with another variant, skipping...
The site chr4:96139726 overlaps with another variant, skipping...
The site chr4:96169775 overlaps with another variant, skipping...
The site chr4:96202522 overlaps with another variant, skipping...
The site chr4:98056637 overlaps with another variant, skipping...
The site chr4:98130940 overlaps with another variant, skipping...
The site chr4:98146030 overlaps with another variant, skipping...
The site chr4:98201279 overlaps with another variant, skipping...
The site chr4:98448613 overlaps with another variant, skipping...
The site chr4:98549312 overlaps with another variant, skipping...
The site chr4:98555977 overlaps with another variant, skipping...
The site chr4:98556047 overlaps with another variant, skipping...
The site chr4:98809843 overlaps with another variant, skipping...
The site chr4:99066736 overlaps with another variant, skipping...
The site chr4:99588927 overlaps with another variant, skipping...
The site chr4:99588928 overlaps with another variant, skipping...
The site chr4:99588977 overlaps with another variant, skipping...
The site chr4:100378689 overlaps with another variant, skipping...
The site chr4:102579648 overlaps with another variant, skipping...
The site chr4:102880689 overlaps with another variant, skipping...
The site chr4:105110373 overlaps with another variant, skipping...
The site chr4:109875755 overlaps with another variant, skipping...
The site chr4:109875756 overlaps with another variant, skipping...
The site chr4:110298503 overlaps with another variant, skipping...
The site chr4:110321802 overlaps with another variant, skipping...
The site chr4:110805695 overlaps with another variant, skipping...
The site chr4:110833672 overlaps with another variant, skipping...
The site chr4:116356149 overlaps with another variant, skipping...
The site chr4:117192042 overlaps with another variant, skipping...
The site chr4:118287147 overlaps with another variant, skipping...
The site chr4:118683889 overlaps with another variant, skipping...
The site chr4:119622878 overlaps with another variant, skipping...
The site chr4:119756475 overlaps with another variant, skipping...
The site chr4:120571583 overlaps with another variant, skipping...
The site chr4:120873012 overlaps with another variant, skipping...
The site chr4:121359659 overlaps with another variant, skipping...
The site chr4:121805797 overlaps with another variant, skipping...
The site chr4:122622919 overlaps with another variant, skipping...
The site chr4:123315376 overlaps with another variant, skipping...
The site chr4:124926109 overlaps with another variant, skipping...
The site chr4:125656303 overlaps with another variant, skipping...
The site chr4:125867898 overlaps with another variant, skipping...
The site chr4:126777722 overlaps with another variant, skipping...
The site chr4:127231478 overlaps with another variant, skipping...
The site chr4:127385729 overlaps with another variant, skipping...
The site chr4:127938596 overlaps with another variant, skipping...
The site chr4:128624922 overlaps with another variant, skipping...
The site chr4:129835870 overlaps with another variant, skipping...
The site chr4:130535014 overlaps with another variant, skipping...
The site chr4:132624600 overlaps with another variant, skipping...
The site chr4:132899593 overlaps with another variant, skipping...
The site chr4:133462175 overlaps with another variant, skipping...
The site chr4:134043684 overlaps with another variant, skipping...
The site chr4:134208819 overlaps with another variant, skipping...
The site chr4:134383991 overlaps with another variant, skipping...
The site chr4:134478127 overlaps with another variant, skipping...
The site chr4:134956382 overlaps with another variant, skipping...
The site chr4:134956383 overlaps with another variant, skipping...
The site chr4:135125477 overlaps with another variant, skipping...
The site chr4:135885664 overlaps with another variant, skipping...
The site chr4:136202527 overlaps with another variant, skipping...
The site chr4:136473800 overlaps with another variant, skipping...
The site chr4:136941762 overlaps with another variant, skipping...
The site chr4:137683834 overlaps with another variant, skipping...
The site chr4:138219949 overlaps with another variant, skipping...
The site chr4:138739360 overlaps with another variant, skipping...
The site chr4:139023110 overlaps with another variant, skipping...
The site chr4:139989884 overlaps with another variant, skipping...
Applied 138942 variants
[Thu Jan  9 21:54:45 2025]
Finished job 8.
7 of 9 steps (78%) done
Resources before job selection: {'_cores': 50, '_nodes': 9223372036854775807}
Ready jobs (1):
	align_haplotypes_to_hg38
Select jobs to execute...
Using greedy selector because only single job has to be scheduled.
Selected jobs (1):
	align_haplotypes_to_hg38
Resources after job selection: {'_cores': 0, '_nodes': 9223372036854775806}

[Thu Jan  9 21:54:45 2025]
rule align_haplotypes_to_hg38:
    input: personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_longshot_hap1_region.fa.gz, personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_longshot_hap2_region.fa.gz, personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_deepvariant_hap1_region.fa.gz, personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_deepvariant_hap2_region.fa.gz, /home/MRHannahMacpherson/MinaRyten/Emil/references/GRCh38.primary_assembly.genome.fa
    output: personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_hap1_longshot_sorted.bam, personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_hap1_longshot_sorted.bam.bai, personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_hap2_longshot_sorted.bam, personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_hap2_longshot_sorted.bam.bai, personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_hap1_deepvariant_sorted.bam, personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_hap1_deepvariant_sorted.bam.bai, personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_hap2_deepvariant_sorted.bam, personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_hap2_deepvariant_sorted.bam.bai
    jobid: 7
    reason: Missing output files: personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_hap1_deepvariant_sorted.bam, personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_hap1_longshot_sorted.bam, personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_hap2_deepvariant_sorted.bam, personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_hap2_longshot_sorted.bam; Input files updated by another job: personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_deepvariant_hap2_region.fa.gz, personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_longshot_hap1_region.fa.gz, personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_longshot_hap2_region.fa.gz, personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_deepvariant_hap1_region.fa.gz
    threads: 50
    resources: tmpdir=/tmp

Activating conda environment: .snakemake/conda/821afc5f42557a83b898d84d915f5d43_
[M::mm_idx_gen::90.023*1.00] collected minimizers
[M::mm_idx_gen::101.912*1.22] sorted minimizers
[M::main::101.912*1.22] loaded/built the index for 194 target sequence(s)
[M::mm_mapopt_update::112.718*1.20] mid_occ = 138
[M::mm_idx_stat] kmer size: 19; skip: 19; is_hpc: 0; #seq: 194
[M::mm_idx_stat::116.411*1.20] distinct minimizers: 214650311 (92.16% are singletons); average occurrences: 1.378; average spacing: 10.479; total length: 3099750718
[M::worker_pipeline::196.699*1.11] mapped 1 sequences
[M::main] Version: 2.26-r1175
[M::main] CMD: minimap2 -a -x asm5 /home/MRHannahMacpherson/MinaRyten/Emil/references/GRCh38.primary_assembly.genome.fa personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_longshot_hap1_region.fa.gz
[M::main] Real time: 197.583 sec; CPU: 219.923 sec; Peak RSS: 13.065 GB
[M::mm_idx_gen::55.779*1.42] collected minimizers
[M::mm_idx_gen::69.140*1.69] sorted minimizers
[M::main::69.140*1.69] loaded/built the index for 194 target sequence(s)
[M::mm_mapopt_update::76.605*1.63] mid_occ = 138
[M::mm_idx_stat] kmer size: 19; skip: 19; is_hpc: 0; #seq: 194
[M::mm_idx_stat::80.439*1.60] distinct minimizers: 214650311 (92.16% are singletons); average occurrences: 1.378; average spacing: 10.479; total length: 3099750718
[M::worker_pipeline::163.432*1.27] mapped 1 sequences
[M::main] Version: 2.26-r1175
[M::main] CMD: minimap2 -a -x asm5 /home/MRHannahMacpherson/MinaRyten/Emil/references/GRCh38.primary_assembly.genome.fa personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_longshot_hap2_region.fa.gz
[M::main] Real time: 164.421 sec; CPU: 208.593 sec; Peak RSS: 13.051 GB
[M::mm_idx_gen::78.024*1.30] collected minimizers
[M::mm_idx_gen::90.999*1.51] sorted minimizers
[M::main::90.999*1.51] loaded/built the index for 194 target sequence(s)
[M::mm_mapopt_update::110.707*1.41] mid_occ = 138
[M::mm_idx_stat] kmer size: 19; skip: 19; is_hpc: 0; #seq: 194
[M::mm_idx_stat::116.293*1.39] distinct minimizers: 214650311 (92.16% are singletons); average occurrences: 1.378; average spacing: 10.479; total length: 3099750718
[M::worker_pipeline::189.628*1.23] mapped 1 sequences
[M::main] Version: 2.26-r1175
[M::main] CMD: minimap2 -a -x asm5 /home/MRHannahMacpherson/MinaRyten/Emil/references/GRCh38.primary_assembly.genome.fa personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_deepvariant_hap1_region.fa.gz
[M::main] Real time: 190.347 sec; CPU: 233.499 sec; Peak RSS: 13.060 GB
[M::mm_idx_gen::55.227*1.41] collected minimizers
[M::mm_idx_gen::66.122*1.66] sorted minimizers
[M::main::66.122*1.66] loaded/built the index for 194 target sequence(s)
[M::mm_mapopt_update::73.809*1.59] mid_occ = 138
[M::mm_idx_stat] kmer size: 19; skip: 19; is_hpc: 0; #seq: 194
[M::mm_idx_stat::77.916*1.56] distinct minimizers: 214650311 (92.16% are singletons); average occurrences: 1.378; average spacing: 10.479; total length: 3099750718
[M::worker_pipeline::152.128*1.28] mapped 1 sequences
[M::main] Version: 2.26-r1175
[M::main] CMD: minimap2 -a -x asm5 /home/MRHannahMacpherson/MinaRyten/Emil/references/GRCh38.primary_assembly.genome.fa personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_deepvariant_hap2_region.fa.gz
[M::main] Real time: 152.916 sec; CPU: 196.138 sec; Peak RSS: 13.049 GB
[Thu Jan  9 22:06:37 2025]
Finished job 7.
8 of 9 steps (89%) done
Resources before job selection: {'_cores': 50, '_nodes': 9223372036854775807}
Ready jobs (1):
	all
Select jobs to execute...
Using greedy selector because only single job has to be scheduled.
Selected jobs (1):
	all
Resources after job selection: {'_cores': 49, '_nodes': 9223372036854775806}

[Thu Jan  9 22:06:37 2025]
localrule all:
    input: longshot/A53T_828_21.12_SW_Barcode02_laser_DNA.vcf.gz, deepvariant/A53T_828_21.12_SW_Barcode02_laser_DNA.vcf, deepvariant/A53T_828_21.12_SW_Barcode02_laser_DNA.gvcf, personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_hap1_longshot_sorted.bam, personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_hap2_longshot_sorted.bam, personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_hap1_deepvariant_sorted.bam, personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_hap2_deepvariant_sorted.bam, deepvariant/A53T_828_21.12_SW_Barcode02_laser_DNA.vcf
    jobid: 0
    reason: Input files updated by another job: personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_hap1_deepvariant_sorted.bam, personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_hap2_longshot_sorted.bam, deepvariant/A53T_828_21.12_SW_Barcode02_laser_DNA.vcf, personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_hap1_longshot_sorted.bam, longshot/A53T_828_21.12_SW_Barcode02_laser_DNA.vcf.gz, personalised_genomes/A53T_828_21.12_SW_Barcode02_laser_DNA_hap2_deepvariant_sorted.bam, deepvariant/A53T_828_21.12_SW_Barcode02_laser_DNA.gvcf
    resources: tmpdir=/tmp

[Thu Jan  9 22:06:37 2025]
Finished job 0.
9 of 9 steps (100%) done
Complete log: ../../../snakemakes/laseR_DNA_DV/.snakemake/log/2025-01-09T160726.103217.snakemake.log
unlocking
removing lock
removing lock
removed all locks
